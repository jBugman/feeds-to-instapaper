<?xml version="1.0"?>
<rss 
  xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>GHC - Blog</title>
    <link>http://ghc.haskell.org/trac/ghc/blog</link>
    <description>The GHC blog</description>
    <language>en-US</language>
    <generator>Trac 1.2.2</generator>
    <image>
      <title>GHC</title>
      <url>http://ghc.haskell.org/trac/ghc/chrome/site/ghc_logo.png</url>
      <link>http://ghc.haskell.org/trac/ghc/blog</link>
    </image>
    <item>
      <title>GHC 8.4.1 released</title>
      <dc:creator>Ben Gamari</dc:creator>
      <pubDate>Thu, 08 Mar 2018 17:22:31 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/ghc-8.4.1-released</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/ghc-8.4.1-released</guid>
      <description>&lt;p&gt;
The GHC developers are very happy to announce the 8.4.1 release of
Glasgow Haskell Compiler. Binary and source distributions can be found
at
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://downloads.haskell.org/~ghc/8.4.1/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://downloads.haskell.org/~ghc/8.4.1/&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is the third major release in the GHC 8 series. As such, the focus
of this release is performance, stability, and consolidation.
Consequently numerous cleanups can be seen throughout the compiler
including,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Further refinement of TypeInType, including significant improvements
in error messages.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Improvements in code generation resulting in noticable performance
improvements in some types of programs.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Core library improvements, including phase 2 of the Semigroup/Monoid
proposal
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Many improvements to instance deriving
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The resolution of nearly 300 other tickets
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
A more thorough list of the changes in this release can be found in the
release notes,
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://downloads.haskell.org/~ghc/8.4.1/docs/html/users_guide/8.4.1-notes.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://downloads.haskell.org/~ghc/8.4.1/docs/html/users_guide/8.4.1-notes.html&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There are a few changes in release-engineering matters that should be
noted,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;This is GHC's first release on it's new, accelerated release
schedule. From now on GHC will produce one release every six months.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;While we typically strive to produce OpenBSD builds, the gcc shipped
with OpenBSD 6.1 is unfortunately too old to compile this release.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;FreeBSD builds are still in progress
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
This release has been the result of approximately six months of work by
over one hundred code contributors. Thanks to everyone who has helped in
writing patches, testing, reporting bugs, and offering feedback over the
last year.
&lt;/p&gt;
&lt;p&gt;
As always, let us know if you encounter trouble.
&lt;/p&gt;
&lt;h2 id="Howtogetit"&gt;How to get it&lt;/h2&gt;
&lt;p&gt;
This release can be downloaded from
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://www.haskell.org/ghc/download_ghc_8_4_1.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.haskell.org/ghc/download_ghc_8_4_1.html&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
For older versions see
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://www.haskell.org/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.haskell.org/ghc/&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We supply binary builds in the native package format for many platforms, and the
source distribution is available from the same place.
&lt;/p&gt;
&lt;h2 id="Background"&gt;Background&lt;/h2&gt;
&lt;p&gt;
Haskell is a standard lazy functional programming language.
&lt;/p&gt;
&lt;p&gt;
GHC is a state-of-the-art programming suite for Haskell.  Included is
an optimising compiler generating efficient code for a variety of
platforms, together with an interactive system for convenient, quick
development.  The distribution includes space and time profiling
facilities, a large collection of libraries, and support for various
language extensions, including concurrency, exceptions, and foreign
language interfaces. GHC is distributed under a BSD-style open source license.
&lt;/p&gt;
&lt;p&gt;
A wide variety of Haskell related resources (tutorials, libraries,
specifications, documentation, compilers, interpreters, references,
contact information, links to research groups) are available from the
Haskell home page (see below).
&lt;/p&gt;
&lt;p&gt;
On-line GHC-related resources
&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;
&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;
Relevant URLs on the World-Wide Web:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://www.haskell.org/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;GHC home page&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;GHC developers' home page&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://www.haskell.org/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Haskell home page&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="SupportedPlatforms"&gt;Supported Platforms&lt;/h2&gt;
&lt;p&gt;
The list of platforms we support, and the people responsible for them,
is &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Contributors"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;here&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Ports to other platforms are possible with varying degrees of
difficulty. The &lt;a class="ext-link" href="http://ghc.haskell.org/trac/ghc/wiki/Building"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Building Guide&lt;/a&gt; describes how to go about porting to a
new platform.
&lt;/p&gt;
&lt;h2 id="Developers"&gt;Developers&lt;/h2&gt;
&lt;p&gt;
We welcome new contributors.  Instructions on accessing our source
code repository, and getting started with hacking on GHC, are
available from the GHC's developer's site run by &lt;a class="ext-link" href="http://ghc.haskell.org/trac/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Trac&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id="CommunityResources"&gt;Community Resources&lt;/h2&gt;
&lt;p&gt;
There are mailing lists for GHC users, develpoers, and monitoring bug tracker
activity; to subscribe, use the Mailman
&lt;a class="ext-link" href="http://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;web interface&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There are several other Haskell and GHC-related mailing lists on
&lt;a class="ext-link" href="http://www.haskell.org"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;haskell.org&lt;/a&gt;; for the full list, see the
&lt;a class="ext-link" href="https://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;lists page&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Some GHC developers hang out on the &lt;code&gt;#ghc&lt;/code&gt; and &lt;code&gt;#haskell&lt;/code&gt; of the Freenode IRC
network, too. See the &lt;a class="ext-link" href="http://www.haskell.org/haskellwiki/IRC_channel"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Haskell wiki&lt;/a&gt; for details.
&lt;/p&gt;
&lt;p&gt;
Please report bugs using our bug tracking system. Instructions on reporting bugs
can be found &lt;a href="http://www.haskell.org/ghc/reportabug"&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>release</category>
    </item>
    <item>
      <title>GHC 8.2.2 is available</title>
      <dc:creator>Ben Gamari</dc:creator>
      <pubDate>Tue, 21 Nov 2017 22:06:57 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/ghc-8.2.2-released</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/ghc-8.2.2-released</guid>
      <description>&lt;p&gt;
The GHC Team is pleased to announce a new minor release of GHC. This release
builds on the performance and stability improvements of 8.2.1, fixing a variety
of correctness bugs, improving error messages, and making the compiler more
portable.
&lt;/p&gt;
&lt;p&gt;
Notable bug-fixes include
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A correctness issue resulting in segmentation faults in some
FFI-users (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13707" title="#13707: bug: xmobar crashes with segmentation faults? (closed: fixed)"&gt;#13707&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/14346" title="#14346: bug: 8.2.1 regression: heap corruption after safe foreign calls (closed: fixed)"&gt;#14346&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A correctness issue resulting in undefined behavior in some programs
using STM (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/14171" title="#14171: bug: STM causes program to suddenly exit (closed: fixed)"&gt;#14171&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A bug which may have manifested in segmentation faults in
out-of-memory condition (&lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/14329" title="#14329: bug: GHC 8.2.1 segfaults while bootstrapping master (new)"&gt;#14329&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;clearBit of Natural no longer bottoms (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13203" title="#13203: bug: Implement Bits Natural clearBit (closed: fixed)"&gt;#13203&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A specialisation bug resulting in exponential blowup of compilation
time in some specialisation-intensive programs (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/14379" title="#14379: bug: Regression - GHC 8.2.1 Consumes All Memory On Build (closed: fixed)"&gt;#14379&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;ghc-pkg now works even in environments with misconfigured NFS mounts
(&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13945" title="#13945: bug: 'ghc-pkg update' fails due to bad file descriptor error (closed: fixed)"&gt;#13945&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;GHC again supports production of position-independent executables
(&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13702" title="#13702: bug: GHC can't produce position independent executables (closed: fixed)"&gt;#13702&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Better error messages around kind mismatches (&lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/11198" title="#11198: bug: TypeInType error message regressions (new)"&gt;#11198&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/12373" title="#12373: bug: Type error but types match (closed: fixed)"&gt;#12373&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13530" title="#13530: bug: Horrible error message due to TypeInType (closed: fixed)"&gt;#13530&lt;/a&gt;,
&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13610" title="#13610: bug: Unhelpful error messages about lifted and unlifted types (closed: fixed)"&gt;#13610&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
A thorough list of the changes in the release can be found in the release
notes,
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://haskell.org/ghc/docs/8.2.2/html/users_guide/8.2.2-notes.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://haskell.org/ghc/docs/8.2.2/html/users_guide/8.2.2-notes.html&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="Howtogetit"&gt;How to get it&lt;/h2&gt;
&lt;p&gt;
This release can be downloaded from
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://www.haskell.org/ghc/download_ghc_8_2_2.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.haskell.org/ghc/download_ghc_8_2_2.html&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
For older versions see
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://www.haskell.org/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://www.haskell.org/ghc/&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We supply binary builds in the native package format for many platforms, and the
source distribution is available from the same place.
&lt;/p&gt;
&lt;h2 id="Background"&gt;Background&lt;/h2&gt;
&lt;p&gt;
Haskell is a standard lazy functional programming language.
&lt;/p&gt;
&lt;p&gt;
GHC is a state-of-the-art programming suite for Haskell.  Included is
an optimising compiler generating efficient code for a variety of
platforms, together with an interactive system for convenient, quick
development.  The distribution includes space and time profiling
facilities, a large collection of libraries, and support for various
language extensions, including concurrency, exceptions, and foreign
language interfaces. GHC is distributed under a BSD-style open source license.
&lt;/p&gt;
&lt;p&gt;
A wide variety of Haskell related resources (tutorials, libraries,
specifications, documentation, compilers, interpreters, references,
contact information, links to research groups) are available from the
Haskell home page (see below).
&lt;/p&gt;
&lt;p&gt;
On-line GHC-related resources
&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;
&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;
Relevant URLs on the World-Wide Web:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://www.haskell.org/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;GHC home page&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;GHC developers' home page&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://www.haskell.org/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Haskell home page&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="SupportedPlatforms"&gt;Supported Platforms&lt;/h2&gt;
&lt;p&gt;
The list of platforms we support, and the people responsible for them,
is &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Contributors"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;here&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Ports to other platforms are possible with varying degrees of
difficulty. The &lt;a class="ext-link" href="http://ghc.haskell.org/trac/ghc/wiki/Building"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Building Guide&lt;/a&gt; describes how to go about porting to a
new platform.
&lt;/p&gt;
&lt;h2 id="Developers"&gt;Developers&lt;/h2&gt;
&lt;p&gt;
We welcome new contributors.  Instructions on accessing our source
code repository, and getting started with hacking on GHC, are
available from the GHC's developer's site run by &lt;a class="ext-link" href="http://ghc.haskell.org/trac/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Trac&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id="CommunityResources"&gt;Community Resources&lt;/h2&gt;
&lt;p&gt;
There are mailing lists for GHC users, develpoers, and monitoring bug tracker
activity; to subscribe, use the Mailman
&lt;a class="ext-link" href="http://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;web interface&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There are several other Haskell and GHC-related mailing lists on
&lt;a class="ext-link" href="http://www.haskell.org"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;haskell.org&lt;/a&gt;; for the full list, see the
&lt;a class="ext-link" href="https://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;lists page&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Some GHC developers hang out on the &lt;code&gt;#ghc&lt;/code&gt; and &lt;code&gt;#haskell&lt;/code&gt; of the Freenode IRC
network, too. See the &lt;a class="ext-link" href="http://www.haskell.org/haskellwiki/IRC_channel"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Haskell wiki&lt;/a&gt; for details.
&lt;/p&gt;
&lt;p&gt;
Please report bugs using our bug tracking system. Instructions on reporting bugs
can be found &lt;a href="http://www.haskell.org/ghc/reportabug"&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>release</category>
    </item>
    <item>
      <title>Meet Jenkins: GHC's new CI and build infrastructure</title>
      <dc:creator>Ben Gamari</dc:creator>
      <pubDate>Tue, 01 Aug 2017 01:02:08 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/jenkins-ci</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/jenkins-ci</guid>
      <description>&lt;p&gt;
While Phabricator is generally well-liked among GHC developers, GHC's
interaction with Harbormaster, Phabricator's continuous integration
component, has been less than rosy. The problem is in large part a mismatch
between Harbormaster's design assumptions and GHC's needs, but it's also
in part attributable to the somewhat half-finished state in which
Harbormaster seems to linger. Regardless, we won't go into detail here;
these issues are well covered &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13716" title="#13716: task: Move CI to Jenkins (closed: wontfix)"&gt;elsewhere&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Suffice it to say that, after having looked at a number of alternatives to
Harbormaster (including &lt;a class="ext-link" href="https://buildbot.net/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;buildbot&lt;/a&gt;, GitLab's
&lt;a class="ext-link" href="https://gitlab.com/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Pipelines&lt;/a&gt;, &lt;a class="ext-link" href="https://concourse.ci/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Concourse&lt;/a&gt;,
and home-grown solutions), Jenkins seems to be the best option at
the moment. Of course, this is not to say that it is perfect; as we have
learned over the last few months it is very far from perfect. However,
it has the maturity and user-base to be almost-certainly able to handle
what we need of it on the platforms that we care about.
&lt;/p&gt;
&lt;p&gt;
See the Trac ticket &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13716" title="#13716: task: Move CI to Jenkins (closed: wontfix)"&gt;#13716&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Let's see what we get out of this new bit of infrastructure:
&lt;/p&gt;
&lt;h3 id="Pre-mergetesting"&gt;Pre-merge testing&lt;/h3&gt;
&lt;p&gt;
Currently there are two ways that code ends up in &lt;code&gt;master&lt;/code&gt;,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;a Differential is opened, built with Harbormaster, and eventually
landed (hopefully, but not always, after Harbormaster successfully finishes)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;someone pushes commits directly
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Bad commits routinely end up merged via both channels. This means that
authors of patches failing CI often need to consider whether *their*
patch is incorrect or whether they rather simply had the misfortune of
basing their patch on a bad commit. Even worse, if the commit isn't
quickly reverted or fixed GHC will end up with a hole in its commit
history where neither bisection nor performance tracking will be possible.
For these reasons, we want to catch these commits before they make it
into &lt;code&gt;master&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
To accomplish this we have developed some
&lt;a class="ext-link" href="https://github.com/bgamari/ghc-auto-push"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;tooling&lt;/a&gt; to run CI on
commits *before* they are finally merged to &lt;code&gt;master&lt;/code&gt;. By making CI the
only path patches can take to get to &lt;code&gt;master&lt;/code&gt;, improve our changes of
rejecting bad patches before they turn the tree red.
&lt;/p&gt;
&lt;h3 id="Automationofthereleasebuilds"&gt;Automation of the release builds&lt;/h3&gt;
&lt;p&gt;
Since the 7.10.3 release we have been gradually working towards
automating GHC's release process. Thanks to this work, today a single
person can build binary distributions for all seven tier-1
configurations in approximately a day, most of which is spent simply
waiting. This has allowed us to take responsibility (starting in
8.2.1) for the OpenBSD, FreeBSD, ARMv7 and AArch64 builds in addition to
the traditional tier-1 platforms, allowing us to eliminate the week-long
wait between source distribution availability and the binary
distribution announcement previously needed for correspondence with
binary build contributors..
&lt;/p&gt;
&lt;p&gt;
However, we are far from done: our new Jenkins-based build infrastructure
(see &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13716" title="#13716: task: Move CI to Jenkins (closed: wontfix)"&gt;#13716&lt;/a&gt;) will allow us to produce binary distributions directly from CI,
reducing the cost of producing release builds to nearly nothing.
&lt;/p&gt;
&lt;h3 id="TestingofGHCagainstuserpackages"&gt;Testing of GHC against user packages&lt;/h3&gt;
&lt;p&gt;
While GHC is already tested against Hackage and Stackage prior to release
candidate availability, these builds have been of limited use as
packages low on the dependency tree (think &lt;code&gt;hashable&lt;/code&gt; and &lt;code&gt;lens&lt;/code&gt;)
often don't build prior to the first release candidate. While we do our
best to fix these packages up, the sheer number of them makes
this a losing battle for a small team such as GHC's.
&lt;/p&gt;
&lt;p&gt;
Having the ability to cheaply produce binary distributions means that we
can produce and validate nightly snapshot releases. This gives users a
convenient way to test pre-release compilers and fix their libraries
accordingly. We hope this will spread the maintenance effort across a
larger fraction of the Haskell community and over a longer period of
time, meaning there will be less to do at release time and consequently
pre-release Stackage builds will be more fruitful.
&lt;/p&gt;
&lt;p&gt;
Once the Jenkins infrastructure is stable, we can consider introducing
nightly builds of user packages as well. While building a large
population such as Stackage would likely not be productive, working with
a smaller sample of popular, low-dependency-count packages would be
quite possible. For testing against larger package repositories, leaning on a dedicated tool such as the
&lt;a class="ext-link" href="https://matrix.hackage.haskell.org/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Hackage Matrix Builder&lt;/a&gt; will
likely be a more productive path.
&lt;/p&gt;
&lt;h3 id="ExpandedplatformcoverageofCI"&gt;Expanded platform coverage of CI&lt;/h3&gt;
&lt;p&gt;
While GHC targets a wide variety of architectures and operating systems
(and don't forget cross-compilation targets),
by far the majority of developers use Linux, Darwin, or Windows on
amd64. This means that breakage often only comes to light long after the
culpable patch was merged.
&lt;/p&gt;
&lt;p&gt;
Of course, GHC, being a project with modest financial resources, can't
test each commit on every supported platform. We can, however, shrink
the time between a bad commit being merged and the breakage being found
by testing these "unusual" platforms on a regular (e.g. nightly) basis.
&lt;/p&gt;
&lt;p&gt;
By catching regressions early, we hope to reduce the amount of time
spent bisecting and fixing bugs around release time.
&lt;/p&gt;
&lt;h3 id="Trackingcorelibraries"&gt;Tracking core libraries&lt;/h3&gt;
&lt;p&gt;
Keeping GHC's core library dependencies (e.g. &lt;code&gt;directory&lt;/code&gt;, &lt;code&gt;process&lt;/code&gt;) up-to-date with their respective upstreams
is important to ensure that tools that link against the &lt;code&gt;ghc&lt;/code&gt; library (e.g. &lt;code&gt;ghc-mod&lt;/code&gt;) can build easily.
However, it also requires that we work with nearly a dozen upstream
maintainers at various points in their own release cycles to arrange
that releases are made prior to the GHC release. Moreover, there is
inevitably a fair amount of work propagating verion bounds changes down
the dependency tree. While this work takes relatively little effort in
terms of man-hours,
&lt;/p&gt;
&lt;p&gt;
Jenkins can help us here by allowing us to automate integration testing
of upstream libraries, catching bounds issues and other compatibility
issues well before they are in the critical path of the release.
&lt;/p&gt;
&lt;h3 id="Improveddebuggingtools"&gt;Improved debugging tools&lt;/h3&gt;
&lt;p&gt;
One of the most useful ways to track down a bugs in GHC is bisection.
This is especially true for regressions found in release candidates,
where you have at most a few thousand commits to bisect through.
Nevertheless, GHC builds are long and developer time scarce so this
approach isn't used as often as it could be.
&lt;/p&gt;
&lt;p&gt;
Having an archive of nightly GHC builds will free the developer from
having to build dozens of compilers during bisection, making the process
a significantly more enjoyable experience than it is today. This will
allow us to solve more bugs in less time and with far fewer grey hairs.
&lt;/p&gt;
&lt;h2 id="StatusofJenkinseffort"&gt;Status of Jenkins effort&lt;/h2&gt;
&lt;p&gt;
The Jenkins CI overhaul has been an on-going project throughout the
spring and summer and is nearing completion. The Jenkins configuration
can be seen in the &lt;code&gt;wip/jenkins&lt;/code&gt; branch on &lt;code&gt;git.haskell.org&lt;/code&gt;
(&lt;a class="ext-link" href="https://git.haskell.org/ghc.git/shortlog/refs/heads/wip/jenkins"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;gitweb&lt;/a&gt;). At the moment the prototype is running on a few private machines but we will be setting up a publicly accessible test instance in the coming
weeks. Jenkins will likely coexist with our current Harbormaster
infrastructure for a month or so while we validate that things are
stable.
&lt;/p&gt;
</description>
      <category>ci</category>
      <category>testing</category>
      <category>infrastructure</category>
    </item>
    <item>
      <title>Reflections on GHC's release schedule</title>
      <dc:creator>Ben Gamari</dc:creator>
      <pubDate>Tue, 01 Aug 2017 00:59:04 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/2017-release-schedule</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/2017-release-schedule</guid>
      <description>&lt;p&gt;
Looking back on GHC's past release schedule reveals a rather checkered past,
&lt;/p&gt;
&lt;table class="wiki"&gt;
&lt;tr&gt;&lt;th&gt; Release &lt;/th&gt;&lt;th&gt; Date &lt;/th&gt;&lt;th&gt; Time to next major release
&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  6.12.1   &lt;/td&gt;&lt;td style="text-align: center"&gt;  mid December 2009                &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;           &lt;/td&gt;&lt;td style="text-align: center"&gt;                                   &lt;/td&gt;&lt;td&gt; 12 months
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  7.0.1    &lt;/td&gt;&lt;td style="text-align: center"&gt;  mid November 2010                &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;           &lt;/td&gt;&lt;td style="text-align: center"&gt;                                   &lt;/td&gt;&lt;td&gt; 9.5 months
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  7.2.1    &lt;/td&gt;&lt;td style="text-align: center"&gt;  early August 2011                &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;           &lt;/td&gt;&lt;td style="text-align: center"&gt;                                   &lt;/td&gt;&lt;td&gt; 6 months
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  7.4.1    &lt;/td&gt;&lt;td style="text-align: center"&gt;  early February 2012              &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;           &lt;/td&gt;&lt;td style="text-align: center"&gt;                                   &lt;/td&gt;&lt;td&gt; 7 months
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  7.6.1    &lt;/td&gt;&lt;td style="text-align: center"&gt;  early September 2012             &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;           &lt;/td&gt;&lt;td style="text-align: center"&gt;                                   &lt;/td&gt;&lt;td&gt; 19 months
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  7.8.1    &lt;/td&gt;&lt;td style="text-align: center"&gt;  early April 2014                 &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;           &lt;/td&gt;&lt;td style="text-align: center"&gt;                                   &lt;/td&gt;&lt;td&gt; 13 months
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  7.10.1   &lt;/td&gt;&lt;td style="text-align: center"&gt;  late March 2015                  &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;           &lt;/td&gt;&lt;td style="text-align: center"&gt;                                   &lt;/td&gt;&lt;td&gt; 14 months
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  8.0.1    &lt;/td&gt;&lt;td style="text-align: center"&gt;  late May 2016                    &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;           &lt;/td&gt;&lt;td style="text-align: center"&gt;                                   &lt;/td&gt;&lt;td&gt; 14 months
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  8.2.1    &lt;/td&gt;&lt;td style="text-align: center"&gt;  late July 2017                   &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;           &lt;/td&gt;&lt;td style="text-align: center"&gt;                                   &lt;/td&gt;&lt;td&gt; -
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;  8.4.1    &lt;/td&gt;&lt;td style="text-align: center"&gt;  TDB and the topic of this post   &lt;/td&gt;&lt;td style="text-align: center"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;
There are a few things to notice here:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;release cadence has swung rather wildly
&lt;/li&gt;&lt;li&gt;the release cycle has stretched in the last several releases
&lt;/li&gt;&lt;li&gt;time-between-releases generally tends to be on the order of a year
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
While GHC is far from the only compiler with such an extended release
schedule, others (namely LLVM, Go, and, on the extreme end, Rust) have shown
that shorter cycles are possible. I personally think that a more
stable, shorter release cycle would be better for developers and users
alike,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;developers have a tighter feedback loop, inducing less pressure
to get new features and non-critical bugfixes into minor releases
&lt;/li&gt;&lt;li&gt;release managers have fewer patches to cherry-pick
&lt;/li&gt;&lt;li&gt;users see new features and bugfixes more quickly
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
With 8.2.1 at long last behind us, now is a good time to reflect
on why these cycles are so long, what release schedule we would like
to have, and what we can change to realize such a schedule. On the way we'll take some time to examine the circumstances that lead to the 8.2.1 release which, while not typical, remind us that there is a certain amount of unpredictability inherent in developing large systems like GHC; a fact that must be born in mind when considering release policy.
&lt;/p&gt;
&lt;p&gt;
Let's dig in...
&lt;/p&gt;
&lt;h2 id="Thereleaseprocesstoday"&gt;The release process today&lt;/h2&gt;
&lt;p&gt;
Cutting a GHC release is a fairly lengthy process involving many
parties and a significant amount of planning. The typical process
for a major release looks something like this,
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;em&gt;(a few months after the previous major release)&lt;/em&gt; A set
of release priorities are defined determining which major features
we want in the coming release
&lt;/li&gt;&lt;li&gt;wait until all major features are merged to the &lt;code&gt;master&lt;/code&gt; branch
&lt;/li&gt;&lt;li&gt;when all features are merged, cut a stable branch
&lt;/li&gt;&lt;li&gt;in parallel:
&lt;ol class="loweralpha"&gt;&lt;li&gt;coordinate with core library authors to determine which library
versions the new release should ship
&lt;/li&gt;&lt;li&gt;prepare release documentation
&lt;/li&gt;&lt;li&gt;do preliminary testing against Hackage and Stackage to identify and
fix early bugs
&lt;/li&gt;&lt;li&gt;backport significant fixes merged to &lt;code&gt;master&lt;/code&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;when the tasks in (4) are sufficiently advanced, cut a source
release for a release candidate
&lt;/li&gt;&lt;li&gt;produce tier-1 builds and send source tarballs to binary packagers,
wait a week to prepare binary builds; if anyone finds the tree is
unbuildable, go back to (5)
&lt;/li&gt;&lt;li&gt;upload release artifacts, announce release candidate
&lt;/li&gt;&lt;li&gt;wait a few weeks for testing
&lt;/li&gt;&lt;li&gt;if there are significant issues: fix them and return to (5)
&lt;/li&gt;&lt;li&gt;finalize release details (e.g. release notes, last check over core library versions)
&lt;/li&gt;&lt;li&gt;cut source tarball, send to binary build contributors, wait a week for builds
&lt;/li&gt;&lt;li&gt;announce final release, celebrate!
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
Typically the largest time-sinks in this process are waiting for
regression fixes and coordinating with core library authors. In
particular, the coordination involved in the latter isn't difficult, but
merely high latency.
&lt;/p&gt;
&lt;p&gt;
In the case of 8.2.1, the timeline looked something like this,
&lt;/p&gt;
&lt;table class="wiki"&gt;
&lt;tr&gt;&lt;th&gt; Time            &lt;/th&gt;&lt;th&gt; Event
&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; Fall 2016         &lt;/td&gt;&lt;td&gt; release priorities for 8.2 discussed
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; Early March 2017  &lt;/td&gt;&lt;td&gt; stable branch cut
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; Early April 2017  &lt;/td&gt;&lt;td&gt; most core library versions set
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;                   &lt;/td&gt;&lt;td&gt; release candidate 1 cut
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; Mid May 2017      &lt;/td&gt;&lt;td&gt; release candidate 2 cut
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; Early July 2017   &lt;/td&gt;&lt;td&gt; release candidate 3 cut
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; Late July 2017    &lt;/td&gt;&lt;td&gt; final release cut
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2 id="Unexpectedset-backs"&gt;Unexpected set-backs&lt;/h2&gt;
&lt;p&gt;
This timeline was a bit more extended than desired for a few
reasons.
&lt;/p&gt;
&lt;p&gt;
The first issues were &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13426" title="#13426: bug: compile-time memory-usage regression for DynFlags between GHC 8.0 and ... (new)"&gt;#13426&lt;/a&gt; and &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13535" title="#13535: bug: vector test suite uses excessive memory on GHC 8.2 (new)"&gt;#13535&lt;/a&gt;, compile-time performance regressions which
came to light shortly after the branch and after the first release
candidate, respectively. In &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13535" title="#13535: bug: vector test suite uses excessive memory on GHC 8.2 (new)"&gt;#13535&lt;/a&gt; it was observed that the testsuite of
the &lt;code&gt;vector&lt;/code&gt; package (already
&lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/ticket/10800"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;known&lt;/a&gt; for its
propensity to reveal compiler regressions) increased by nearly a factor
of five in compile-time allocations over 8.0.2.
&lt;/p&gt;
&lt;p&gt;
While a performance regression would rarely classify as a release
blocker, both the severity of the regressions combined with the fact that
8.2 was intended to be a performance-oriented release made releasing
before fixes were available quite unappealing. For this reason David
Feuer, Reid Barton, and I invested significant effort to try to track down the
culprits. Unfortunately, the timescale on which this sort of bug is
resolved span days, stretching to weeks when time is split with other
responsibilities. While Reid's valiant efforts lead to the resolution of
&lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13426" title="#13426: bug: compile-time memory-usage regression for DynFlags between GHC 8.0 and ... (new)"&gt;#13426&lt;/a&gt;, we were eventually forced to set &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13535" title="#13535: bug: vector test suite uses excessive memory on GHC 8.2 (new)"&gt;#13535&lt;/a&gt; aside as the release
cycle wore on.
&lt;/p&gt;
&lt;p&gt;
The second setback came in the form of two quite grave correctness
issues (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13615" title="#13615: bug: Nondeterminism in ‘pure’ function w/ parallel evaluation &amp;amp; memo combinators (closed: fixed)"&gt;#13615&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13916" title="#13916: bug: Optimizations create run time seg faults (closed: fixed)"&gt;#13916&lt;/a&gt;) late in the cycle. GHC being a compiler, we take
correctness very seriously: Users' confidence that GHC will
compile their programs faithfully is crucial for language adoption, yet
also very easily shaken. Consequently, while neither of these issues
were regressions from 8.0, we deemed it important to hold the 8.2
release until these issues were resolved (which ended up being significant efforts in their own right; a blog post on this will be coming soon).
&lt;/p&gt;
&lt;p&gt;
Finally, there was the realization (&lt;a class="infoneeded ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13739" title="#13739: bug: very slow linking of executables with ld.bfd &amp;lt; 2.27 (infoneeded)"&gt;#13739&lt;/a&gt;) after release candidate 2
that some BFD linker releases suffered from very poor performance when
linking with split-sections enabled (the default behavior in 8.2.1).
This served as a forcing function to act on &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13541" title="#13541: feature request: Make it easier to use the gold linker (closed: fixed)"&gt;#13541&lt;/a&gt;, which we originally
planned for 8.4. As expected, it took quite some time to follow through
on this in a way that satisfied users and distribution packagers in a
portable manner.
&lt;/p&gt;
&lt;h2 id="Movingforward:Compressingthereleaseschedule"&gt;Moving forward: Compressing the release schedule&lt;/h2&gt;
&lt;p&gt;
Collectively the above issues set the release back by perhaps six or
eight weeks in total, including the additional release candidate
necessary to validate the raft of resulting patches. While set-backs due
to long-standing bugs are hard to avoid, there are a few areas where we
can do better,
&lt;/p&gt;
&lt;ol class="loweralpha"&gt;&lt;li&gt;automate the production of release artifacts
&lt;/li&gt;&lt;li&gt;regularly test GHC against user packages in between releases
&lt;/li&gt;&lt;li&gt;expand continuous integration of GHC to less common platforms to
ensure that compatibility problems are caught before the release
candidate stage
&lt;/li&gt;&lt;li&gt;regularly synchronize with core library maintainers between releases
to reduce need for version bound bumps at release time
&lt;/li&gt;&lt;li&gt;putting in place tools to ease bisection, which is frequently a
useful debugging strategy around release-time
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
As it turns out, nearly all of these are helped by our on-going effort
to move GHC's CI infrastructure to Jenkins (see &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13716" title="#13716: task: Move CI to Jenkins (closed: wontfix)"&gt;#13716&lt;/a&gt;). As this is a
rather deep topic in its own right, I'll leave this more technical
discussion for a second post (&lt;a href="http://ghc.haskell.org/trac/ghc/blog/jenkins-ci"&gt;blog:jenkins-ci&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
With the above tooling and process improvements, I think it would be
feasible to get the GHC release cycle down to six months or shorter if
we so desired. Of course, shorter isn't necessarily better: we need to
be careful to balance the desire for a short release cycle against the
need for an adequate post-release "percolation" time. This time is crucial to allow the community
to adopt the new release, discover and fix its regressions. In fact, the
predictability that a short release schedule (hopefully) affords is
arguably more important than the high cadence itself.
&lt;/p&gt;
&lt;p&gt;
Consequently, we are considering tightening up the release schedule for
future GHC releases in a slow and measured manner. Given that we are now
well into the summer, I think positioning the 8.4 release around
February 2018, around seven months from now, would be a sensible
timeline. However, we would like to hear your opinions.
&lt;/p&gt;
&lt;p&gt;
Here are some things to think about,
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Do you feel that it takes too long for GHC features to make it to users' hands?
&lt;/li&gt;&lt;li&gt;How many times per year do you envision upgrading your compiler
before the process becomes too onerous? Would the current load of interface changes per release be acceptable under a faster release cadence?
&lt;/li&gt;&lt;li&gt;Should we adjust the
&lt;a class="ext-link" href="https://prime.haskell.org/wiki/Libraries/3-Release-Policy"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;three-release policy&lt;/a&gt;
to counteract a shorter GHC release cycle?
&lt;/li&gt;&lt;li&gt;Would you feel more likely to contribute to GHC if your work were more quickly available in a release?
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
We would love to hear your thoughts. Be sure to mention whether you are a user, GHC contributor, or both.
&lt;/p&gt;
</description>
      <category>release</category>
      <category>schedule</category>
    </item>
    <item>
      <title>GHC 8.2.1 is available</title>
      <dc:creator>Ben Gamari</dc:creator>
      <pubDate>Sun, 23 Jul 2017 13:48:40 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/ghc-8.2.11-released</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/ghc-8.2.11-released</guid>
      <description>&lt;h1 id="TheGlasgowHaskellCompiler--version8.2.1"&gt;The Glasgow Haskell Compiler -- version 8.2.1&lt;/h1&gt;
&lt;p&gt;
The GHC developers are very happy to announce the long-awaited 8.2.1
release of Glasgow Haskell Compiler. Binary and source distributions can
be found at &amp;lt;&lt;a class="ext-link" href="https://downloads.haskell.org/~ghc/8.2.1/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://downloads.haskell.org/~ghc/8.2.1/&lt;/a&gt;&amp;gt;.
&lt;/p&gt;
&lt;p&gt;
This is the second release in the 8.0 series. As such, the focus of this
release is performance, stability, and consolidation. Consequently
numerous cleanups can be seen throughout the compiler including,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Significant improvements in compiler performance
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;More robust support for levity polymorphism
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Reliable DWARF debugging information
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Improved runtime system performance on NUMA systems
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Retooling of the cost-center profiler, including support for live
streaming of profile data via the GHC event log
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Interface file determinism
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;More robust treatment of join points, enabling significantly better
code generation in many cases
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Numerous improvements in robustness on Windows
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;and the resolution of over 500 other tickets
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
In addition, there are a number of new features,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A new, more type-safe type reflection mechanism
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The long-awaited Backpack module system
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Deriving strategies to disambiguate between GHC's various instance
deriving mechanisms
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Unboxed sum types, for efficient unpacked representation of sum data
types
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Compact regions, allowing better control over garbage collection
in the presence of large heaps containing many long-lived objects.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Colorful messages and caret diagnostics for more legible errors
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
A more thorough list of the changes in this release can be found in the
[[&lt;a class="ext-link" href="https://haskell.org/ghc/docs/8.2.1/html/users_guide/8.2.1-notes.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://haskell.org/ghc/docs/8.2.1/html/users_guide/8.2.1-notes.html&lt;/a&gt;
|release notes]].
&lt;/p&gt;
&lt;p&gt;
There are a few changes in release-engineering that should be noted,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Binary distributions for 32-bit CentOS 6.7 have been dropped.
Moreover, there are no dedicated CentOS 7.0 distributions as CentOS 7
can use can use Debian 8 binaries. If you would like us to continue
to produce 32-bit CentOS 6.7 distributions please let us know.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;GHC HQ now builds FreeBSD and OpenBSD distributions for amd64; this
comes after many years of these distributions being faithfully
provided by Karel Gardas and Pali Gabor Janos, who we should heartily
thank for their contributions.
&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
GHC HQ building these distributions ourselves will allow us to more
quickly ship distributions to users by eliminating the need for a
long lag time between source release availability and having all
binary distributions available.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;There is a technology-preview of an AArch64 Linux binary
distribution, as well as an ARM Linux build. AArch64 support is quite
preliminary but should be stable in 8.4 thanks to further linker
fixes by Moritz Angerman. ARM should be stable.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;GHC now tries to use the gold and lld linkers by default. These
linkers are significantly faster than the BFD linker implementation
that most Linux distributions use by default. If gold or lld are not
available GHC will use the system's default linker. GHC can be forced
to use the default linker by passing --disable-ld-override to
configure.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
This release has been the result of over a year of hard work by over 150
code contributors. Thanks to everyone who has helped in writing patches,
testing, reporting bugs, and offering feedback over the last year.
&lt;/p&gt;
&lt;p&gt;
This release cycle was admittedly quite drawn out, significantly longer
than expected or desired. While we are confident that the result is
worth the wait, we have been steadily working on infrastructure which
should help shrink future release cycles and give us better testing
between releases. More details on this coming soon.
&lt;/p&gt;
&lt;p&gt;
As always, let us know if you encounter trouble.
&lt;/p&gt;
&lt;h3 id="Howtogetit"&gt;How to get it&lt;/h3&gt;
&lt;p&gt;
Both the source tarball and binary distributions for a wide variety of platforms are available &lt;a class="ext-link" href="https://downloads.haskell.org/~ghc/8.2.1/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id="Background"&gt;Background&lt;/h2&gt;
&lt;p&gt;
Haskell is a standard lazy functional programming language.
&lt;/p&gt;
&lt;p&gt;
GHC is a state-of-the-art programming suite for Haskell.  Included is
an optimising compiler generating efficient code for a variety of
platforms, together with an interactive system for convenient, quick
development.  The distribution includes space and time profiling
facilities, a large collection of libraries, and support for various
language extensions, including concurrency, exceptions, and foreign
language interfaces. GHC is distributed under a BSD-style open source license.
&lt;/p&gt;
&lt;p&gt;
A wide variety of Haskell related resources (tutorials, libraries,
specifications, documentation, compilers, interpreters, references,
contact information, links to research groups) are available from the
Haskell home page (see below).
&lt;/p&gt;
&lt;p&gt;
On-line GHC-related resources
&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;&lt;/del&gt;&lt;del&gt;
&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;
Relevant URLs on the World-Wide Web:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://www.haskell.org/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;GHC home page&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;GHC developers' home page&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://www.haskell.org/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Haskell home page&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="SupportedPlatforms"&gt;Supported Platforms&lt;/h2&gt;
&lt;p&gt;
The list of platforms we support, and the people responsible for them,
is &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Contributors"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;here&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Ports to other platforms are possible with varying degrees of
difficulty. The &lt;a class="ext-link" href="http://ghc.haskell.org/trac/ghc/wiki/Building"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Building Guide&lt;/a&gt; describes how to go about porting to a
new platform.
&lt;/p&gt;
&lt;h2 id="Developers"&gt;Developers&lt;/h2&gt;
&lt;p&gt;
We welcome new contributors.  Instructions on accessing our source
code repository, and getting started with hacking on GHC, are
available from the GHC's developer's site run by &lt;a class="ext-link" href="http://ghc.haskell.org/trac/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Trac&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id="CommunityResources"&gt;Community Resources&lt;/h2&gt;
&lt;p&gt;
There are mailing lists for GHC users, developers, and monitoring bug tracker
activity; to subscribe, use the Mailman
&lt;a class="ext-link" href="http://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;web interface&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There are several other Haskell and GHC-related mailing lists on
&lt;a class="ext-link" href="http://www.haskell.org"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;haskell.org&lt;/a&gt;; for the full list, see the
&lt;a class="ext-link" href="https://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;lists page&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Some GHC developers hang out on the &lt;code&gt;#ghc&lt;/code&gt; and &lt;code&gt;#haskell&lt;/code&gt; of the Freenode IRC
network, too. See the &lt;a class="ext-link" href="http://www.haskell.org/haskellwiki/IRC_channel"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Haskell wiki&lt;/a&gt; for details.
&lt;/p&gt;
&lt;p&gt;
Please report bugs using our bug tracking system. Instructions on reporting bugs
can be found &lt;a href="http://www.haskell.org/ghc/reportabug"&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>release</category>
    </item>
    <item>
      <title>GHC 8.0.2 is available!</title>
      <dc:creator>bgamari</dc:creator>
      <pubDate>Wed, 11 Jan 2017 18:40:35 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/ghc-8.0.2-released</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/ghc-8.0.2-released</guid>
      <description>&lt;p&gt;
The GHC team is happy to at last announce the 8.0.2 release of the
Glasgow Haskell Compiler. Source and binary distributions are available
at
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://downloads.haskell.org/~ghc/8.0.2/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://downloads.haskell.org/~ghc/8.0.2/&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is the second release of the 8.0 series and fixes nearly
two-hundred bugs. These include,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Interface file build determinism (&lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/4012" title="#4012: bug: Compilation results are not deterministic (new)"&gt;#4012&lt;/a&gt;).
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Compatibility with macOS Sierra and GCC compilers which compile
position-independent executables by default
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Compatibility with systems which use the gold linker
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Runtime linker fixes on Windows (see &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/12797" title="#12797: bug: Default Rules stop working when providing some constraints (closed: fixed)"&gt;#12797&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A compiler bug which resulted in undefined reference errors while
compiling some packages (see &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/12076" title="#12076: bug: &amp;#34;lazy&amp;#34; leads to undefined reference to `stg_ap_0_upd_info' (closed: fixed)"&gt;#12076&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A number of memory consistency bugs in the runtime system
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A number of efficiency issues in the threaded runtime which manifest
on larger core counts and large numbers of bound threads.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A typechecker bug which caused some programs using
-XDefaultSignatures to be incorrectly accepted.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;More than two-hundred other bugs. See &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/query?status=closed&amp;amp;milestone=8.0.2&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=type&amp;amp;col=priority&amp;amp;col=milestone&amp;amp;col=component&amp;amp;order=priority"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Trac&lt;/a&gt; for a complete
listing.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/12757" title="#12757: bug: Compiled program segfaults at -O1 (closed: fixed)"&gt;#12757&lt;/a&gt;, which lead to broken runtime behavior and even crashes in
the presence of primitive strings.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/12844" title="#12844: bug: No Skolem Info with PartialTypeSignatures (closed: fixed)"&gt;#12844&lt;/a&gt;, a type inference issue affecting partial type signatures.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A bump of the &lt;code&gt;directory&lt;/code&gt; library, fixing buggy path
canonicalization behavior (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/12894" title="#12894: bug: Bump directory (closed: fixed)"&gt;#12894&lt;/a&gt;). Unfortunately this required a
major version bump in &lt;code&gt;directory&lt;/code&gt; and minor bumps in several other
libraries.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/12912" title="#12912: bug: IO library should not use select() (closed: fixed)"&gt;#12912&lt;/a&gt;, where use of the &lt;code&gt;select&lt;/code&gt; system call would lead to runtime
system failures with large numbers of open file handles.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10635" title="#10635: feature request: -fwarn-redundant-constraints should not be part of -Wall (closed: fixed)"&gt;#10635&lt;/a&gt;, wherein -Wredundant-constraints was included in the -Wall
warning set
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
A more detailed list of the changes included in this release can be
found in the &lt;a class="ext-link" href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/8.0.2-notes.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;release notes&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Please note that this release breaks with our usual tendency to avoid
major version bumps of core libraries in minor GHC releases by including
an upgrade of the &lt;code&gt;directory&lt;/code&gt; library to 1.3.0.0.
&lt;/p&gt;
&lt;p&gt;
Also note that, due to a rather serious bug (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/13100" title="#13100: bug: Instability in 8.0.2 on 32-bit Windows (closed: fixed)"&gt;#13100&lt;/a&gt;) affecting Windows
noticed late in the release cycle, the Windows binary distributions were
produced using a slightly &lt;a class="ext-link" href="http://downloads.haskell.org/~ghc/8.0.2/0001-SysTools-Revert-linker-flags-change.patch"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;patched&lt;/a&gt; source tree. Users compiling from
source for Windows should be certain to include this patch in their
build.
&lt;/p&gt;
&lt;p&gt;
This release is the result of six months of effort by the GHC
development community. We'd like to thank everyone who has contributed
code, bug reports, and feedback to this release. It's only due to
their efforts that GHC remains a vibrant and exciting project.
&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h2 id="Howtogetit"&gt;How to get it&lt;/h2&gt;
&lt;p&gt;
Both the source tarball and binary distributions for a wide variety of platforms
are available &lt;a href="http://www.haskell.org/ghc/"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id="Background"&gt;Background&lt;/h2&gt;
&lt;p&gt;
Haskell is a standardized lazy functional programming language.
&lt;/p&gt;
&lt;p&gt;
The Glasgow Haskell Compiler (GHC) is a state-of-the-art programming suite for
Haskell. Included is an optimising compiler generating efficient code for a
variety of platforms, together with an interactive system for convenient, quick
development. The distribution includes space and time profiling facilities, a
large collection of libraries, and support for various language extensions,
including concurrency, exceptions, and foreign language interfaces. GHC is
distributed under a BSD-style open source license.
&lt;/p&gt;
&lt;h2 id="SupportedPlatforms"&gt;Supported Platforms&lt;/h2&gt;
&lt;p&gt;
The list of platforms we support, and the people responsible for them, can be
found on the &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Platforms"&gt;GHC wiki&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Ports to other platforms are possible with varying degrees of difficulty. The
&lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Building"&gt;Building Guide&lt;/a&gt; describes how to go about porting to a new platform.
&lt;/p&gt;
&lt;h2 id="Developers"&gt;Developers&lt;/h2&gt;
&lt;p&gt;
We welcome new contributors. Instructions on getting started with hacking on GHC
are available from GHC's &lt;a class="ext-link" href="http://ghc.haskell.org/trac/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;developer site&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id="CommunityResources"&gt;Community Resources&lt;/h2&gt;
&lt;p&gt;
There are mailing lists for GHC users, develpoers, and monitoring bug tracker
activity; to subscribe, use the Mailman
&lt;a class="ext-link" href="http://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;web interface&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There are several other Haskell and GHC-related mailing lists on
&lt;a class="ext-link" href="http://www.haskell.org"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;haskell.org&lt;/a&gt;; for the full list, see the
&lt;a class="ext-link" href="https://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;lists page&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Some GHC developers hang out on the &lt;code&gt;#ghc&lt;/code&gt; and &lt;code&gt;#haskell&lt;/code&gt; of the Freenode IRC
network, too. See the &lt;a class="ext-link" href="http://www.haskell.org/haskellwiki/IRC_channel"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Haskell wiki&lt;/a&gt; for details.
&lt;/p&gt;
&lt;p&gt;
Please report bugs using our bug tracking system. Instructions on reporting bugs
can be found &lt;a href="http://www.haskell.org/ghc/reportabug"&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>release</category>
    </item>
    <item>
      <title>Call for Nominations: GHC Steering Committee</title>
      <dc:creator>bgamari</dc:creator>
      <pubDate>Mon, 05 Sep 2016 18:56:39 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/steering-committee-cfn</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/steering-committee-cfn</guid>
      <description>&lt;p&gt;
Hello everyone,
&lt;/p&gt;
&lt;p&gt;
As you likely know, over the last few months we have been discussing
options for reforming the process for proposing language and
compiler changes to GHC. After much discussion, we have a &lt;a class="ext-link" href="http://github.com/ghc-proposals/ghc-proposals"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;process&lt;/a&gt;
which, while not perfect, is acceptable to a majority of our contributor
base and will be an improvement over the status quo. While we invite
suggestions for future improvements, we are at a point where we can move
ahead with implementation.
&lt;/p&gt;
&lt;p&gt;
Consequently, we are seeking nominations for the initial GHC steering
committee. This body is responsible for overseeing the progression of
proposals through the process, working with authors on refining their
ideas, and evaluating proposals for acceptance. The committee will
consist of five to eight members of diverse backgrounds.
&lt;/p&gt;
&lt;p&gt;
We would like to offer the following as a criteria for membership. Note
that a candidate is not expected to satisfy all or even most of these
criteria, but a good candidate should satisfy at least one:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A history of contributions to the design of new language features
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Experience developing Haskell libraries and applications
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A demonstrated track record of contributing code to GHC
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A pedagogical background, with experience in either teaching or
authoring educational materials
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Experience in compiler development
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Knowledge of functional programming language theory
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
I would like to emphasize that committee membership is as much a duty as it
is a privilege. Membership is not intended to be a platform to be used
by members to drive their own ideas; rather it is a way of serving the
Haskell community by helping other community members refine and advance
their proposals. This, of course, requires an investment of
time and effort, which you should be willing and able to consistently
put forth.
&lt;/p&gt;
&lt;p&gt;
If you would like to be considered for committee membership then please
write a statement describing why you feel you are well-qualified to
serve, in terms of the criteria above and any others that you would like
to offer. Please send your statements to ben at well-typed.com by September
30th. The initial committee selection will be made by the Simons soon
thereafter.
&lt;/p&gt;
&lt;p&gt;
Thanks to everyone for their feedback and cooperation so far!
&lt;/p&gt;
&lt;p&gt;
Cheers,
&lt;/p&gt;
&lt;p&gt;
~ Ben
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Rethinking GHC's approach to managing proposals</title>
      <dc:creator>bgamari</dc:creator>
      <pubDate>Sat, 09 Jul 2016 20:41:08 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/rethinking-proposals</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/rethinking-proposals</guid>
      <description>&lt;p&gt;
Recently there has been a &lt;a class="ext-link" href="https://www.reddit.com/r/haskell/comments/4oyxo2/blog_contributing_to_ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;fair bit&lt;/a&gt; of &lt;a class="ext-link" href="https://www.reddit.com/r/haskell/comments/4isua9/ghc_development_outsidein/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;discussion&lt;/a&gt; around the
mechanisms by which proposed changes to GHC are evaluated. While we have
something of a formal proposal &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/WorkingConventions/AddingFeatures"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;protocol&lt;/a&gt;, it is not clearly
documented, inconsistently applied, and may be failing to serve a
significant fraction of GHC's potential contributor pool.
&lt;/p&gt;
&lt;p&gt;
Over the last few weeks, I have been doing a fair amount of reading,
thinking, and discussing to try to piece together a proposal scheme
which better serves our community.
&lt;/p&gt;
&lt;p&gt;
The &lt;a class="ext-link" href="https://github.com/ghc-proposals/ghc-proposals/pull/1/files?short_path=14d66cd#diff-14d66cda32248456a5f223b6333c6132"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;resulting proposal&lt;/a&gt; is strongly inspired by the &lt;a class="ext-link" href="https://github.com/rust-lang/rfcs"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;RFC process&lt;/a&gt; in
place in the Rust community, the leaders of which have thought quite
hard about fostering community growth and participation. While no
process is perfect, I feel like the Rust process is a good starting
point for discussion, offering enough structure to guide new
contributors through the process while requiring only a modest
investment of developer time.
&lt;/p&gt;
&lt;p&gt;
To get a sense for how well this will work in our community, I propose
that we attempt to self-host the proposed process. To this end I have
setup a &lt;code&gt;ghc-proposals&lt;/code&gt; &lt;a class="ext-link" href="https://github.com/ghc-proposals/ghc-proposals"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;repository&lt;/a&gt; and opened a pull request for
discussion of the &lt;a class="ext-link" href="https://github.com/ghc-proposals/ghc-proposals/pull/1/files?short_path=14d66cd#diff-14d66cda32248456a5f223b6333c6132"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;process proposal&lt;/a&gt;.
Let's see how this goes.
&lt;/p&gt;
&lt;p&gt;
Cheers,
&lt;/p&gt;
&lt;p&gt;
~ Ben
&lt;/p&gt;
</description>
      <category>proposals</category>
    </item>
    <item>
      <title>Contributing to GHC</title>
      <dc:creator>simonpj</dc:creator>
      <pubDate>Mon, 20 Jun 2016 12:35:08 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/ContributingToGhc</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/ContributingToGhc</guid>
      <description>&lt;p&gt;
This post is a response to &lt;a class="ext-link" href="http://www.arcadianvisions.com/blog/2016/ghc-contributing.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Anthony's blog post&lt;/a&gt; about contributing to GHC, and the subsequent &lt;a class="ext-link" href="https://www.reddit.com/r/haskell/comments/4isua9/ghc_development_outsidein"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Reddit discussion&lt;/a&gt;. You'll find it easier to follow my comments below if you read Anthony's post first.  Short summary: many of Anthony's criticisms are accurate, but they are not easy to address, especially in a volunteer-only project.  However we will do something about the feature-request process.
&lt;/p&gt;
&lt;h2 id="Barriertoentry"&gt;Barrier to entry&lt;/h2&gt;
&lt;p&gt;
I am ashamed that GHC seems difficult to contribute to. The details don't matter; the fact that it made you feel that way is by definition bad. I'm really sorry.  We should find a way to do better.
&lt;/p&gt;
&lt;p&gt;
An underlying issue is one of effort budget. GHC has essentially no full-timers, unlike many open-source projects.  In particular, Simon Marlow and I are volunteers like everyone else, and like everyone else we have a day job.  Microsoft Research generously pays Well Typed for front-line support, manifested in the heroic form of Ben and Austin, totalling around one FTE.  But their effort is fully absorbed by managing releases, reviewing patches, maintaining the infrastructure, and so on.
&lt;/p&gt;
&lt;p&gt;
It's a real challenge to maintain a low barrier to entry for a large complex project, whose motive force is primarily volunteers.  It means that any initiative will only fly if someone steps up to drive it.
&lt;/p&gt;
&lt;h2 id="Technicaldocumentation"&gt;Technical documentation&lt;/h2&gt;
&lt;p&gt;
The questions of scattered and inconsistent documentation are difficult to address. GHC is twenty-five years old; it has hundreds of authors and documentation that was once accurate falls out of date. I would love it to have consistent, well-explained documentation. But I don't know how to achieve it.
&lt;/p&gt;
&lt;p&gt;
GHC's technical documentation is either in the code itself, or on GHC's wiki. An advantage of a wiki is that anyone can edit it. Yes, instructions and technical descriptions go out of date.  Who will fix them?  You, gentle reader!  There is no one else.
&lt;/p&gt;
&lt;p&gt;
But in practice few do. Perhaps that's because such work is invisible, so no one even knows you've done it? What would make people feel "I'd really like to improve those instructions or that documentation?"
&lt;/p&gt;
&lt;p&gt;
I will argue for two things. First, I find Notes incredibly helpful. They live with the code, so they are less likely to go out of date. They don't mess up the flow of the code. They can be referred to from multiple places. They are the single most successful code documentation mechanism we have. (To be fair to Anthony, I don't think was complaining about Notes, just expressing surprise.)
&lt;/p&gt;
&lt;p&gt;
Second, I really do think that each new proposed feature needs a description, somewhere, of what it is, why it's a good thing, and as precisely as possible what its specification is. Plus perhaps some implementation notes. It's very important when reading an implementation to know what it is that the code is seeking to implement. So yes, I do frequently ask for a specification.
&lt;/p&gt;
&lt;h2 id="Arcgithubphabricatoretc"&gt;Arc, github, phabricator, etc&lt;/h2&gt;
&lt;p&gt;
Personally I carry no torch for &lt;code&gt;arc&lt;/code&gt;. I do whatever I'm told, workflow-wise. If GitHub has got a lot better since we took the Arc decision, and there's a consensus that we should shift, I'm all for it provided someone explains to me what my new workflows should be. I am absolutely in favour of reducing barriers to contribution.  (Other members of the &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/TeamGHC"&gt;GHC team&lt;/a&gt; have much stronger and better informed views than me, though.)
&lt;/p&gt;
&lt;p&gt;
But there &lt;em&gt;are&lt;/em&gt; costs to moving, especially if the move implies friction in the future. In particular, those that worry me most are those surrounding issue tracking. Github's issue tracker simply doesn't seem sufficient for a project as large and multi-faceted as GHC; in particular, tags as the only form of metadata is extremely limiting.
&lt;/p&gt;
&lt;p&gt;
One alternative would be to use Github and Trac side-by-side, but then we face the issue of conflicting ticket number spaces as both systems insist on ticket numbers of the form #NNNN.
&lt;/p&gt;
&lt;h2 id="Codingstyle"&gt;Coding style&lt;/h2&gt;
&lt;p&gt;
Coding style is rather a personal thing, and we have been reluctant to enforce a single uniform style. (Quite apart from the task of reformatting 150k lines of Haskell.) Personally I don't find it an obstacle to reading other people's code.
&lt;/p&gt;
&lt;h2 id="Featurerequests"&gt;Feature requests&lt;/h2&gt;
&lt;p&gt;
That leaves the most substantial issue that Anthony poses: the process of making a contribution.
&lt;/p&gt;
&lt;p&gt;
For fixing a bug, I think that (aside from the &lt;code&gt;arc&lt;/code&gt;/Github debate) things are not too bad.  On the arc/Github question, Austin has been working with the Phabricator maintainers to try to have them introduce a workflow which might be more familiar and more convenient for Github experts.
&lt;/p&gt;
&lt;p&gt;
But for offering a new feature, Anthony argues that the process is unacceptably arduous. There are lots of things to think about
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;GHC has tons of features implemented by talented and motivated folk... who have since moved on.  So when a new feature is proposed, my baseline guess is that I will personally be responsible for maintaining it in five years time.  So I want to understand what the feature is.  I want to understand how the implementation works.  I want to be reasonably sure that it doesn't add a bunch of complexity to an already very complicated code base.  And since &lt;em&gt;any&lt;/em&gt; new feature adds some complexity, I want to have some confidence that the feature commands broad support -- even when it's behind a language extension flag.
&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;
&lt;p&gt;
So actually I think it's reasonable that the process should be somewhat arduous.  A new feature imposes costs on every single person who works on that code in the future.  We don't really make this point explicitly, but the &lt;a class="ext-link" href="https://secure.phabricator.com/book/phabcontrib/article/contributing_code/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;contributor guidelines for Phabricator&lt;/a&gt; do.  It might be helpful if we articulated similar guidelines.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;"Any proposal needs a lightweight way to gauge broad support, then a period of constructive refinement".  Indeed!  What would be such a lightweight way?  The trouble is that there is an enormous silent majority, and discussions are typically driven by a handful of articulate and well-informed contributors.  All credit to them, but they may very well be an unrepresentative sample.  I simply don't know how to gauge true broad support.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;There is a problem with my own personal lack of bandwidth.  I am one of the main gatekeepers for some big chunks of GHC, the renamer, typechecker and optimisation passes.  That is good in a way, because if GHC lacked gatekeepers, it would soon lose conceptual integrity and become a huge ball of mud. But it is bad in other ways.  I review a lot of code; but not fast enough! In prioritising I am guided by my (doubtless flawed) perceptions of things that lots of people are eagerly awaiting.  The same thing goes for Simon Marlow, especially in the runtime system. We both have other day jobs.  Even writing this post means that I'm not reviewing someone's code.
&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;
&lt;p&gt;
But I am acutely aware that "Simon and Simon are busy" is pretty cold comfort to someone awaiting a review.  Maybe there should be a bunch of other people playing this role.  That would be great.  For example, Richard Eisenberg has taken responsibility for Template Haskell, which is totally fantastic.  I would love to hear from people who are willing to take overall responsibility for a piece of GHC.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
None of this is an argument for the status quo.  Simon, Ben, Austin, Herbert, and I have been talking about a rather more systematic process for new features. We'd like to learn from experience elsewhere, rather than reinvent the wheel, such as the &lt;a class="ext-link" href="https://github.com/rust-lang/rfcs#before-creating-an-rfc"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Rust process&lt;/a&gt;. Please suggest processes that you have seen working well elsewhere.
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>GHC 8.0.1 is available!</title>
      <dc:creator>bgamari</dc:creator>
      <pubDate>Sat, 21 May 2016 13:24:13 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/ghc-8.0.1-released</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/ghc-8.0.1-released</guid>
      <description>&lt;p&gt;
The GHC developers are very pleased to announce the release of the first
new super-major version of our Haskell compiler in six years, GHC 8.0.1.
This release features dozens of exciting developments including,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A more refined interface for implicit call-stacks, allowing libraries to
provide more helpful runtime error messages to users
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The introduction of the &lt;code&gt;DuplicateRecordFields&lt;/code&gt; language
extension, allowing multiple datatypes to declare fields of the same name
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Significant improvements in error message readability and content, including
facilities for libraries to provide custom error messages, more aggressive
warnings for fragile rewrite rules, and more helpful errors for missing
imports
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A rewritten and substantially more thorough pattern match checker, providing
more precise exhaustiveness checking in GADT pattern matches
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;More reliable debugging information including experimental backtrace support,
allowing better integration with traditional debugging tools
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Support for desugaring do-notation to use &lt;code&gt;Applicative&lt;/code&gt; combinators, allowing
the intuitive do notation to be used in settings which previously required
the direct use of Applicative combinators
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The introduction of &lt;code&gt;Strict&lt;/code&gt; and &lt;code&gt;StrictData&lt;/code&gt; language extensions, allowing
modules to be compiled with strict-by-default evaluation of bindings
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Great improvements in portability, including more reliable linking on
Windows, a new PPC64 code generator, support for the AIX operating system,
unregisterised m68k support, and significant stabilization on ARM targets
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A greatly improved user's guide, with beautiful and modern PDF and HTML
output
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Introduction of type application syntax, reducing the need for proxies
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;More complete support for pattern synonyms, including record pattern synonyms
and the ability to export patterns "bundled" with a type, as you would a data
constructor
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Support for injective type families and recursive superclass relationships
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;An improved generics representation leveraging GHC's support for type-level
literals
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;TypeInType&lt;/code&gt; extension, which unifies types and kinds, allowing GHC to
reason about kind equality and enabling promotion of more constructs to the
type level
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;...and more!
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
A more thorough list of the changes included in this release can be found in the
&lt;a class="ext-link" href="https://downloads.haskell.org/~ghc/8.0.1/docs/html/users_guide/8.0.1-notes.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;release notes&lt;/a&gt;,
&lt;/p&gt;
&lt;p&gt;
As always, we have collected various points of interest for users of previous
GHC releases on the GHC 8.0 &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Migration/8.0"&gt;migration page&lt;/a&gt;,
Please let us know if you encounter anything missing or unclear on this page.
&lt;/p&gt;
&lt;p&gt;
This release is the culmination of nearly eighteen months of effort by over one
hundred contributors. We'd like to thank everyone who has contributed code, bug
reports, and feedback over the past year. It's only because of their efforts
that GHC continues to evolve.
&lt;/p&gt;
&lt;h2 id="Howtogetit"&gt;How to get it&lt;/h2&gt;
&lt;p&gt;
Both the source tarball and binary distributions for a wide variety of platforms
are available &lt;a href="http://www.haskell.org/ghc/"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id="Background"&gt;Background&lt;/h2&gt;
&lt;p&gt;
Haskell is a standardized lazy functional programming language.
&lt;/p&gt;
&lt;p&gt;
The Glasgow Haskell Compiler (GHC) is a state-of-the-art programming suite for
Haskell. Included is an optimising compiler generating efficient code for a
variety of platforms, together with an interactive system for convenient, quick
development. The distribution includes space and time profiling facilities, a
large collection of libraries, and support for various language extensions,
including concurrency, exceptions, and foreign language interfaces. GHC is
distributed under a BSD-style open source license.
&lt;/p&gt;
&lt;h2 id="SupportedPlatforms"&gt;Supported Platforms&lt;/h2&gt;
&lt;p&gt;
The list of platforms we support, and the people responsible for them, can be
found on the &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Platforms"&gt;GHC wiki&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Ports to other platforms are possible with varying degrees of difficulty. The
&lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Building"&gt;Building Guide&lt;/a&gt; describes how to go about porting to a new platform.
&lt;/p&gt;
&lt;h2 id="Developers"&gt;Developers&lt;/h2&gt;
&lt;p&gt;
We welcome new contributors. Instructions on getting started with hacking on GHC
are available from GHC's &lt;a class="ext-link" href="http://ghc.haskell.org/trac/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;developer site&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id="CommunityResources"&gt;Community Resources&lt;/h2&gt;
&lt;p&gt;
There are mailing lists for GHC users, develpoers, and monitoring bug tracker
activity; to subscribe, use the Mailman
&lt;a class="ext-link" href="http://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;web interface&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There are several other Haskell and GHC-related mailing lists on
&lt;a class="ext-link" href="http://www.haskell.org"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;haskell.org&lt;/a&gt;; for the full list, see the
&lt;a class="ext-link" href="https://mail.haskell.org/cgi-bin/mailman/listinfo"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;lists page&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Some GHC developers hang out on the &lt;code&gt;#ghc&lt;/code&gt; and &lt;code&gt;#haskell&lt;/code&gt; of the Freenode IRC
network, too. See the &lt;a class="ext-link" href="http://www.haskell.org/haskellwiki/IRC_channel"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Haskell wiki&lt;/a&gt; for details.
&lt;/p&gt;
&lt;p&gt;
Please report bugs using our bug tracking system. Instructions on reporting bugs
can be found &lt;a href="http://www.haskell.org/ghc/reportabug"&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>release</category>
    </item>
    <item>
      <title>GHC Weekly News - 2015/10/16</title>
      <dc:creator>thoughtpolice</dc:creator>
      <pubDate>Sat, 17 Oct 2015 02:31:41 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20151016</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20151016</guid>
      <description>&lt;p&gt;
Hi *,
&lt;/p&gt;
&lt;p&gt;
Welcome for the latest entry in the GHC Weekly News, which has been somewhat irregularly scheduled - but we're as busy as ever!
&lt;/p&gt;
&lt;h2 id="a8.0.1releaseroadmap"&gt;8.0.1 release roadmap&lt;/h2&gt;
&lt;p&gt;
We're still steaming ahead on GHC 8.0.1 - any interested participants are suggested to look at the &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Status/GHC-8.0.1"&gt;wiki:Status/GHC-8.0.1&lt;/a&gt; page, to see where we're currently at.
&lt;/p&gt;
&lt;p&gt;
These past few weeks have been good: we've gotten the first part of the overloaded record fields work in, and we have plans to land the kind equalities work in November. Furthermore, Simon Marlow, Peter Wortmann and Ben are working on reviewing all of the DWARF improvements, and hopefully the start of this work will land next week.
&lt;/p&gt;
&lt;p&gt;
But 8.0 isn't the only thing that'll be getting released...
&lt;/p&gt;
&lt;h2 id="Andsomeotherminorreleases"&gt;And some other minor releases&lt;/h2&gt;
&lt;p&gt;
In a total, unprecedented upset - we're aiming to do &lt;em&gt;three&lt;/em&gt; GHC releases in a fairly short amount of time.
&lt;/p&gt;
&lt;h3 id="a7.10.3"&gt;7.10.3&lt;/h3&gt;
&lt;p&gt;
Ben Gamari has been working on steadily hacking away at GHC 7.10.3, and the hopes are that we'll be able to ship it soon. This will fix several dozen bugs, some of which are critical for our users.
&lt;/p&gt;
&lt;p&gt;
You can keep up to date by following the &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Status/GHC-7.10.3"&gt;wiki:Status/GHC-7.10.3&lt;/a&gt; page.
&lt;/p&gt;
&lt;h3 id="a7.8.5"&gt;7.8.5&lt;/h3&gt;
&lt;p&gt;
Simultaneously, your author will &lt;em&gt;also&lt;/em&gt; be working on a GHC 7.8.5 release. While we were alerted a few months ago to this breakage, it seems rather unfortunate for the 7.8 series to remain broken on such a popular OS.
&lt;/p&gt;
&lt;p&gt;
Furthermore, the "Three GHC Release Policy" for many authors - to support the last three major versions of GHC - would mean that 7.8 would be broken for OS X developers for an &lt;em&gt;entire year until GHC 8.2.1&lt;/em&gt;. Which is a pretty unfortunate circumstance.
&lt;/p&gt;
&lt;p&gt;
It's not expected the 7.8.5 release will contain any other fixes, however.
&lt;/p&gt;
&lt;h2 id="Listchatter"&gt;List chatter&lt;/h2&gt;
&lt;p&gt;
(Over the past two weeks)
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ben Gamari wrote in about &lt;strong&gt;switching the users guide to reStructuredText&lt;/strong&gt;, and the TL;DR is - it's done! We'll have a beautiful new users guide for GHC 8.0.1 &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-October/010029.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-October/010029.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Matthew Pickering comments about the state of pattern synonym signatures, remarking that they're currently confusing, noting down some things we could possibly fix. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-October/010024.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-October/010024.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Ben Gamari talked about the status of the recent DWARF work, and so far it's looking good. The needed patches are still in the review pipeline, but the hope is that they'll all be done in time for 8.0.1. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-October/010039.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-October/010039.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;David A Roberts wrote in to ask a question: now that we have &lt;code&gt;ApplicativeDo&lt;/code&gt;, what about &lt;code&gt;Applicative&lt;/code&gt; comprehensions? The responses indicate this seems like it would be a great addition. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-October/010062.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-October/010062.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Richard Eisenberg sent in a status update about his work on kind equalities, and the hope is it will land shortly in November! (Your editor then hassled him for a syntax change before landing.) &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-October/010077.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-October/010077.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Adam Foltzer has requested another release of the GHC 7.8 series, due to it being completely broken on OS X El Capitan. Expect more news on this soon. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-October/010078.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-October/010078.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Erik de Castro Lopo has recently been working with LLVM, and decided to publish his automation so interested GHC hackers could keep up to date and try new LLVMs easily. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-October/010086.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-October/010086.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Noteworthycommits"&gt;Noteworthy commits&lt;/h2&gt;
&lt;p&gt;
(Over the past two weeks)
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/4fd6207ec6960c429e6a1bcbe0282f625010f52a/ghc" title="Move user's guide to ReStructuredText"&gt;4fd6207ec6960c429e6a1bcbe0282f625010f52a&lt;/a&gt; - Move the users guide to reStructured Text.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/6cde981a8788b225819be28659caddc35b77972d/ghc" title="Make GHC generics capable of handling unboxed types
This adds a data ..."&gt;6cde981a8788b225819be28659caddc35b77972d&lt;/a&gt; - Make &lt;code&gt;GHC.Generics&lt;/code&gt; capable of handling unboxed tuples.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/0eb8fcd94b29ee9997b386e64203037bdf2aaa04/ghc" title="Enable `Enumeration is empty` warnings for `Integer`
This warning was ..."&gt;0eb8fcd94b29ee9997b386e64203037bdf2aaa04&lt;/a&gt; - Enable &lt;code&gt;Enumeration is empty&lt;/code&gt; warnings for &lt;code&gt;Integer&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/620fc6f909cd6e51b5613454097ec1c9f323839a/ghc" title="Make Windows linker more robust to unknown sections
The Windows ..."&gt;620fc6f909cd6e51b5613454097ec1c9f323839a&lt;/a&gt; - Make Windows linker more robust to unknown sections
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/5d841108acef950fed6a5e608ac9b18e7431aa87/ghc" title="Add short library names support to Windows linker
Make Linker.hs try ..."&gt;5d841108acef950fed6a5e608ac9b18e7431aa87&lt;/a&gt; - Add short library names support to the Windows linker
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/f8fbf385b879fe177409a25cc9499275ea3dc45d/ghc" title="Reinstate monomorphism-restriction warnings
This patch is driven by ..."&gt;f8fbf385b879fe177409a25cc9499275ea3dc45d&lt;/a&gt; - Reinstate monomorphism-restriction warnings
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/dcc342870b4d8a739ccbed3ae26e84dcc3579914/ghc" title="Don't inline/apply other rules when simplifying a rule RHS.
HERMIT ..."&gt;dcc342870b4d8a739ccbed3ae26e84dcc3579914&lt;/a&gt; - Don't inline/apply other rules when simplifying a rule RHS.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/dec5cd4085488686b5ed50bb26ccbc0ba7b645ec/ghc" title="base: Add forkOSWithUnmask
Fixes #8010, according to the specified ..."&gt;dec5cd4085488686b5ed50bb26ccbc0ba7b645ec&lt;/a&gt; - base: Add &lt;code&gt;forkOSWithUnmask&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/e8c8173923302268ef950c3b21e276779e45ac83/ghc" title="Allow arr ∧ (first ∨ (***)) as minimal definition of Arrow instance ..."&gt;e8c8173923302268ef950c3b21e276779e45ac83&lt;/a&gt; - Allow arr ∧ (first ∨ (&lt;strong&gt;*)) as minimal definition of Arrow instance
&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/29310b622801733e1b29a9a61988406872db13ca/ghc" title="Switch to LLVM version 3.7
Before this commit, GHC only supported ..."&gt;29310b622801733e1b29a9a61988406872db13ca&lt;/a&gt; - Switch to LLVM version 3.7
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/04e8366608fee4f5e3358acc855bc6f556c3f508/ghc" title="ELF/x86_64: map object file sections separately into the low 2GB
On ..."&gt;04e8366608fee4f5e3358acc855bc6f556c3f508&lt;/a&gt; - ELF/x86_64: map object file sections separately into the low 2GB
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/b1884b0e62f62e3c0859515c4137124ab0c9560e/ghc" title="Implement DuplicateRecordFields
This implements ..."&gt;b1884b0e62f62e3c0859515c4137124ab0c9560e&lt;/a&gt; - Implement &lt;code&gt;DuplicateRecordFields&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/75492e7467ff962f2f2e29e5c8b2c588c94ae8a7/ghc" title="Add typed holes support in Template Haskell.
Fixes #10267. Typed ..."&gt;75492e7467ff962f2f2e29e5c8b2c588c94ae8a7&lt;/a&gt; - Add typed holes support in Template Haskell.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/6a8ca65032c6b3ed61b5378765e70120083cf5da/ghc" title="Allow left ∨ (+++) as minimal definition of ArrowChoice instance
See ..."&gt;6a8ca65032c6b3ed61b5378765e70120083cf5da&lt;/a&gt; - Allow left ∨ (+++) as minimal definition of ArrowChoice instance
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Closedtickets"&gt;Closed tickets&lt;/h2&gt;
&lt;p&gt;
(Over the past two weeks)
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10392" title="#10392: bug: typo in Debug.Trace.traceShowM example (closed: fixed)"&gt;#10392&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/7883" title="#7883: task: enable GHC LLVM backend to use LLVM provided CAS / Atomicity primitives? (closed: fixed)"&gt;#7883&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10475" title="#10475: task: detabify User's Guide (closed: fixed)"&gt;#10475&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10745" title="#10745: bug: Error in fusion when compiling Data.Yaml (closed: fixed)"&gt;#10745&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10926" title="#10926: bug: wrong signature of atomic builtins (closed: fixed)"&gt;#10926&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9238" title="#9238: bug: Negative zero broken (closed: fixed)"&gt;#9238&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10700" title="#10700: bug: include/stg/Prim.h isn't C++ compatible (closed: fixed)"&gt;#10700&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10810" title="#10810: bug: Data constructor operators mis-printed in Template Haskell (closed: fixed)"&gt;#10810&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10342" title="#10342: task: Convert User Guide from DocBook to AsciiDoc (closed: fixed)"&gt;#10342&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/365" title="#365: bug: GHC dies silently with faulty preprocessor (closed: fixed)"&gt;#365&lt;/a&gt;(!), &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10361" title="#10361: bug: DeriveAnyClass does not fill in associated type defaults (closed: fixed)"&gt;#10361&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10929" title="#10929: bug: Enumeration-empty warning not firing for `[Integer]` (closed: fixed)"&gt;#10929&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10563" title="#10563: bug: GHC 7.10.1 Win7 x86_64 crash when building reflex-dom-0.1.1 (closed: fixed)"&gt;#10563&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9907" title="#9907: bug: &amp;#34;Unknown PEi386 section name `.text$printf'&amp;#34; error in GHCi on Windows (closed: fixed)"&gt;#9907&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10513" title="#10513: bug: ghc 7.6.3 Compiler panic with Generics (closed: wontfix)"&gt;#10513&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10868" title="#10868: feature request: Make GHC generics capable of handling unboxed types (closed: fixed)"&gt;#10868&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10932" title="#10932: feature request: Pattern synonyms and view pattern arguments (closed: duplicate)"&gt;#10932&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8920" title="#8920: feature request: Alternative GADT syntax (closed: wontfix)"&gt;#8920&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10516" title="#10516: bug: PolyKinds results in incorrect reporting of type synonym parameter count (closed: fixed)"&gt;#10516&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10416" title="#10416: bug: GHC 7.10.1 User Guide profiling section 5.4 missing images (closed: fixed)"&gt;#10416&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/5966" title="#5966: bug: getAppUserDataDirectory does not respect XDG specification (closed: fixed)"&gt;#5966&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8335" title="#8335: task: Create more specialized entries to GC (closed: fixed)"&gt;#8335&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10520" title="#10520: bug: RecordWildCards causes “is not a (visible) field of constructor” in ghci (closed: fixed)"&gt;#10520&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10687" title="#10687: bug: Clang 3.6 fails with -g due to .file directive order (closed: fixed)"&gt;#10687&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10571" title="#10571: bug: GHC 7.10.1 segfaults when shiftL-ing Integers by negative amounts (closed: fixed)"&gt;#10571&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9058" title="#9058: bug: System.IO.openTempFile does not scale (closed: fixed)"&gt;#9058&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10939" title="#10939: bug: Odditites regarding Any and typeclasses. (closed: fixed)"&gt;#10939&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10938" title="#10938: bug: DeriveAnyClass + deriving Bifunctor causes GHC panic (closed: duplicate)"&gt;#10938&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9590" title="#9590: bug: AMP breaks `haskell2010` package (closed: wontfix)"&gt;#9590&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10949" title="#10949: bug: Document typed Template Haskell (closed: invalid)"&gt;#10949&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10153" title="#10153: feature request: GHC mode for converting files to explicit layout (closed: fixed)"&gt;#10153&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10947" title="#10947: task: nofib-analyze should print per-benchmark-compile time totals (closed: duplicate)"&gt;#10947&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10948" title="#10948: bug: floatExpr tick break&amp;lt;26&amp;gt; (closed: duplicate)"&gt;#10948&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10936" title="#10936: bug: Can't fire up GHCi with Mueval (closed: fixed)"&gt;#10936&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/1883" title="#1883: bug: GHC can't find library using &amp;#34;short&amp;#34; name (closed: fixed)"&gt;#1883&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/5289" title="#5289: bug: Can't use ghci with a library linked against libstdc++ (closed: fixed)"&gt;#5289&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10733" title="#10733: feature request: Improving the error message for type variable ambiguity (closed: fixed)"&gt;#10733&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10950" title="#10950: bug: Sphinx &amp;#34;RecursionError: maximum recursion depth exceeded while ... (closed: fixed)"&gt;#10950&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10611" title="#10611: bug: Runtime crash while running psc (closed: worksforme)"&gt;#10611&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10959" title="#10959: bug: MINIMAL pragma and default implementations (closed: invalid)"&gt;#10959&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10960" title="#10960: bug: Closed type families don't reduce on data family instances (closed: duplicate)"&gt;#10960&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10831" title="#10831: bug: Document conditions on deriving Functor (closed: fixed)"&gt;#10831&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10796" title="#10796: bug: Illegal data constructor name: `fromList' ... When splicing a TH expression (closed: fixed)"&gt;#10796&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10890" title="#10890: bug: Incorrect redundant import warning for type classes (closed: fixed)"&gt;#10890&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8010" title="#8010: feature request: Add forkOSUnmasked (patch) (closed: fixed)"&gt;#8010&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10216" title="#10216: bug: Allow arr ∧ (first ∨ (***)) as minimal definition of Arrow instance (closed: fixed)"&gt;#10216&lt;/a&gt;, &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10965" title="#10965: bug: GHC Panic on import with 'OPTIONS_GHC -fobject-code -O' (new)"&gt;#10965&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10953" title="#10953: bug: Switch to LLVM 3.7 (closed: fixed)"&gt;#10953&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10964" title="#10964: bug: User's Guide build error on Debian Wheezy (closed: wontfix)"&gt;#10964&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10931" title="#10931: bug: layers-0.1 does not compile with ghc-7.10 (likely a regression from ... (closed: fixed)"&gt;#10931&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10714" title="#10714: bug: After implementing new installed package ID (hash of sdist), get rid ... (closed: fixed)"&gt;#10714&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10888" title="#10888: bug: ghci crashes (closed: duplicate)"&gt;#10888&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10633" title="#10633: bug: GHCi segfaults on arm (closed: duplicate)"&gt;#10633&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8652" title="#8652: bug: Cross-compiling broken for ARM/Linux target (closed: fixed)"&gt;#8652&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/3971" title="#3971: bug: FFI callback segfaults on PPC (closed: fixed)"&gt;#3971&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10882" title="#10882: bug: Fix target triple for Arm (closed: fixed)"&gt;#10882&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10977" title="#10977: bug: Arm: Undeclared indentifier when compiling rts/Linker.c (closed: fixed)"&gt;#10977&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10267" title="#10267: feature request: Add support for typed holes in Template Haskell (closed: fixed)"&gt;#10267&lt;/a&gt;, and &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10911" title="#10911: bug: Allow left ∨ (+++) as minimal definition of ArrowChoice instance (closed: fixed)"&gt;#10911&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>news</category>
      <category>ghc</category>
    </item>
    <item>
      <title>GHC Weekly News - 2015/09/17</title>
      <dc:creator>thoughtpolice</dc:creator>
      <pubDate>Thu, 17 Sep 2015 23:00:37 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20150917</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20150917</guid>
      <description>&lt;p&gt;
Hi *,
&lt;/p&gt;
&lt;p&gt;
Welcome for the latest entry in the GHC Weekly News. It's been a little while, but here we are!
&lt;/p&gt;
&lt;p&gt;
And your author has finally returned from his 8 week sabbatical, too! So without any futher ado, lets get going...
&lt;/p&gt;
&lt;h2 id="a8.0.1releaseroadmap"&gt;8.0.1 release roadmap&lt;/h2&gt;
&lt;p&gt;
So &lt;code&gt;HEAD&lt;/code&gt; has been steaming along pretty smoothly for the past few months now. After talking with Simon last week, we decided that the best course of action would be to release 8.0.1 (a super-major release) sometime around late February, which were the plans for 7.10 (modulo a few weeks due to the FTP debates). The current schedule is roughly:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;November: Fork the new &lt;code&gt;ghc-8.0&lt;/code&gt; STABLE branch
&lt;ul&gt;&lt;li&gt;At this point, &lt;code&gt;master&lt;/code&gt; development will probably slow as we fix bugs.
&lt;/li&gt;&lt;li&gt;This gives us 2 months or so until branch, from Today.
&lt;/li&gt;&lt;li&gt;This is nice as the branch is close to the first RC.
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;December: First release candidate
&lt;/li&gt;&lt;li&gt;Mid/late February: Final release.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
"&lt;strong&gt;Why call it 8.0.1?&lt;/strong&gt;", you ask? Because we have a lot of excellent features planned! I'm particularly partial to Richard's work for merging types and kinds (&lt;a class="ext-link" href="https://phabricator.haskell.org/D808" title="D808 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D808&lt;/a&gt;). But there's a lot of other stuff.
&lt;/p&gt;
&lt;p&gt;
For all the nitty gritty details, be sure to check &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Status/GHC-8.0.1"&gt;8.0.1 status page&lt;/a&gt; to keep track of everything - it will be our prime source of information and coordination. And be sure to &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009952.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;read my email to `ghc-devs`&lt;/a&gt; for more info.
&lt;/p&gt;
&lt;h3 id="a...anda7.10.3releaseperhaps"&gt;... and a 7.10.3 release perhaps?&lt;/h3&gt;
&lt;p&gt;
On top of this, we've been wondering if another release in the 7.10 branch should be done. Ben did the release shortly after I left, and for the most part looked pretty great. But there have been some snags, as usual.
&lt;/p&gt;
&lt;p&gt;
So we're asking: &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009953.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;who needs GHC 7.10.3?&lt;/a&gt; We'd really like to know of any major showstoppers you've found with 7.10 that are preventing you from using it. Especially if you're stuck or there's no clear workaround.
&lt;/p&gt;
&lt;p&gt;
Currently, we're still not 100% committed to this course of action (since the release will take time away from other things). However, we'll keep the polls open for a while - so &lt;em&gt;please&lt;/em&gt; get in touch with us if you need it! (Be sure to read my email for specific information.)
&lt;/p&gt;
&lt;h2 id="Listchatter"&gt;List chatter&lt;/h2&gt;
&lt;p&gt;
(Over the past two weeks)
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bartosz Nitka writes to &lt;code&gt;ghc-devs&lt;/code&gt; about the ongoing work to try and fix deterministic compilation in GHC (the dreaded ticket &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/4012" title="#4012: bug: Compilation results are not deterministic (new)"&gt;#4012&lt;/a&gt;). There's a very detailed breakdown of the current problems and issues in play, with responses from others - &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009964.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-September/009964.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Richard Eisenberg wants to know - how can I download all of &lt;code&gt;Hackage&lt;/code&gt; to play with it? GHC developers are surely interested in this, so they can find regressions quickly - &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009956.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-September/009956.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;I wrote to the list about the upcoming tentative 7.10.3 plans, as I mentioned above. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009953.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-September/009953.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;I &lt;em&gt;also&lt;/em&gt; wrote to the list about the tentative 8.0.1 plans, too. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009952.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-September/009952.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Johan Tibell asks about his ongoing work for implementing unboxed sum types - in particular, converting unboxed sum types in &lt;code&gt;StgCmm&lt;/code&gt;. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009926.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-September/009926.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Ryan Scott wrote a proposal for the automatic derivation of &lt;code&gt;Lift&lt;/code&gt; through GHC's deriving mechanism, specifically for &lt;code&gt;template-hasekll&lt;/code&gt; users. The response was positive and the code is going through review now (&lt;a class="ext-link" href="https://phabricator.haskell.org/D1168" title="D1168 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1168&lt;/a&gt;). &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009838.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-September/009838.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Andrew Gibiansky writes in with his own proposal for a new "Argument Do" syntax - a change which would allow &lt;code&gt;do&lt;/code&gt; to appear in positions without &lt;code&gt;($)&lt;/code&gt; or parenthesis, essentially changing the parser to insert parens as needed. The code is up at Phabricator for brave souls (&lt;a class="ext-link" href="https://phabricator.haskell.org/D1219" title="D1219 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1219&lt;/a&gt;). &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009821.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-September/009821.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Edward Yang started a monstrous thread after some discussions at ICFP about a future for &lt;em&gt;unlifted&lt;/em&gt; data types in GHC. These currently exist as special magic, but the proposals included would allow users to declare their own types as unlifted, and make unlifted values more flexible (allowing &lt;code&gt;newtype&lt;/code&gt; for example). See &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/UnliftedDataTypes"&gt;wiki:UnliftedDataTypes&lt;/a&gt; and Edward's thread for more. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-September/009799.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-September/009799.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Noteworthycommits"&gt;Noteworthy commits&lt;/h2&gt;
&lt;p&gt;
(Over the past several weeks)
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/374457809de343f409fbeea0a885877947a133a2/ghc" title="Injective type families
For details see #6018, Phab:D202 and the wiki ..."&gt;374457809de343f409fbeea0a885877947a133a2&lt;/a&gt; - &lt;strong&gt;Injective Type Families&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/8ecf6d8f7dfee9e5b1844cd196f83f00f3b6b879/ghc" title="ApplicativeDo transformation
Summary:
This is an implementation of ..."&gt;8ecf6d8f7dfee9e5b1844cd196f83f00f3b6b879&lt;/a&gt; - &lt;strong&gt;Applicative Do notation&lt;/strong&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/6740d70d95cb81cea3859ff847afc61ec439db4f/ghc" title="Use IP based CallStack in error and undefined
This patch modifies ..."&gt;6740d70d95cb81cea3859ff847afc61ec439db4f&lt;/a&gt; - Use IP-based CallStack in &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/43eb1dc52a4d3cbba9617f5a26177b8251d84b6a/ghc" title="Show minimal complete definitions in ghci (#10847)
Show the minimal ..."&gt;43eb1dc52a4d3cbba9617f5a26177b8251d84b6a&lt;/a&gt; - Show &lt;code&gt;MINIMAL&lt;/code&gt; complete definition in GHCi's &lt;code&gt;:info&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/296bc70b5ff6c853f2782e9ec5aa47a52110345e/ghc" title="Use a response file for linker command line arguments #10777
On ..."&gt;296bc70b5ff6c853f2782e9ec5aa47a52110345e&lt;/a&gt; - Use a response file for linker command line arguments
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/4356dacb4a2ae29dfbd7126b25b72d89bb9db1b0/ghc" title="Forbid annotations when Safe Haskell safe mode is enabled.
For now, ..."&gt;4356dacb4a2ae29dfbd7126b25b72d89bb9db1b0&lt;/a&gt; - Forbid annotations when Safe Haskell is enabled
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/7b211b4e5a38efca437d76ea442495370da7cc9a/ghc" title="Upgrade GCC to 5.2.0 for Windows x86 and x86_64
This patch does a few ..."&gt;7b211b4e5a38efca437d76ea442495370da7cc9a&lt;/a&gt; - Upgrade GCC/binutils to 5.2.0 release for Windows (i386/amd64)
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Closedtickets"&gt;Closed tickets&lt;/h2&gt;
&lt;p&gt;
(Over the past two weeks)
&lt;/p&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10834" title="#10834: bug: Test suite: Resistance against CallStack line number changes (closed: fixed)"&gt;#10834&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10830" title="#10830: bug: maximumBy has a space leak (closed: fixed)"&gt;#10830&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10047" title="#10047: bug: inconsistency in name binding between splice and quasiquotation (closed: fixed)"&gt;#10047&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9943" title="#9943: task: Replace &amp;#34;error&amp;#34; with &amp;#34;errorWithStackTrace&amp;#34; from GHC.Stack in base libs (closed: duplicate)"&gt;#9943&lt;/a&gt;, &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/1851" title="#1851: bug: &amp;#34;make install-strip&amp;#34; should work (new)"&gt;#1851&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/1477" title="#1477: feature request: ghci shouldn't link entire package (closed: wontfix)"&gt;#1477&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8229" title="#8229: bug: Linking in Windows is slow (closed: fixed)"&gt;#8229&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8926" title="#8926: bug: GHC makes unsound references in object code (closed: fixed)"&gt;#8926&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8614" title="#8614: bug: Duplicate symbol error when loading text twice (closed: fixed)"&gt;#8614&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10777" title="#10777: bug: Overlong linker arguments on Windows leads to broken builds with ... (closed: fixed)"&gt;#10777&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8596" title="#8596: feature request: Add support for &amp;#34;reponse files&amp;#34; to workaround Windows command line ... (closed: fixed)"&gt;#8596&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10788" title="#10788: bug: performance regression involving minimum (closed: fixed)"&gt;#10788&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9500" title="#9500: feature request: Allow GHC defaults to be modified with an environment variable (closed: fixed)"&gt;#9500&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9087" title="#9087: bug: Executables in the Linux binaries are not stripped (closed: fixed)"&gt;#9087&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10157" title="#10157: bug: HSCOLOUR_SRCS=YES fails mysteriously when no HsColour executable available (closed: fixed)"&gt;#10157&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10866" title="#10866: bug: Big discovered while installing stack. (closed: fixed)"&gt;#10866&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10806" title="#10806: bug: Type error and type level (&amp;lt;=) together cause GHC to hang (closed: fixed)"&gt;#10806&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10836" title="#10836: bug: Better error reporting for closed type families (closed: fixed)"&gt;#10836&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10849" title="#10849: bug: Injective type families broke debug build (closed: fixed)"&gt;#10849&lt;/a&gt;, &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10869" title="#10869: feature request: Option to dump preprocessed source (new)"&gt;#10869&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10682" title="#10682: bug: AArch64: dll-split: out of memory (requested 1099512676352 bytes) (closed: fixed)"&gt;#10682&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10863" title="#10863: bug: &amp;#34;hello world&amp;#34; produces illegal instruction error (closed: invalid)"&gt;#10863&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10880" title="#10880: bug: The 'impossible' happend (closed: duplicate)"&gt;#10880&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10883" title="#10883: bug: Error messages referring to arrow operators use wrong symbols when ... (closed: fixed)"&gt;#10883&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10787" title="#10787: bug: Incorrect code example for pattern synonyms (closed: fixed)"&gt;#10787&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8552" title="#8552: task: Rename StgArrWords to StgArrBytes (closed: fixed)"&gt;#8552&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10884" title="#10884: bug: Indentation requirements for parsing seem inconsistent (closed: invalid)"&gt;#10884&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/7305" title="#7305: bug: T5975a is broken on Windows (closed: worksforme)"&gt;#7305&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/5757" title="#5757: task: zero unexpected failures on all tier 1 platforms (closed: duplicate)"&gt;#5757&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9389" title="#9389: bug: Full Test Suite Failures (closed: fixed)"&gt;#9389&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8689" title="#8689: bug: confusing comment in compiler/main/SysTools.lhs (closed: fixed)"&gt;#8689&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10105" title="#10105: bug: ghc panic Simplifier ticks exhausted when trying UnfoldingDone x_alB (closed: duplicate)"&gt;#10105&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8168" title="#8168: bug: ghc &amp;#34;Simplifier ticks exhausted&amp;#34; &amp;#34;When trying UnfoldingDone&amp;#34; (closed: duplicate)"&gt;#8168&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9925" title="#9925: bug: ghc internal error while installing hakyll (closed: worksforme)"&gt;#9925&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10305" title="#10305: bug: Windows validate failures (closed: fixed)"&gt;#10305&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/4438" title="#4438: task: Rename and register the &amp;#34;PArr&amp;#34; language extension when it is judged to ... (closed: fixed)"&gt;#4438&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9710" title="#9710: task: Clean up Trac versions (closed: fixed)"&gt;#9710&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10889" title="#10889: bug: Compiled software can not read UTF-8 characters using readFile when ... (closed: invalid)"&gt;#10889&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10885" title="#10885: bug: Crashes on FFI calls to Visual Studio-built C library (closed: duplicate)"&gt;#10885&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10825" title="#10825: bug: Poor performance of optimized code. (closed: duplicate)"&gt;#10825&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10821" title="#10821: feature request: Add a flag to avoid generation of .hi, .o, .dyn_* files (closed: invalid)"&gt;#10821&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10790" title="#10790: bug: amd64/solaris 11: dll-split: out of memory (requested 1099512676352 bytes) (closed: fixed)"&gt;#10790&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10781" title="#10781: bug: Qualified use of undefined name starting with underscore considered a hole (closed: fixed)"&gt;#10781&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9855" title="#9855: bug: Harbormaster uses the wrong code sometimes (closed: fixed)"&gt;#9855&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9912" title="#9912: bug: Allow access to full logs in Harbormaster builds (closed: fixed)"&gt;#9912&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10033" title="#10033: bug: Can't push to `wip/...` branches because of pre-commit check (closed: worksforme)"&gt;#10033&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9782" title="#9782: bug: Do not by default set ekmett as owner for 'Core libraries' (closed: fixed)"&gt;#9782&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10035" title="#10035: feature request: Harbormaster doesn't post to Differential on success (closed: duplicate)"&gt;#10035&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9976" title="#9976: feature request: Ignore newlines in code diffs on Phab (closed: duplicate)"&gt;#9976&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10847" title="#10847: feature request: :info should print minimal definition (closed: fixed)"&gt;#10847&lt;/a&gt;, and &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10865" title="#10865: feature request: Poly-kinded Const (closed: duplicate)"&gt;#10865&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>news</category>
      <category>ghc</category>
    </item>
    <item>
      <title>GHC Weekly News - 2015/08/06</title>
      <dc:creator>bgamari</dc:creator>
      <pubDate>Tue, 25 Aug 2015 21:14:08 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20150806</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20150806</guid>
      <description>&lt;p&gt;
GHC Weekly News - 6 Aug 2015
&lt;/p&gt;
&lt;p&gt;
Hello *,
&lt;/p&gt;
&lt;p&gt;
Here is a rather belated Weekly News which I found sitting nearly done on my
work-queue. I hope this will make for a good read despite its age. The next
edition of the Weekly News will be posted soon.
&lt;/p&gt;
&lt;h2 id="Warningsformissedspecializationopportunities"&gt;Warnings for missed specialization opportunities&lt;/h2&gt;
&lt;p&gt;
Simon Peyton Jones recently
[&lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/a4261549afaee56b00fbea1b4bc1a07c95e60929/ghc" title="Warn about missed specialisations for imports
This change was ..."&gt;a4261549afaee56b00fbea1b4bc1a07c95e60929&lt;/a&gt; introduced] a warning in &lt;code&gt;master&lt;/code&gt; to
alert users when the compiler was unable to specialize an imported binding
despite it being marked as &lt;code&gt;INLINEABLE&lt;/code&gt;. This change was motivated by &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10720" title="#10720: bug: New GHC fails to specialize imported function (closed: invalid)"&gt;#10720&lt;/a&gt;,
where the reporter observed poor runtime performance despite taking care to
ensure his binding could be inlined. Up until now, ensuring that the compiler's
optimizations meet the user's expectation would require a careful look at the
produced Core. With this change the user is notified of exactly where the
compiler had to stop specializing, along with a helpful hint on where to add a
&lt;code&gt;INLINABLE&lt;/code&gt; pragma.
&lt;/p&gt;
&lt;h2 id="Ticky-Tickyprofiling"&gt;Ticky-Ticky profiling&lt;/h2&gt;
&lt;p&gt;
Recently I have been looking into breathing life back into GHC's &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Debugging/TickyTicky"&gt;ticky-ticky&lt;/a&gt;
profiling mechanism. When enabled, ticky-ticky maintains low-level counters of various runtime-system events. These include closure entries, updates, and allocations. While ticky doesn't provide nearly the detail that the cost-center profiler allows, it is invisible to the Core-to-Core optimization passes and has minimal runtime overhead (manifested as a bit more memory traffic due to counter updates). For this reason, the ticky-ticky profiler can be a useful tool for those working on the Core simplifier.
&lt;/p&gt;
&lt;p&gt;
Sadly, ticky-ticky has fallen into quite a state of disrepair in recent years as the runtime system and native code generator have evolved. As the beginning of an effort to resuscitate the ticky-ticky profiler I've started putting together a &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Debugging/TickyTicky#Ticky-Tickycounters"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;list&lt;/a&gt; of the counters currently implemented and whether they can be expected to do something useful. Evaluating the functionality of these counters is non-trivial, however, so this will be an on-going effort.
&lt;/p&gt;
&lt;p&gt;
One of our goals is to eventually do a systematic comparison of the heap allocation numbers produced by the ticky-ticky profiler, the cost-center profiler, and ticky-ticky. While this will help validate some of the more coarse-grained counters exposed by ticky, most of them will need a more thorough read-through of the runtime system to verify.
&lt;/p&gt;
&lt;h2 id="integer-gmpPerformance"&gt;&lt;code&gt;integer-gmp&lt;/code&gt; Performance&lt;/h2&gt;
&lt;p&gt;
Since the 7.10.2 release much of my effort has been devoted to characterizing the performance of various benchmarks over various GHC versions. This is part of an effort to find places where we have regressed in the past few versions. One product of this effort is a complete comparison of &lt;a class="ext-link" href="http://home.smart-cactus.org/~ben/nofib.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;results&lt;/a&gt; from our &lt;code&gt;nofib&lt;/code&gt; benchmark suite ranging from 7.4.2 to 7.10.1.
&lt;/p&gt;
&lt;p&gt;
The good news is there are essentially no disastrous regressions. Moreover, on the mean runtimes are over 10% faster than they were in 7.4.2. There are, however, a few cases which have regressed.  The runtime of the &lt;code&gt;integer&lt;/code&gt; test, for instance, has increased by 7%. Looking at the trend across versions, it becomes apparent that the regression began with 7.10.1.
&lt;/p&gt;
&lt;p&gt;
One of the improvements that was introduced with 7.10 was a rewrite of the &lt;code&gt;integer-gmp&lt;/code&gt; library, which this benchmark tests heavily. To isolate this potential cause, I recompiled GHC 7.10.1 with the old &lt;code&gt;integer-gmp-0.5&lt;/code&gt;. Comparing 7.10.1 with the two &lt;code&gt;integer-gmp&lt;/code&gt; versions reveals a 4% increase in allocations.
&lt;/p&gt;
&lt;p&gt;
While we can't necessarily attribute all of the runtime increase to these allocations, they are something that should be addressed if possible. Herbert Valerio Riedel, the author of the &lt;code&gt;integer-gmp&lt;/code&gt; rewrite, believes that the cause may be due to the tendency for the rewrite to initially allocate a conservatively-sized backing &lt;code&gt;ByteArray#&lt;/code&gt; for results. This leads to increased allocations due to the reallocations that are later required to accommodate larger-than-expected results.
&lt;/p&gt;
&lt;p&gt;
While being more liberal in the initial allocation sizes would solve the reallocation issue, this approach may substantially increase working-set sizes and heap fragmentation for integer-heavy workloads. For this reason, Herbert will be looking into exploiting a feature of our heap allocator. Heap allocations in GHC occur by bumping a pointer into an allocation block. Not only is this a very efficient means of allocating, it potentially allows one to efficiently grow an existing allocation. In this case, if we allocate a buffer and soon after realize that our request was too small we can simply bump the heap pointer by the size deficit, so long as no other allocations have occurred since our initial allocation. We can do this since we know that the memory after the heap pointer is available; we merely need to ensure that the current block we are allocating into is large enough.
&lt;/p&gt;
&lt;p&gt;
Simon Marlow and Herbert will be investigating this possibility in the coming weeks.
&lt;/p&gt;
&lt;h2 id="D924:mapM_andtraverse_"&gt;D924: &lt;code&gt;mapM_&lt;/code&gt; and &lt;code&gt;traverse_&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;
As discussed in the &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/blog#AMP-relatedperformanceregression"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;most recent&lt;/a&gt; Weekly News, one issue on our plate at the moment is &lt;a class="ext-link" href="https://phabricator.haskell.org/D924" title="D924 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D924&lt;/a&gt;, which attempted to patch up two remaining facets of the Applicative-Monad Proposal,
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Remove the override of &lt;code&gt;mapM&lt;/code&gt; for the &lt;code&gt;[]&lt;/code&gt; &lt;code&gt;Traversal&lt;/code&gt; instance
&lt;/li&gt;&lt;li&gt;Rewrite &lt;code&gt;mapM_&lt;/code&gt; in terms of &lt;code&gt;traverse_&lt;/code&gt;
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
While (1) seems like an obvious cleanup, (2) is a bit tricky. As noted last time, &lt;code&gt;traverse_&lt;/code&gt; appears to give rise to non-linear behavior in this context.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;akio&lt;/code&gt; has contributed an insightful [analysis &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/timeline?from=2015-08-01T10%3A00%3A33Z&amp;amp;precision=second"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://ghc.haskell.org/trac/ghc/timeline?from=2015-08-01T10%3A00%3A33Z&amp;amp;precision=second&lt;/a&gt;] shedding light on the cause of this behavior. Given that the quadratic behavior is intrinsic to the &lt;code&gt;Applicative&lt;/code&gt; formulation, we'll be sending this matter back to the Core Libraries Committee to inform their future design decisions.
&lt;/p&gt;
&lt;p&gt;
That is all for this week!
&lt;/p&gt;
&lt;p&gt;
Cheers,
&lt;/p&gt;
&lt;p&gt;
~ Ben
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>GHC Weekly News - 2015/07/29</title>
      <dc:creator>bgamari</dc:creator>
      <pubDate>Wed, 29 Jul 2015 15:52:19 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20150729</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20150729</guid>
      <description>&lt;p&gt;
Hi *,
&lt;/p&gt;
&lt;p&gt;
Welcome for the latest entry in the GHC Weekly News. Today GHC HQ met to discuss plans post-7.10.2.
&lt;/p&gt;
&lt;h1 id="GHC7.10.2release"&gt;GHC 7.10.2 release&lt;/h1&gt;
&lt;p&gt;
GHC 7.10.2 has been &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/haskell/2015-July/024634.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;released&lt;/a&gt;!
&lt;/p&gt;
&lt;p&gt;
Feel free to grab a &lt;a class="ext-link" href="https://www.haskell.org/ghc/download_ghc_7_10_2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;tarball&lt;/a&gt; and enjoy! See the &lt;a class="ext-link" href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/release-7-10-2.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;release notes&lt;/a&gt; for discussion of what has changed.
&lt;/p&gt;
&lt;p&gt;
As always, if you suspect that you have found a regression don't hesitate to &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/ReportABug"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;open a Trac ticket&lt;/a&gt;. We are especially interested in performance regressions with fairly minimal reproduction cases.
&lt;/p&gt;
&lt;h2 id="GHC7.10.2andthetextpackage"&gt;GHC 7.10.2 and the &lt;code&gt;text&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;
A few days ago a report came in of long compilations times under 7.10.2 on a program with many &lt;code&gt;Text&lt;/code&gt; literals (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10528" title="#10528: bug: compile time performance regression with OverloadedStrings and Text (closed: fixed)"&gt;#10528&lt;/a&gt;). This ended up being due to a change in the simplifier which caused it to perform rule rewrites on the left-hand-side of other rules. While this is questionable (read "buggy") behavior, it doesn't typically cause trouble so long as rules are properly annotated with phase control numbers to ensure they are performed in the correct order.  Unfortunately, it turns out that the rules provided by the &lt;code&gt;text&lt;/code&gt; package for efficiently handling string literals did not include phase control annotations. This resulted in a rule from &lt;code&gt;base&lt;/code&gt; being performed on the literal rules, which rendered the literal rules ineffective. The simplifier would then  expend a great deal of effort trying to simplify the rather complex terms that remained.
&lt;/p&gt;
&lt;p&gt;
Thankfully, the &lt;a class="ext-link" href="https://github.com/bos/text/pull/129/files"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;fix&lt;/a&gt; is quite straightforward: ensure that the the text literal rules fire in the first simplifier phase (phase 2). This avoids interference from the &lt;code&gt;base&lt;/code&gt; rules, allowing them to fire as expected.
&lt;/p&gt;
&lt;p&gt;
This fix is now present in &lt;code&gt;text-1.2.1.2&lt;/code&gt;. &lt;strong&gt;Users of GHC 7.10.2 should be use this release if at all possible.&lt;/strong&gt; Thanks to &lt;code&gt;text&lt;/code&gt;'s maintainer, Bryan O'Sullivan for taking time out of his vacation to help me get this new release out.
&lt;/p&gt;
&lt;p&gt;
While this mis-behaviour was triggered by a bug in GHC, a similar outcome could have arisen even without this bug. This highlights the importance of including phase control annotations on &lt;code&gt;INLINE&lt;/code&gt; and &lt;code&gt;RULE&lt;/code&gt; pragmas: Without them the compiler may choose the rewrite in an order that you did not anticipate. This has also drawn attention to a few shortcomings in the current rewrite rule mechanism, which lacks the expressiveness to encode complex ordering relationships between rules. This limitation pops up in a number of places, including when trying to write rules on class-overloaded functions. Simon Peyton Jones is currently pondering possible solutions to this on &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10595" title="#10595: bug: BuiltinRules override other rules in some cases. (new)"&gt;#10595&lt;/a&gt;.
&lt;/p&gt;
&lt;h1 id="StrictData"&gt;StrictData&lt;/h1&gt;
&lt;p&gt;
This week we merged the long-anticipated &lt;code&gt;-XStrictData&lt;/code&gt; extension (&lt;a class="ext-link" href="https://phabricator.haskell.org/D1033" title="D1033 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1033&lt;/a&gt;) by Adam Sandberg Ericsson. This implements a subset of the [&lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/StrictPragma"&gt;StrictPragma&lt;/a&gt;] proposal initiated by Johan Tibell.In particular, &lt;code&gt;StrictData&lt;/code&gt; allows a user to specify that datatype fields should be strict-by-default on a per-module basis, greatly reducing the syntactic noise introduced by this common pattern. In addition to implementing a useful feature, the patch ended up being a nice clean-up of the GHC's handling of strictness annotations.
&lt;/p&gt;
&lt;p&gt;
What remains of this proposal is the more strong &lt;code&gt;-XStrict&lt;/code&gt; extension which essentially makes all bindings strict-by-default. Adam has indicated that he may take up this work later this summer.
&lt;/p&gt;
&lt;h1 id="AMP-relatedperformanceregression"&gt;AMP-related performance regression&lt;/h1&gt;
&lt;p&gt;
In late May Herbert Valerio Riedel opened &lt;a class="ext-link" href="https://phabricator.haskell.org/D924" title="D924 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D924&lt;/a&gt;, which removed an explicit definition for &lt;code&gt;mapM&lt;/code&gt; in the &lt;code&gt;[]&lt;/code&gt; &lt;code&gt;Traversable&lt;/code&gt; instance, as well as redefined &lt;code&gt;mapM_&lt;/code&gt; in terms of &lt;code&gt;traverse_&lt;/code&gt; to &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/libraries/2015-May/025708.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;bring consistency&lt;/a&gt; with the post-AMP world. The patch remains unmerged, however, due to a failing ghci testcase. It turns out the regression is due to the redefinition of &lt;code&gt;mapM_&lt;/code&gt;, which uses &lt;code&gt;(*&amp;gt;)&lt;/code&gt; where &lt;code&gt;(&amp;gt;&amp;gt;)&lt;/code&gt; was once used. This tickles poor behavior in ghci's &lt;code&gt;ByteCodeAsm&lt;/code&gt; module. The problem can be resolved by defining &lt;code&gt;(*&amp;gt;) = (&amp;gt;&amp;gt;)&lt;/code&gt; in the &lt;code&gt;Applicative Assembler&lt;/code&gt; instance (e.g. &lt;a class="ext-link" href="https://phabricator.haskell.org/1097" title="1097 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:1097&lt;/a&gt;). That being said, the fact that this change has already exposed performance regressions raises doubts as to whether it is prudent.
&lt;/p&gt;
&lt;h1 id="GHCPerformancework"&gt;GHC Performance work&lt;/h1&gt;
&lt;p&gt;
Over the last month or so I have been working on nailing down a variety of performance issues in GHC and the code it produces. This has resulted in a number of patches which in some cases dramatically improve compilation time (namely &lt;a class="ext-link" href="https://phabricator.haskell.org/1012" title="1012 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:1012&lt;/a&gt; and &lt;a class="ext-link" href="https://phabricator.haskell.org/D1041" title="D1041 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1041&lt;/a&gt;). Now since 7.10.2 is out I'll again be spending most of my time on these issues. We have heard a number of reports that GHC 7.10 has regressed on real-world programs. If you have a reproducible performance regression that you would like to see addressed please open a Trac ticket.
&lt;/p&gt;
&lt;h1 id="Mergedpatches"&gt;Merged patches&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="ext-link" href="https://phabricator.haskell.org/D1028" title="D1028 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1028&lt;/a&gt;: Fixity declarations are now allowed for infix data constructors in GHCi (thanks to Thomas Miedema)
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://phabricator.haskell.org/D1061" title="D1061 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1061&lt;/a&gt;: Fix a long-standing correctness issue arising when pattern matching on floating point values
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://phabricator.haskell.org/D1085" title="D1085 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1085&lt;/a&gt;: Allow programs to run in environments lacking iconv (thanks to Reid Barton)
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://phabricator.haskell.org/D1094" title="D1094 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1094&lt;/a&gt;: Improve code generation in &lt;code&gt;integer-gmp&lt;/code&gt; (thanks to Reid Barton)
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://phabricator.haskell.org/D1068" title="D1068 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1068&lt;/a&gt;: Implement support for the &lt;code&gt;MO_U_Mul2&lt;/code&gt; &lt;code&gt;MachOp&lt;/code&gt; in the LLVM backend (thanks to Michael Terepeta)
&lt;/li&gt;&lt;li&gt;&lt;a class="ext-link" href="https://phabricator.haskell.org/D524" title="D524 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D524&lt;/a&gt;: Improve runtime system allocator performance with two-step allocation (thanks to Simon Marlow)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
That's all for this time. Enjoy your week!
&lt;/p&gt;
&lt;p&gt;
Cheers,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ben
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>GHC Weekly News - 2015/07/21</title>
      <dc:creator>bgamari</dc:creator>
      <pubDate>Tue, 21 Jul 2015 19:20:38 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20150721</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20150721</guid>
      <description>&lt;p&gt;
Hi *,
&lt;/p&gt;
&lt;p&gt;
Welcome for the latest entry in the GHC Weekly News. Today GHC HQ met
to discuss the status of the imminent 7.10.2 release.
&lt;/p&gt;
&lt;h1 id="a7.10.2Status"&gt;7.10.2 Status&lt;/h1&gt;
&lt;p&gt;
In the past weeks we have been busily tracking down a number of regressions in
the &lt;code&gt;ghc-7.10&lt;/code&gt; branch. At this point we have built up an impressive
&lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-7.10.2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;list&lt;/a&gt; of fixes.
Thanks to everyone who has helped in this process!
&lt;/p&gt;
&lt;p&gt;
In addition to resolving a number of simplifier regressions and portability issues
(some mentioned in the Weekly News from 6 July), GHC 7.10.2 should be the first
release which works out-of-the-box with GHCJS, thanks to a fix from Luite Stegeman.
Moreover, we will have support for running in even the most minimal container
environment (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10623" title="#10623: bug: Handling of ASCII encodings introduced in D898 breaks Unicode terminal ... (closed: fixed)"&gt;#10623&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
At this point we have successfully tested the pre-release against Stackage
(thanks for Michael Snoyman and Herbert Valerio Riedel for making this possible)
and have found no major issues. A source tarball will be finalized and sent to
the binary builders today. With luck we will have releasable binaries by the end of
the week.
&lt;/p&gt;
&lt;h1 id="a7.11Things"&gt;7.11 Things&lt;/h1&gt;
&lt;h2 id="Testing"&gt;Testing&lt;/h2&gt;
&lt;p&gt;
Thomas Miedema has been doing some amazing work fixing some long-standing
validation failures on the &lt;code&gt;&lt;/code&gt;master&lt;code&gt;&lt;/code&gt; branch. Moreover, he has been examining
the viability of enabling
&lt;a class="ext-link" href="https://phabricator.haskell.org/D1074"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;larger swaths&lt;/a&gt; of the testsuite in
Harbormaster validations.
&lt;/p&gt;
&lt;p&gt;
In addition, Thomas has been doing some great work smoothing over a variety of
rough edges in the build system and generally keeping things running smoothly.
Thanks Thomas!
&lt;/p&gt;
&lt;h2 id="Typeableimplementation"&gt;Typeable implementation&lt;/h2&gt;
&lt;p&gt;
Another subject of discussion in this week's GHC call was
&lt;a class="ext-link" href="https://phabricator.haskell.org/D757"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phabricator D757&lt;/a&gt;, a long-languishing
change which moves the generation of &lt;code&gt;Typeable&lt;/code&gt; instances from types' use sites to
their definition sites. This change involves a trade-off as it moves compilation
effort to the defining module, which will adversely affect compilation times of
modules defining many types. Moreover, in the event that &lt;code&gt;Typeable&lt;/code&gt; is never actually used
this time is wasted effort. That being said, the current design of generating
&lt;code&gt;Typeable&lt;/code&gt; instances at the point of use makes the class a bit of a black sheep
at the moment.
&lt;/p&gt;
&lt;h2 id="Runtimesystemmatters"&gt;Runtime system matters&lt;/h2&gt;
&lt;p&gt;
This week Simon Marlow will merge his &lt;a class="ext-link" href="https://phabricator.haskell.org/D524"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;D524&lt;/a&gt;,
a rework of the runtime system's allocator which he reports has improved
performance significantly in his workloads. This commit splits the concerns of
reserving address space and requesting backing memory for this address space. While the former is relatively cheap, the latter can be quite expensive due to page-table setup.
Consequently, his rework allocates a large chunk of addressing space up front
and then incrementally commits it as needed. Interested readers are encouraged
to look at the patch, which offers a nice glimpse into the inner workings of
GHC's memory allocator.
&lt;/p&gt;
&lt;p&gt;
Simon also has finished &lt;a class="ext-link" href="https://phabricator.haskell.org/D1076" title="D1076 in Phab"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Phab:D1076&lt;/a&gt;, which should improve garbage collector performance by
reworking the logic responsible for scavenging static objects. This work will
be merged shortly.
&lt;/p&gt;
&lt;p&gt;
Also discussed was the profiler mis-attribution issue mentioned in the
Weekly News from 6 July 2015 (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10007" title="#10007: bug: Fix misattribution of Cost Centre profiles to lintAnnots (closed: fixed)"&gt;#10007&lt;/a&gt;). Peter Wortmann is currently looking at this issue,
which ends up being due to an infelicity in the semantics implemented by the
runtime system. Simon Marlow expressed that he did not know of a way to resolve
this that isn't quite invasive. We will have to see what Peter proposes.
&lt;/p&gt;
&lt;h2 id="Applicativedo"&gt;Applicative &lt;code&gt;do&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;
For some time now Simon Marlow has been working on
&lt;a class="ext-link" href="https://phabricator.haskell.org/D729"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;implementing&lt;/a&gt; the &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/ApplicativeDo"&gt;ApplicativeDo&lt;/a&gt;
proposal. Today in the call we discussed the status of this work and concluded
that while some refactoring is likely possible, the work can be merged as-is.
Hopefully at some point in the next few weeks this work will land.
&lt;/p&gt;
&lt;h2 id="HaddockcommentsforGADTconstructors"&gt;Haddock comments for GADT constructors&lt;/h2&gt;
&lt;p&gt;
It came to our attention that the GHC parser was unable to parse Haddock
comments attached to GADT constructors. As it turns out, this is a rather long-standing
problem. Despite this fact, the &lt;a class="ext-link" href="https://phabricator.haskell.org/D1086"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;fix&lt;/a&gt;
ended up being quite straightforward and will be in 7.12.
&lt;/p&gt;
&lt;h1 id="BackwardsCompatibility"&gt;Backwards Compatibility&lt;/h1&gt;
&lt;p&gt;
In general one should be able to compile the current GHC &lt;code&gt;master&lt;/code&gt; branch with
the last two compiler releases. Recently, however, the reality is a bit less
clear-cut: while the current &lt;code&gt;ghc-7.10&lt;/code&gt; branch GHC will technically &lt;strong&gt;build&lt;/strong&gt; with
GHC 7.6 and 7.8, the tree does not necessarily pass the &lt;code&gt;validate&lt;/code&gt; script due
to a variety of imports rendered redundant by AMP and FTP. Moreover, the
official policy on backwards compatibility is rather well-hidden on the
&lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/Commentary/CodingStyle"&gt;Commentary/CodingStyle&lt;/a&gt; page.
&lt;/p&gt;
&lt;p&gt;
This was discussed in today's meeting and it was decided that we will in the future
maintain full validation-compatibility with the previous two releases. To ease this
we will relax the use of &lt;code&gt;-Werror&lt;/code&gt; when building the stage 1 compiler.
&lt;/p&gt;
&lt;p&gt;
On a related note, this week Thomas Miedema
&lt;a class="ext-link" href="https://phabricator.haskell.org/D904"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;ripped out&lt;/a&gt; some &lt;code&gt;#ifdefs&lt;/code&gt; for GHC 7.6
compatibility from the &lt;code&gt;master&lt;/code&gt; branch. Be aware that you will now need GHC 7.8 or newer to build &lt;code&gt;master&lt;/code&gt;.
&lt;/p&gt;
&lt;h1 id="MacOSXElCapitansupport"&gt;Mac OS X El Capitan support&lt;/h1&gt;
&lt;p&gt;
It is well-known that the next Mac OS X release, El Capitan, will default to
"root-less" mode, a security feature which restricts the operations available to
even the &lt;code&gt;root&lt;/code&gt; user. As a result of this feature some system calls in the El Capitan developer preview fail with
&lt;code&gt;EPERM&lt;/code&gt; instead of the usual &lt;code&gt;EACCES&lt;/code&gt;. This
change uncovered a bug in the &lt;code&gt;unix&lt;/code&gt; library where &lt;code&gt;EPERM&lt;/code&gt; was not treated
similarly to &lt;code&gt;EACCES&lt;/code&gt;. This was
&lt;a class="ext-link" href="https://github.com/haskell/unix/pull/18"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;fixed&lt;/a&gt; in November 2014, a fix which
is included in GHC 7.10.1.
&lt;/p&gt;
&lt;p&gt;
However, there have been a
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-July/009403.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;few calls&lt;/a&gt;
on &lt;code&gt;ghc-devs&lt;/code&gt; for a bugfix release of the 7.8 series including the updated &lt;code&gt;unix&lt;/code&gt;. We
discussed this in the call today and concluded that we would not make such a
release. Given that El Capitan is not yet released and the issue is fixed in 7.10, it doesn't seem worthwhile to put more developer time into 7.8. We would suggest that any El
Capitan user unable to update to GHC 7.10.1 or newer disable root-less mode for
the time being. This can be accomplished with,
&lt;/p&gt;
&lt;pre class="wiki"&gt;sudo nvram boot-args="rootless=0"
&lt;/pre&gt;&lt;h1 id="Infrastructure"&gt;Infrastructure&lt;/h1&gt;
&lt;p&gt;
Recently it came to our attention that one of the build machines used by
Harbormaster (Phabricator's build mechanism) was still running GHC 7.6. If you
have seen strange validation issues on Harbormaster builds in the past, this is may
be the cause. As of today this is fixed; all Harbormaster validations are now
being built with GHC 7.8.4.
&lt;/p&gt;
&lt;p&gt;
Harbormaster has historically had trouble working with Differentials which
changed submodule revisions. This has made testing revisions involving submodules quite tricky. Thanks to a
&lt;a class="ext-link" href="https://github.com/haskell-infra/phab-ghc-builder/pull/2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;patch&lt;/a&gt; from Adam Sandberg Eriksson Harbormaster can now grab submodule commits from non-upstream repositories if set in &lt;code&gt;.gitmodules&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Herbert Valerio Riedel has been making great strides improving the
responsiveness of Trac. A Trac upgrade, a move to Postresql, and some fiddling
with the WSGI configuration should result in a much better experience for
everyone.
&lt;/p&gt;
&lt;p&gt;
Have a great week!
&lt;/p&gt;
&lt;p&gt;
~ Ben
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>GHC Weekly News - 2015/07/06</title>
      <dc:creator>bgamari</dc:creator>
      <pubDate>Mon, 06 Jul 2015 16:25:30 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20150706</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20150706</guid>
      <description>&lt;p&gt;
Hi *,
&lt;/p&gt;
&lt;p&gt;
Welcome for the latest entry in the GHC Weekly News.  The past week, GHC HQ met up to discuss the status of the approaching 7.10.2 release.
&lt;/p&gt;
&lt;h1 id="a7.10.2status"&gt;7.10.2 status&lt;/h1&gt;
&lt;p&gt;
After quite some delay due to a number of tricky regressions in 7.10.1, 7.10.2 is nearing the finish line. Austin cut release candidate 2 on Friday and so far the only reports of trouble appear to be some validation issues, most of which have already been fixed thanks to Richard Eisenberg.
&lt;/p&gt;
&lt;p&gt;
7.10.2 will include a number of significant bug-fixes. These include,
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10521" title="#10521: bug: Wrong results in strict Word8 storage on x64 (closed: fixed)"&gt;#10521&lt;/a&gt;, where overlap of floating point STG registers weren't properly accounted for, resulting in incorrect results in some floating point computations. This was fixed by the amazing Reid Barton.
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10534" title="#10534: bug: Data families + Coercible = unsafeCoerce (closed: fixed)"&gt;#10534&lt;/a&gt;, a type-safety hole enabling a user to write &lt;code&gt;unsafeCoerce&lt;/code&gt; with data families and &lt;code&gt;coerce&lt;/code&gt;. Fix due to the remarkable Richard Eisenberg.
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10538" title="#10538: bug: Simpilifier produces empty case in core, segfaults at runtime. (closed: fixed)"&gt;#10538&lt;/a&gt;, where some programs would cause the simplifier to emit an empty case, resulting in runtime crashes. Fix due to the industrious Simon Peyton Jones.
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10527" title="#10527: bug: Panic Simplifier ticks exhausted with type families (closed: fixed)"&gt;#10527&lt;/a&gt;, where the simplifier would expend a great deal of effort simplifying arguments which were never demanded by the callee.
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10414" title="#10414: bug: Buggy behavior with threaded runtime (-N1 working, -N2 getting into ... (closed: fixed)"&gt;#10414&lt;/a&gt;, where a subtle point of the runtime system's black-holing mechanism resulting in hangs on a carefully constructed testcase.
&lt;/li&gt;&lt;li&gt;&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10236" title="#10236: bug: DWARF unwind info is broken (closed: fixed)"&gt;#10236&lt;/a&gt;, where incorrect DWARF annotations would be generated, resulting in incorrect backtraces. Fixed by Peter Wortmann
&lt;/li&gt;&lt;li&gt;&lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/7450" title="#7450: bug: Regression in optimisation time of functions with many patterns (6.12 ... (new)"&gt;#7450&lt;/a&gt;, where cached free variable information was being unnecessarily dropped by the specialiser, resulting in non-linear compile times for some programs.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
See the &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-7.10.2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;status page&lt;/a&gt; for a complete listing of issues fixed in this release.
&lt;/p&gt;
&lt;p&gt;
In the coming days we will being working with FP Complete to test the pre-release against Stackage. While Hackage tends to be too large to build in bulk, the selection of packages represented in Stackage is feasible to build and is likely to catch potential regressions. Hopefully this sort of large-scale validation will become common-place for future releases.
&lt;/p&gt;
&lt;p&gt;
If all goes well, 7.10.2 will mark the end of the 7.10 series. However, there is always the small possibility that a major regression will be found. In this case we will cut a 7.10.3 release which will include a few &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/query?status=merge&amp;amp;milestone=7.10.3&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=type&amp;amp;col=priority&amp;amp;col=milestone&amp;amp;col=component&amp;amp;report=19&amp;amp;order=priority"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;patches&lt;/a&gt; which didn't make it into 7.10.2.
&lt;/p&gt;
&lt;h1 id="Othermatters"&gt;Other matters&lt;/h1&gt;
&lt;p&gt;
It has been suggested in &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10601" title="#10601: task: GHC should be distributed with debug symbols (closed: fixed)"&gt;#10601&lt;/a&gt; that GHC builds should ship with DWARF symbols for the base libraries and runtime system. While we all want to see this new capability in users' hands, 7.10.2 will, like 7.10.1, not be shipping with debug symbols. GHC HQ will be discussing the feasibility of including debug symbols with 7.12 in the future. In the meantime, we will be adding options to &lt;code&gt;build.mk&lt;/code&gt; to make it easier for users to build their own compilers with debug-enabled libraries.
&lt;/p&gt;
&lt;p&gt;
In this week's GHC meeting the effort to port GHC's build system to the &lt;a class="missing wiki"&gt;Shake?&lt;/a&gt; build system briefly came up. Despite the volume of updates on the &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Building/Shake"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Wiki&lt;/a&gt; Simon reports that the project is still moving along. The current state of the Shake-based build system can be found on &lt;a class="ext-link" href="https://github.com/snowleopard/shaking-up-ghc/tree/master"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;Github&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
While debugging &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/7540" title="#7540: bug: Panic on type inference with vectorised parallel arrays (closed: fixed)"&gt;#7540&lt;/a&gt; it became clear that there may be trouble lurking in the profiler. Namely when profiling GHC itself &lt;code&gt;lintAnnots&lt;/code&gt; is showing up strongly where it logically should not. This was previously addressed in &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10007" title="#10007: bug: Fix misattribution of Cost Centre profiles to lintAnnots (closed: fixed)"&gt;#10007&lt;/a&gt;, which was closed after a patch by Simon Marlow was merged. As it appears that this did not fully resolve the issue I'll be looking further into this.
&lt;/p&gt;
&lt;p&gt;
~ Ben
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>GHC Weekly News - 2015/06/10</title>
      <dc:creator>thoughtpolice</dc:creator>
      <pubDate>Wed, 10 Jun 2015 21:34:37 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20150610</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20150610</guid>
      <description>&lt;p&gt;
Hi *,
&lt;/p&gt;
&lt;p&gt;
Welcome for the latest entry in the GHC Weekly News. The past week, GHC HQ met up for a quick catch up on 7.10.2 (which you'll want to read up on, see below), and some other technical nonsense about some work we've been doing. As a result the current weekly notes have been slow - the current priority is the next release though, which leads us to...
&lt;/p&gt;
&lt;h2 id="a7.10.2status"&gt;7.10.2 status&lt;/h2&gt;
&lt;p&gt;
7.10.2 is &lt;strong&gt;going to be out soon&lt;/strong&gt; - our current plan is to have a release candidate on &lt;strong&gt;the weekend of Saturday the 13th&lt;/strong&gt;, and the final release &lt;strong&gt;the next week&lt;/strong&gt;. That means if you want something fixed, you'd better hollar &lt;em&gt;very&lt;/em&gt; soon, or we're just not going to get to it!
&lt;/p&gt;
&lt;p&gt;
If you're wondering what's currently been fixed/scheduled,  the &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-7.10.2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;status page&lt;/a&gt; shows the current set of tickets we've fixed and plan on fixing.
&lt;/p&gt;
&lt;h2 id="Listchatter"&gt;List chatter&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Edward Z. Yang has written up a new wiki page to clearly explain and document all the various confusion around package keys, package ids, etc as a result of all the new Backpack work. If you're interested in this, it's definitely worth a read. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-June/009173.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-June/009173.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Mark Lentczner sez: The Haskell Platform has finally outgrown Travis-CI, now going beyond the 50 minute build limit. Mark asks what alternatives we can use going forward. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-June/009174.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-June/009174.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Jan Stolarek asks: in some cases, GHC will generate default instances or values, but that source code has no textual information location (for example, consider an &lt;code&gt;instance&lt;/code&gt; clause without the &lt;code&gt;where&lt;/code&gt;) - what do people think about fixing this, and are there anythings to look out for? &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-June/009202.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-June/009202.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;David Luposchainsky has opened a new thread - about moving &lt;code&gt;fail&lt;/code&gt; out of &lt;code&gt;Monad&lt;/code&gt; and into its own typeclass, &lt;code&gt;MonadFail&lt;/code&gt;. This change is a request that's very long in the tooth (older than the AMP or FTP changes by a landslide), but David's proposal has a clearly set out goal to tackle compatibility, warnings, and implementation. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-June/009186.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-June/009186.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Noteworthycommits"&gt;Noteworthy commits&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/19ec6a84d6344c2808d0d41da11956689a0e4ae9/ghc" title="Fix for CAF retention when dynamically loading &amp;amp; unloading code
In a ..."&gt;19ec6a84d6344c2808d0d41da11956689a0e4ae9&lt;/a&gt; - Fix for CAF retention when dynamically loading &amp;amp; unloading code
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/4a0b7a10442eec3747d5f95ef186a79bb0648754/ghc" title="Build: run autoreconf jobs in parallel
Running ./boot takes ~20 ..."&gt;4a0b7a10442eec3747d5f95ef186a79bb0648754&lt;/a&gt; - Build: run autoreconf jobs in parallel
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Closedtickets"&gt;Closed tickets&lt;/h2&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10460" title="#10460: feature request: Allow foreign prim to return Any (closed: fixed)"&gt;#10460&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/7672" title="#7672: bug: boot file entities are sometimes invisible and are not (semantically) ... (closed: fixed)"&gt;#7672&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9252" title="#9252: feature request: Generalize hs-boot files to be more like module signatures (closed: invalid)"&gt;#9252&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9506" title="#9506: task: Name libraries (dll/so) separately from linker symbols (closed: duplicate)"&gt;#9506&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10294" title="#10294: bug: Missing instances if compiling with -fplugin (closed: fixed)"&gt;#10294&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/5316" title="#5316: bug: Orphan instances strike again: ghc rejects a program at first but will ... (closed: duplicate)"&gt;#5316&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10408" title="#10408: bug: The behavior of -ignore-dot-ghci and -ghci-script are weird (closed: fixed)"&gt;#10408&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10386" title="#10386: bug: Documentation for -Wall is wrong (closed: fixed)"&gt;#10386&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9960" title="#9960: bug: Performance problem with TrieMap (closed: fixed)"&gt;#9960&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10145" title="#10145: bug: :info (-&amp;gt;) should list its fixity (closed: fixed)"&gt;#10145&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9259" title="#9259: feature request: GHCi should list its available command line options (closed: fixed)"&gt;#9259&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10386" title="#10386: bug: Documentation for -Wall is wrong (closed: fixed)"&gt;#10386&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9507" title="#9507: feature request: ghc-pkg mode to query by package-key (closed: fixed)"&gt;#9507&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8723" title="#8723: task: sdist should not have to build everything (closed: fixed)"&gt;#8723&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10442" title="#10442: bug: Loading of shared libraries is problematic in ghc 7.10.1 (closed: fixed)"&gt;#10442&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/5014" title="#5014: bug: canonicalizePath throws exception on paths that do not exist (closed: fixed)"&gt;#5014&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/4215" title="#4215: bug: canonicalizePath behaves strangely with paths that do not exist (closed: fixed)"&gt;#4215&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10443" title="#10443: bug: Regression in forall typechecking (closed: invalid)"&gt;#10443&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8244" title="#8244: bug: Removing the Cabal dependency (closed: fixed)"&gt;#8244&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10499" title="#10499: bug: Constraints should commute over ~ (closed: duplicate)"&gt;#10499&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10500" title="#10500: bug: GHC runs out of memory building unicode-properties (closed: fixed)"&gt;#10500&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10428" title="#10428: bug: GHC cannot match representations using Coercible constraint (closed: duplicate)"&gt;#10428&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10488" title="#10488: bug: Inconsistent reduction of type family (closed: fixed)"&gt;#10488&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10489" title="#10489: bug: Panic in TcEvidence due to wrong role (closed: fixed)"&gt;#10489&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10406" title="#10406: bug: ghc-7.10.1-testsuite.tar.xz [4.3MB] contains x86_64 ghc-config executable! (closed: fixed)"&gt;#10406&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10501" title="#10501: bug: Exception in :cmd command can terminate GHCi (closed: fixed)"&gt;#10501&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10441" title="#10441: bug: msys native python testsuite support doesn't work in some situations (closed: fixed)"&gt;#10441&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10406" title="#10406: bug: ghc-7.10.1-testsuite.tar.xz [4.3MB] contains x86_64 ghc-config executable! (closed: fixed)"&gt;#10406&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10502" title="#10502: bug: Bad interaction of sandboxes and coverage (closed: invalid)"&gt;#10502&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9101" title="#9101: feature request: Need option to use system gcc and binutils on Windows/msys2 (closed: wontfix)"&gt;#9101&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9663" title="#9663: bug: Windows build process should give better message if you forgot to ... (closed: wontfix)"&gt;#9663&lt;/a&gt;, and &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9945" title="#9945: bug: export list for System.Posix.Internals breaking the build on Windows (closed: fixed)"&gt;#9945&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>news</category>
      <category>ghc</category>
    </item>
    <item>
      <title>GHC Weekly News - 2015/06/03</title>
      <dc:creator>thoughtpolice</dc:creator>
      <pubDate>Wed, 03 Jun 2015 07:03:50 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20150603</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20150603</guid>
      <description>&lt;p&gt;
Hi *,
&lt;/p&gt;
&lt;p&gt;
It's that time once again - to get some info on what's happening in the world of GHC! It's been a quiet few weeks as a UK Holiday punted one of GHC HQ's meetings off, and this week we were only partially there.
&lt;/p&gt;
&lt;p&gt;
The main point of discussion was 7.10.2, and continuing work on compiler performance. The good news is, the past few weeks have seen good work on both these fronts!
&lt;/p&gt;
&lt;h2 id="a7.10.2status"&gt;7.10.2 status&lt;/h2&gt;
&lt;p&gt;
7.10.2 is swimming along very nicely - the &lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-7.10.2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;status page&lt;/a&gt; shows the current set of tickets we've fixed and plan on fixing.
&lt;/p&gt;
&lt;p&gt;
Not much has changed from last time, except we've fixed even more bugs! We're currently sitting at about 85 bugs fixed, some of them pretty important - code generation bugs, compiler performance fixes, some RTS and event manager work. Your author is actually quite happy with what GHC 7.10.2 looks like, at this rate.
&lt;/p&gt;
&lt;h2 id="Listchatter"&gt;List chatter&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Austin Seipp announced that GHC 7.10.2 will be release soon, and developers/users should get bugs they want fixed reported to us ASAP so we can do something. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-June/009150.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-June/009150.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Mark Lentczner announced a Haskell Platform alpha featuring GHC 7.10.2 &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-June/009128.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-June/009128.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Facundo Dominguez asks: sometimes we want to create a &lt;code&gt;static&lt;/code&gt; pointer in a function with a local definition, how can we do that? The current problem is the desugarer gets in the way and current approaches are currently rejected, but Facundo has some ideas/questions about a fix. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-May/009110.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-May/009110.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;David Macek has made great progress on getting native MSYS2 packages for windows working - which should be a great boon to all our Windows users! &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-May/009089.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-May/009089.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Joachim Breitner announced the new GHC performance dashboard, which can be used to track all of GHC's performance-based tests over time. Whoohoo! &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-May/009032.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-May/009032.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Joachim Breitner asked: is there a way to programmatically 'Raise a Concern' on a Phabricator commit? With the new &lt;a class="ext-link" href="https://perf.haskell.org/ghc/"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://perf.haskell.org/ghc/&lt;/a&gt; work, it'd be nice if regressions could be automatically flagged. The current problem is there is no API endpoint, but one can be built. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-June/009128.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-June/009128.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Adam Gundry asked ghc-devs about some input on changes to the new typechecker plugins API. After some discussion and elbow grease, the new changes have already landed in HEAD and will be in 7.12.1. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-May/009097.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-May/009097.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Noteworthycommits"&gt;Noteworthy commits&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/45d9a15c4b85a2ed89579106bdafd84accf2cb39/ghc" title="Fix a huge space leak in the mighty Simplifier
This long-standing, ..."&gt;45d9a15c4b85a2ed89579106bdafd84accf2cb39&lt;/a&gt; - Fix a huge space leak in the mighty simplifier
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/c89bd681d34d3339771ebdde8aa468b1d9ab042b/ghc" title="Fix quadratic behaviour in tidyOccName
In the test program from ..."&gt;c89bd681d34d3339771ebdde8aa468b1d9ab042b&lt;/a&gt; - Fix quadratic behavior in &lt;code&gt;tidyOccName&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/b03f074fd51adfb9bc4f5275294712ee62741aed/ghc" title="ghci: Allow :back and :forward to take counts
These behave like the ..."&gt;b03f074fd51adfb9bc4f5275294712ee62741aed&lt;/a&gt; - ghci: Allow &lt;code&gt;:back&lt;/code&gt; and &lt;code&gt;:forward&lt;/code&gt; to take counts
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/8e4dc8fb63b8d3bfee485c1c830776f3ed704f4d/ghc" title="Greatly speed up nativeCodeGen/seqBlocks
When working on #10397, I ..."&gt;8e4dc8fb63b8d3bfee485c1c830776f3ed704f4d&lt;/a&gt; - Greatly speed up &lt;code&gt;nativeCodeGen/seqBlocks&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/c256357242ee2dd282fd0516260edccbb7617244/ghc" title="Speed up elimCommonBlocks by grouping blocks also by outgoing labels ..."&gt;c256357242ee2dd282fd0516260edccbb7617244&lt;/a&gt; - Speed up &lt;code&gt;elimCommonBlocks&lt;/code&gt; by grouping blocks also by outgoing labels
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/f5188f3acd73a07b648924a58b9882c2d0a3dbcb/ghc" title="Fix weird behavior of -ignore-dot-ghci and -ghci-scipt * Make ..."&gt;f5188f3acd73a07b648924a58b9882c2d0a3dbcb&lt;/a&gt; - Fix weird behavior of &lt;code&gt;-ignore-dot-ghci&lt;/code&gt; and &lt;code&gt;-ghci-script&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/4fffbc34c024231c3c9fac7a2134896cc09c7fb7/ghc" title="New handling of overlapping inst in Safe Haskell
We do much better ..."&gt;4fffbc34c024231c3c9fac7a2134896cc09c7fb7&lt;/a&gt; - New handling of overlapping instances in Safe Haskell
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/f16ddcee0c64a92ab911a7841a8cf64e3ac671fd/ghc" title="Support stage 1 Template Haskell (non-quasi) quotes, fixes #10382. ..."&gt;f16ddcee0c64a92ab911a7841a8cf64e3ac671fd&lt;/a&gt; - Support stage 1 Template Haskell (non-quasi) quotes, fixes &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10382" title="#10382: feature request: Template Haskell (non-quasi) quotes should work with stage 1 compiler (closed: fixed)"&gt;#10382&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/cf7573b8207bbb17c58612f3345e0b17d74cfb58/ghc" title="More accurate allocation stats for :set +s
The point of this commit ..."&gt;cf7573b8207bbb17c58612f3345e0b17d74cfb58&lt;/a&gt; - More accurate allocation stats for &lt;code&gt;:set -s&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Closedtickets"&gt;Closed tickets&lt;/h2&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10407" title="#10407: bug: git head no longer builds with ghc &amp;lt; 7.10 (closed: fixed)"&gt;#10407&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10408" title="#10408: bug: The behavior of -ignore-dot-ghci and -ghci-script are weird (closed: fixed)"&gt;#10408&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10177" title="#10177: bug: Typeable solver regression (closed: fixed)"&gt;#10177&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10359" title="#10359: bug: Tuple constraint synonym led to asymptotic performance lossage (closed: fixed)"&gt;#10359&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10403" title="#10403: bug: GHC crashes on a partial type signature (closed: fixed)"&gt;#10403&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10248" title="#10248: bug: GHC panic when used with deferred type errors, again (closed: fixed)"&gt;#10248&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9579" title="#9579: bug: Runtime suggests using +RTS when that's not possible (closed: fixed)"&gt;#9579&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10415" title="#10415: bug: ForeignPtr touched in FFI wrapper is never discarded (closed: invalid)"&gt;#10415&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10419" title="#10419: task: Refactor LoadIface to distinguish getting a ModIface versus loading ... (closed: invalid)"&gt;#10419&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10427" title="#10427: bug: Template variable unbound in rewrite rule (closed: duplicate)"&gt;#10427&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10429" title="#10429: bug: GHC fails to import instance (closed: invalid)"&gt;#10429&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10397" title="#10397: bug: Compiler performance regression 7.6 -&amp;gt; 7.8 in elimCommonBlocks (closed: fixed)"&gt;#10397&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10422" title="#10422: bug: reorder in nativeCodeGen too slow (closed: fixed)"&gt;#10422&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10335" title="#10335: bug: Failure to construct superclasses in instance (closed: fixed)"&gt;#10335&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10366" title="#10366: task: Post link to MacOS binary of 7.10 (closed: fixed)"&gt;#10366&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10110" title="#10110: bug: Compiling unit fails with Loading temp shared object failed (closed: fixed)"&gt;#10110&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10397" title="#10397: bug: Compiler performance regression 7.6 -&amp;gt; 7.8 in elimCommonBlocks (closed: fixed)"&gt;#10397&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10349" title="#10349: bug: ghc-7.10 fails to configure on aarch64 with ld.gold: cannot compute ... (closed: fixed)"&gt;#10349&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10244" title="#10244: bug: &amp;#34;memory barriers unimplemented on this architecture&amp;#34; on ARM pre-ARMv7 (closed: fixed)"&gt;#10244&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8555" title="#8555: feature request: Simplify given `Coercible` constraints (closed: fixed)"&gt;#8555&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8799" title="#8799: feature request: Orientation of given `Coercible` constraints (closed: fixed)"&gt;#8799&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9131" title="#9131: task: Experiment with a dedicated solver for Coercible (closed: fixed)"&gt;#9131&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10396" title="#10396: bug: ApiAnnotatons : AnnDcolon in wrong place for PatBind (closed: fixed)"&gt;#10396&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10354" title="#10354: bug: ApiAnnotations : parens around a context with wildcard loses annotations (closed: fixed)"&gt;#10354&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10278" title="#10278: bug: ApiAnnotations : Nested forall loses forall annotation (closed: fixed)"&gt;#10278&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9899" title="#9899: bug: HEAD: make clean fails to delete libraries/bootstrapping.conf (directory) (closed: duplicate)"&gt;#9899&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/3533" title="#3533: bug: mac installer package deletes old version of ghc (closed: wontfix)"&gt;#3533&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9950" title="#9950: bug: Documentation for InterruptibleFFI contains broken example (closed: fixed)"&gt;#9950&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10092" title="#10092: bug: lex doesn't handle binary literals (closed: invalid)"&gt;#10092&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9950" title="#9950: bug: Documentation for InterruptibleFFI contains broken example (closed: fixed)"&gt;#9950&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10430" title="#10430: bug: openTempFileWithDefaultPermissions has the wrong location name on failure (closed: fixed)"&gt;#10430&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9682" title="#9682: task: Implement &amp;#34;Add bifunctor related classes to base&amp;#34;-Proposal (1/3) (closed: fixed)"&gt;#9682&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9584" title="#9584: bug: Interface file errors (Iface type variable out of scope: k) (closed: wontfix)"&gt;#9584&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10446" title="#10446: bug: Fix error message when variables in a static form are not in scope (closed: fixed)"&gt;#10446&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10410" title="#10410: bug: make install installs haddck.t files (closed: fixed)"&gt;#10410&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10298" title="#10298: bug: Infinite loop when shared libraries are unavailable (closed: duplicate)"&gt;#10298&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10449" title="#10449: bug: Out-of-tree tests broken on MinGW + native Python due to quoting of ... (closed: fixed)"&gt;#10449&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10399" title="#10399: bug: ApiAnnotations tweaks (closed: fixed)"&gt;#10399&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/7695" title="#7695: bug: Hang when locale-archive and gconv-modules are not there (closed: fixed)"&gt;#7695&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10261" title="#10261: bug: Don't build runghc if we don't have GhcWithInterpreter (closed: fixed)"&gt;#10261&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8292" title="#8292: bug: linker_unload test doesn't work on Windows (closed: fixed)"&gt;#8292&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10360" title="#10360: bug: GHC ignores command-line options if *.o and *.hi files exist (closed: invalid)"&gt;#10360&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10126" title="#10126: feature request: Test framework should not assume that GHC tools are in the same ... (closed: fixed)"&gt;#10126&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10317" title="#10317: bug: Event manager: Multishot registrations only fire once (closed: fixed)"&gt;#10317&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10101" title="#10101: bug: ghci :e throws exception after type error (closed: fixed)"&gt;#10101&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10322" title="#10322: bug: In ghci object code loader, linking against the previous temp dylib is ... (closed: fixed)"&gt;#10322&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10313" title="#10313: bug: ApiAnnotations : strings in warnings do not return SourceText (closed: fixed)"&gt;#10313&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10471" title="#10471: bug: Confusing parse error when forgetting &amp;#34;deriving&amp;#34; (closed: duplicate)"&gt;#10471&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10473" title="#10473: bug: Haskell Platform generic linux installer creates incorrect symlinks ... (closed: duplicate)"&gt;#10473&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/7170" title="#7170: bug: Foreign.Concurrent finalizer called twice in some cases (closed: fixed)"&gt;#7170&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10473" title="#10473: bug: Haskell Platform generic linux installer creates incorrect symlinks ... (closed: duplicate)"&gt;#10473&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10423" title="#10423: bug: Can't infer Monad n from (Monad m, m ~ n) (closed: fixed)"&gt;#10423&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10466" title="#10466: bug: Bogus multiple-declaration error in GHCi + Template Haskell (closed: fixed)"&gt;#10466&lt;/a&gt;, &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8695" title="#8695: feature request: Arithmetic overflow from (minBound :: Int) `quot` (-1) (new)"&gt;#8695&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10461" title="#10461: bug: Suggest UnliftedFFITypes when applicable (closed: fixed)"&gt;#10461&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10052" title="#10052: bug: Panic (something to do with floatExpr?) (closed: fixed)"&gt;#10052&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10370" title="#10370: bug: Compile time regression in OpenGLRaw (closed: fixed)"&gt;#10370&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10425" title="#10425: bug: User's guide PDF version: Example with wrong indentation in Section ... (closed: fixed)"&gt;#10425&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10452" title="#10452: task: ApiAnnotations : rationalise tests (closed: fixed)"&gt;#10452&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10474" title="#10474: bug: Suggested options for &amp;#34;Use a bigger heap!&amp;#34; seem wrong (closed: fixed)"&gt;#10474&lt;/a&gt;,
&lt;/p&gt;
</description>
      <category>news</category>
      <category>ghc</category>
    </item>
    <item>
      <title>GHC Weekly News - 2015/05/11</title>
      <dc:creator>thoughtpolice</dc:creator>
      <pubDate>Mon, 11 May 2015 14:49:11 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20150511</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20150511</guid>
      <description>&lt;p&gt;
Hi *,
&lt;/p&gt;
&lt;p&gt;
It's been a few weeks since the last news bulletin - this is the result of mostly quietness on behalf of the list and developers, and some sickness on behalf of your editor for several days there. But now there's actually some things to write here!
&lt;/p&gt;
&lt;p&gt;
The past few weeks, GHC HQ has been having some quiet meetings mostly about bugfixes for a 7.10.2 release - as well as noodling about compiler performance. Austin has begun compiling his preliminary notes on the wiki, under the &lt;a class="wiki" href="http://ghc.haskell.org/trac/ghc/wiki/CompilerPerformance"&gt;CompilerPerformance&lt;/a&gt; page, where we'll be trying to keep track of the ongoing performance story. Hopefully, GHC 7.12.1 will boast a bit better performance numbers.
&lt;/p&gt;
&lt;p&gt;
There are a lot of users who are interested in this particular pain point, so please file tickets and CC yourself on bugs (like &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10370" title="#10370: bug: Compile time regression in OpenGLRaw (closed: fixed)"&gt;#10370&lt;/a&gt;), or feel free to help out!
&lt;/p&gt;
&lt;h2 id="a7.10.2status"&gt;7.10.2 status&lt;/h2&gt;
&lt;p&gt;
There's been a bit of chatter about the lists about something on many peoples mind: the release of GHC 7.10.2. Most prominently, Mark Lentczner popped in to ask when the next GHC release will happen - in particular, he'd like to make a Haskell Platform release in lockstep with it (see below for a link to Mark's email).
&lt;/p&gt;
&lt;p&gt;
Until recently, the actual desire for 7.10.2 wasn't totally clear, and at this point, GHC HQ hasn't firmly committed to the 7.10.2 release date. But if &lt;a class="closed milestone" href="http://ghc.haskell.org/trac/ghc/milestone/7.10.2" title="Completed 3 years ago (Jul 29, 2015 12:00:00 PM)"&gt;milestone:7.10.2&lt;/a&gt; is any indicator, we've already closed over three dozen bugs, several of them high priority - and they keep coming in. So it seems likely people will want these fixes in their hands relatively soon.
&lt;/p&gt;
&lt;p&gt;
Just remember: &lt;strong&gt;if you need a fix for 7.10.2&lt;/strong&gt;, or have a bug you need us to look at, please email the &lt;code&gt;ghc-devs&lt;/code&gt; list, file a ticket, and get our attention! Just be sure to set the milestone to 7.10.2.
&lt;/p&gt;
&lt;h2 id="Listchatter"&gt;List chatter&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Herbert Valerio Riedel opened an RFC about a regression in GHC 7.10 relating to the update to Unicode 7. Any input from users of international languages or unicode users would be appreciated! &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-May/008930.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-May/008930.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Herbert Valerio Riedel also asked about a new C pre-processor implementation for GHC - but in particular, adopting the extant &lt;code&gt;cpphs&lt;/code&gt; into the GHC codebase for this task itself. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-May/008934.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-May/008934.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Austin Seipp emailed &lt;code&gt;ghc-devs&lt;/code&gt; about the HCAR report, for which the GHC entry is due May 17th! Developers should get their edits in quickly. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-May/008939.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-May/008939.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Joachim Breitner asks if the branchless implementation for our literal cases are worth it for their complexity. There were some interesting responses, including some remarks on the V8 JavaScript compiler. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008852.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008852.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Niklas Hambüchen announced that he's backported the recent lightweight stack-trace support in GHC HEAD to GHC 7.10 and GHC 7.8 - meaning that users of these stable release can have informative call stack traces, even without profiling! FP Complete was interested in this feature, so they'd probably love to hear user input. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008862.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008862.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;David Terei has written up a proposal on reconciling the existence of Roles with Safe Haskell, which caused us a lot of problems during the 7.8 release cycle. In particular, concerning the ability to break module abstractions and requiring programmers to safeguard abstractions through careful use of roles - and David's written a proposal to address that. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008902.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008902.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Mark Lentczner started a thread about the 7.10.2 release schedule - because this time, he wants to do a concurrent Haskell Platform release! The thread ended up with a good amount of discussion concerning if 7.10.2 is even needed - but at this rate, it looks like it will ship sometime soon. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-May/008904.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-May/008904.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Mateusz Kowalczyk posted to &lt;code&gt;ghc-devs&lt;/code&gt; hoping to get some help with a tricky, long-standing issue: &lt;a class="new ticket" href="http://ghc.haskell.org/trac/ghc/ticket/4012" title="#4012: bug: Compilation results are not deterministic (new)"&gt;#4012&lt;/a&gt;, which concerns the determinism of GHC binaries. It turns out GHC isn't entirely deterministic when it calculates package IDs, meaning things get really bad when you mix prebuilt binary packages for systems. This in particular has become a real problem for the Nix package manager and users of Haskell applications. Mateusz asks if anyone would be willing to help look into it - and a lot of people would appreciate the help! &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-May/008992.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-May/008992.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Noteworthycommits"&gt;Noteworthy commits&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/f2d1b7fcbbc55e33375a7321222a9f4ee189aa38/ghc" title="Support unboxing for GADT product types
Beofre this commit we never ..."&gt;f2d1b7fcbbc55e33375a7321222a9f4ee189aa38&lt;/a&gt; - Support unboxing for GADT product types.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/51af102e5c6c56e0987432aa5a21fe10e24090e9/ghc" title="Better hints when RTS options not available (Trac #9579)
This patch ..."&gt;51af102e5c6c56e0987432aa5a21fe10e24090e9&lt;/a&gt; - Better hints when RTS options are not available.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/524ddbdad5816f77b7b719cac0671eebd3473616/ghc" title="Make sure GHC.List.last is memory-efficient
by eta-expanding its ..."&gt;524ddbdad5816f77b7b719cac0671eebd3473616&lt;/a&gt; - Make sure &lt;code&gt;GHC.List.last&lt;/code&gt; is memory-efficient.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/a1275a762ec04c1159ae37199b1c8f998a5c5499/ghc" title="Improve improvement in the constraint solver
This regrettably-big ..."&gt;a1275a762ec04c1159ae37199b1c8f998a5c5499&lt;/a&gt; - Improve improvement in the constraint solver.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/4efa421327cf127ebefde59b2eece693e37dc3c6/ghc" title="Permit empty closed type families
Fixes #9840 and #10306, and ..."&gt;4efa421327cf127ebefde59b2eece693e37dc3c6&lt;/a&gt; - Permit empty closed type families.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/477f514f6ebcf783810da93e2191e4b6ea65559b/ghc" title="rts: add &amp;#34;-no-rtsopts-suggestions&amp;#34; option
Depends on D767
Setting ..."&gt;477f514f6ebcf783810da93e2191e4b6ea65559b&lt;/a&gt; - rts: add "-no-rtsopts-suggestions" option
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/cf7573b8207bbb17c58612f3345e0b17d74cfb58/ghc" title="More accurate allocation stats for :set +s
The point of this commit ..."&gt;cf7573b8207bbb17c58612f3345e0b17d74cfb58&lt;/a&gt; - More accurate allocation stats for :set +s
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/c4e8097ea8dd6e43eae7aadd6bae7e13272ba74d/ghc" title="Bump base version to 4.8.2.0
This is needed because GHC 7.10.2 ..."&gt;c4e8097ea8dd6e43eae7aadd6bae7e13272ba74d&lt;/a&gt; - Bump base version to &lt;code&gt;4.8.2.0&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/0bbc2ac6dae9ce2838f23a75a6a989826c06f3f5/ghc" title="Use the gold linker for aarch64/linux (#9673)
Like 32 bit Arm, ..."&gt;0bbc2ac6dae9ce2838f23a75a6a989826c06f3f5&lt;/a&gt; - Use the gold linker for aarch64/linux (&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9673" title="#9673: bug: aarch64 7.8.4, 7.10, 7.11: lib/ghc/bin/ghc-pkg --version does not ... (closed: fixed)"&gt;#9673&lt;/a&gt;)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/1e8c9b81a819da8eb54405a029fc33a9f5220321/ghc" title="Enable SMP and GHCi support for Aarch64
Signed-off-by: Erik de Castro ..."&gt;1e8c9b81a819da8eb54405a029fc33a9f5220321&lt;/a&gt; - Enable SMP and GHCi support for AArch64
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Closedtickets"&gt;Closed tickets&lt;/h2&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10293" title="#10293: bug: CallArity taking 20% of compile time (closed: fixed)"&gt;#10293&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10273" title="#10273: bug: haskeline : Cross-compile from Linux to Windows fails due to &amp;lt;Shlobj.h&amp;gt; (closed: fixed)"&gt;#10273&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10021" title="#10021: feature request: Add &amp;#34;Error:&amp;#34; prefix for compile-time error messages (closed: fixed)"&gt;#10021&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10209" title="#10209: bug: parser: opt_kind_sig has incorrect SrcSpan (closed: fixed)"&gt;#10209&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10255" title="#10255: bug: API Annotations : ExprWithTySig processing discards annotated spans (closed: fixed)"&gt;#10255&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10326" title="#10326: bug: ImpredicativeTypes: Unable to use in Functor etc.. (closed: wontfix)"&gt;#10326&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9745" title="#9745: bug: qual_pkg panic with template haskell (closed: duplicate)"&gt;#9745&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10314" title="#10314: bug: ApiAnnotations: mkHsForAllTy discards parens (closed: invalid)"&gt;#10314&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8928" title="#8928: bug: 64-bit statically linked binary consumes all memory while spinning on ... (closed: duplicate)"&gt;#8928&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8743" title="#8743: bug: The impossible happened : Prelude.(!!): index too large (closed: fixed)"&gt;#8743&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10182" title="#10182: bug: lookupIfaceGlobal crash with SOURCE import (closed: fixed)"&gt;#10182&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10281" title="#10281: bug: Type error with Rank-n-types (closed: fixed)"&gt;#10281&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10325" title="#10325: bug: Clearify status of ImpredicativeTypes Extension (closed: fixed)"&gt;#10325&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10297" title="#10297: feature request: Floating instance for Data.Fixed (closed: wontfix)"&gt;#10297&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10292" title="#10292: bug: Validate fails on armhf-linux (closed: duplicate)"&gt;#10292&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10304" title="#10304: task: Bump Cabal submodule (closed: fixed)"&gt;#10304&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10260" title="#10260: bug: last uses too much space with optimizations disabled (closed: fixed)"&gt;#10260&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9204" title="#9204: bug: Conflicting definition in hs-boot file (closed: fixed)"&gt;#9204&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10121" title="#10121: bug: operational semantics is incomplete? (closed: fixed)"&gt;#10121&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10329" title="#10329: bug: ghc-7.10 is configured to use llvm-3.6 but only compiles with llvm-3.5 (closed: fixed)"&gt;#10329&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9920" title="#9920: bug: Segfault in arm binary with llvm 3.5 (closed: fixed)"&gt;#9920&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10308" title="#10308: bug: GHC 7.10 does not export GHC.Event.Lifetime (closed: fixed)"&gt;#10308&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10234" title="#10234: bug: armhf : Validate fails during bindisttest configure (closed: fixed)"&gt;#10234&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10356" title="#10356: bug: Couldn't match type ‘a’ with ‘Int’ / ‘a’ is untouchable / inside the ... (closed: duplicate)"&gt;#10356&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10351" title="#10351: bug: Inferred type is rejected (closed: fixed)"&gt;#10351&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10364" title="#10364: feature request: Feature request: Add support for FMA (closed: wontfix)"&gt;#10364&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9564" title="#9564: bug: Floating point subnormals overrounded on output (closed: invalid)"&gt;#9564&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10306" title="#10306: bug: Calling reify on Any or built-in type families causes panic (closed: fixed)"&gt;#10306&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10108" title="#10108: bug: Dramatic slowdown with -O2 bytestream and list streams combined. (closed: invalid)"&gt;#10108&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9581" title="#9581: bug: Parse error in multiline case expression inside let inside do block (closed: invalid)"&gt;#9581&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10369" title="#10369: bug: arm binaries have an executable stack (closed: fixed)"&gt;#10369&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9673" title="#9673: bug: aarch64 7.8.4, 7.10, 7.11: lib/ghc/bin/ghc-pkg --version does not ... (closed: fixed)"&gt;#9673&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10288" title="#10288: bug: -flate-dmd-anal triggers &amp;#34;Entered absent arg&amp;#34; (closed: fixed)"&gt;#10288&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10260" title="#10260: bug: last uses too much space with optimizations disabled (closed: fixed)"&gt;#10260&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10363" title="#10363: bug: ApiAnnotations : HsForAllTy discards parens (closed: duplicate)"&gt;#10363&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10315" title="#10315: bug: ApiAnnotations : Empty context loses annotations (closed: duplicate)"&gt;#10315&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10389" title="#10389: bug: ghc: panic! (the 'impossible' happened) when building &amp;#34;bitmap-0.0.2&amp;#34; (closed: duplicate)"&gt;#10389&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9929" title="#9929: bug: New alias handling not compatible with LLVM 3.4 (closed: fixed)"&gt;#9929&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10384" title="#10384: task: &amp;#34;Can't splice the polymorphic local variable&amp;#34; check looks dead (closed: fixed)"&gt;#10384&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10382" title="#10382: feature request: Template Haskell (non-quasi) quotes should work with stage 1 compiler (closed: fixed)"&gt;#10382&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10400" title="#10400: bug: Run time increases by 40% in fractal plotter core loop (closed: invalid)"&gt;#10400&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10256" title="#10256: bug: parser: API Annotations : guardquals1 does not annotate commas properly (closed: fixed)"&gt;#10256&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10254" title="#10254: bug: parser : the API annotation on opt_sig is being discarded (closed: fixed)"&gt;#10254&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10277" title="#10277: bug: ApiAnnotations : lexer discards comment close in nested comment (closed: fixed)"&gt;#10277&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10299" title="#10299: bug: Inconsistent parsing of lifted list constructor (closed: fixed)"&gt;#10299&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10268" title="#10268: bug: ApiAnnotations : quoted type variables missing leading quote (closed: fixed)"&gt;#10268&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10269" title="#10269: bug: ApiAnnotations : RdrHsSyn.isFunLhs discards parentheses (closed: fixed)"&gt;#10269&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10280" title="#10280: bug: ApiAnnotations : AnnComma missing in TupleSection (closed: fixed)"&gt;#10280&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10312" title="#10312: bug: ApiAnnotations: misplaced AnnComma for squals production (closed: fixed)"&gt;#10312&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10209" title="#10209: bug: parser: opt_kind_sig has incorrect SrcSpan (closed: fixed)"&gt;#10209&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10109" title="#10109: bug: Kinds aren't checked in the coverage condition (closed: fixed)"&gt;#10109&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10321" title="#10321: bug: GHC.TypeLits.Nat types no longer fully simplified. (closed: fixed)"&gt;#10321&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10285" title="#10285: bug: Bug in Coerciible (closed: fixed)"&gt;#10285&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9895" title="#9895: feature request: No -mtriple param being passed to opt/llc when cross compiling (closed: fixed)"&gt;#9895&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10395" title="#10395: bug: ghc-7.10 branch : Please cherry-pick 1a4374c1e2 from master (closed: fixed)"&gt;#10395&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10263" title="#10263: bug: Role annotation should never be ambiguous (closed: fixed)"&gt;#10263&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10293" title="#10293: bug: CallArity taking 20% of compile time (closed: fixed)"&gt;#10293&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10210" title="#10210: bug: Documentation link to 7.10.1 migration guide broken (closed: fixed)"&gt;#10210&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10302" title="#10302: bug: 7.10.1 documenation is incorrect wrt supported llvm version (closed: fixed)"&gt;#10302&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10206" title="#10206: bug: Incorrect links are generated for modules in the index of &amp;#34;Haskell ... (closed: fixed)"&gt;#10206&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9858" title="#9858: bug: Typeable instances should be kind-aware (closed: fixed)"&gt;#9858&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10045" title="#10045: bug: type holes related ghc panic (closed: fixed)"&gt;#10045&lt;/a&gt;, and &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9840" title="#9840: feature request: Permit empty closed type families (closed: fixed)"&gt;#9840&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>news</category>
      <category>ghc</category>
    </item>
    <item>
      <title>GHC Weekly News - 2015/04/14</title>
      <dc:creator>thoughtpolice</dc:creator>
      <pubDate>Tue, 14 Apr 2015 17:44:28 GMT</pubDate>
      <link>http://ghc.haskell.org/trac/ghc/blog/weekly20150414</link>
      <guid isPermaLink="true">http://ghc.haskell.org/trac/ghc/blog/weekly20150414</guid>
      <description>&lt;p&gt;
Hi *,
&lt;/p&gt;
&lt;p&gt;
It's been a few weeks since the last news bulletin - your editor
apologizes about that. It's actually been a relatively slow few weeks
here too, and busy-ness outside of GHC has attracted some of my
attention. Despite that, GHC 7.10.1 was released, a new HP alpha is
out, and things are moving along smoothly. Now that the release is
done, things are quitely moving along in &lt;code&gt;HEAD&lt;/code&gt; - with people
committing code with reckless abandon, of course.
&lt;/p&gt;
&lt;p&gt;
This week, GHC HQ met up, but it's been very light since the 7.10.1
release. Currently there isn't anything pushing us to do a 7.10.2
release at least for a few more weeks it looks like - but see below.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We puzzled a bit about the release status of 7.10.2, and thought: it's only holding up people who are depending on it. So, who's depending on it, and what do they need fixed? See below for more.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;We also talked a bit about performance - it seems the compiler has been getting much slower over time since the 7.8.x release series, and it's time to reign it in. Austin will be spending his week investigating a bit of this, and the causes.
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="a7.10.2Status"&gt;7.10.2 Status&lt;/h2&gt;
&lt;p&gt;
So, you may be wondering when the 7.10.2 release is. The trick is it happens when you tell us it should happen!
&lt;/p&gt;
&lt;p&gt;
So far, taking a look at &lt;a class="closed milestone" href="http://ghc.haskell.org/trac/ghc/milestone/7.10.2" title="Completed 3 years ago (Jul 29, 2015 12:00:00 PM)"&gt;milestone:7.10.2&lt;/a&gt;, we've fixed about half the bugs we currently have marked down to fix. But we're probably going to punt some of those - and we're not sure all the ones that are there should be.
&lt;/p&gt;
&lt;p&gt;
So this is a call: &lt;strong&gt;If you need something to be fixed during 7.10.2, please file a ticket, set the milestone, and alert us&lt;/strong&gt;. The sooner the better, because it'll inform us as to when we should release. Emailing &lt;code&gt;ghc-devs@haskell.org&lt;/code&gt; is also a sure-fire way to get our attention.
&lt;/p&gt;
&lt;p&gt;
And remember: you can always find out the latest about the next
release at the Status page (in this case, for 7.10.2) -
&lt;a class="ext-link" href="https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-7.10.2"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-7.10.2&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id="Callforhelp:DocBooktoAsciiDoc"&gt;Call for help: DocBook to AsciiDoc&lt;/h2&gt;
&lt;p&gt;
The GHC team needs some help. A few months ago, we put out a poll to convert our DocBook-based manual to AsciiDoc.
&lt;/p&gt;
&lt;p&gt;
The poll had a mostly lukewarm reception, with the idea that it will A) make life easier for people who frequently modify the users guide, and B) make life easier for people who add things irregularly, as a lower barrier to entry.
&lt;/p&gt;
&lt;p&gt;
It looks like we still &lt;strong&gt;want&lt;/strong&gt; to do this - but alas, many of us don't have time!
&lt;/p&gt;
&lt;p&gt;
So, we're asking the public: Is anyone willing to step up and help here? For example, it may be possible to get a long ways with just &lt;code&gt;pandoc&lt;/code&gt;, but we need someone to finish it - and in return, we'll help along the way!
&lt;/p&gt;
&lt;h2 id="Listchatter"&gt;List chatter&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Austin Seipp announced GHC
7.10.1. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-March/008700.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-March/008700.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Mark Lentczner announced an alpha Haskell Platform
release. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-March/008724.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-March/008724.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;David Macek announced MSYS2 packages for GHC on Windows, and also
asked for some help with continuous windows building - Windows
hackers should help out! &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-March/008735.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-March/008735.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Jan Stolarek reports about increased memory usage with GHC 7.10.1.
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008751.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008751.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Thomas Miedema chimed into a thread started by Karel Gardas about
better parallelizing the GHC build - and hopefully we can get
something good out of
it. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008749.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008749.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Austin Seipp made a call for help on working on and improving the
GHC homepage, and luckily Sergey Bushnyak answered the call and
has helped out!
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008762.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008762.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Ozgun Ataman kicked off a thread about slower compilation times,
with some nasty numbers. It's becoming more clear compiler
performance should be a priority for 7.12, and we've let some
things slip away from us:
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008766.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008766.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;A GHC user, Dave, asked the list about some questions with Cross
Compilation, as he's attempting to get GHC to work natively inside
the Open Embedded build environment. Unfortunately, things haven't
been going well so far, and any input from enterprising hackers is
appreciated:
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008774.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008774.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Dan Aloni has started a discussion about improving GHC's error
messages, spurred by a popular blog post he wrote and posted on
Reddit about some Happy/GHC improvements he's made. This is a
difficult area (error messages in general are hard) to work on, so
thanks to Dan for helping!
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008778.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008778.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Simon Peyton Jones started a discussion about
&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; and Safe Haskell, in particular,
whatever the current status, our documentation doesn't accurately
reflect it! Perhaps someone could help out writing the
documentation based on the current status quo?
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008783.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008783.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Tamar Christina started a thread about replacing &lt;code&gt;ghc-split&lt;/code&gt;, an
old Perl script inside GHC, but he wanted to know: what do we do
about a regex replacement? Mikhail Glushenkov spoke up about a
similar decision the LLVM developers used: to use the OpenBSD
regex implementation. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008785.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008785.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Alan Zimmerman has posted several questions and threads about the
parser and the status of API annotations, which he's been
furiously working on now that GHC 7.10 is being used on
Hackage. Interested onlookers could learn a thing or two!
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008782.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008782.html&lt;/a&gt;
&amp;amp;
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008787.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008787.html&lt;/a&gt;
&amp;amp;
&lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008794.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008794.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Gabor Greif has a question about some seemingly strange behavior
regarding the interaction between poly-kinded &lt;code&gt;data&lt;/code&gt; types and
overlapping instances. Richard sez: this behavior is
expected. &lt;a class="ext-link" href="https://mail.haskell.org/pipermail/ghc-devs/2015-April/008804.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://mail.haskell.org/pipermail/ghc-devs/2015-April/008804.html&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Noteworthycommits"&gt;Noteworthy commits&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/de1160be047790afde4ec76de0a81ba3be0c73fa/ghc" title="Refactor the story around switches (#10137)
This re-implements the ..."&gt;de1160be047790afde4ec76de0a81ba3be0c73fa&lt;/a&gt; - refactor the
story around switch cases (with a code-size improvement)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/995e8c1c8692b60c907c7d2ccea179d52ca8e69e/ghc" title="Drop old integer-gmp-0.5 from GHC source tree
This completes what ..."&gt;995e8c1c8692b60c907c7d2ccea179d52ca8e69e&lt;/a&gt; - drop old
&lt;code&gt;integer-gmp-0.5&lt;/code&gt; source code.
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/59f7a7b6091e9c0564f3f370d09398d8c9cd8ad5/ghc" title="Restore unwind information generation
While we want to reduce the ..."&gt;59f7a7b6091e9c0564f3f370d09398d8c9cd8ad5&lt;/a&gt; - Restore unwind
information generation (fixes DWARF generation)
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/9f0f99fd41ff82cc223d3b682703e508efb564d2/ghc" title="Fix a long-standing bug in the demand analyser
This patch fixes Trac ..."&gt;9f0f99fd41ff82cc223d3b682703e508efb564d2&lt;/a&gt; - Fix an old bug
in the demand analyzer (with some nice compiler performance
boosts).
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Commit &lt;a class="changeset" href="http://ghc.haskell.org/trac/ghc/changeset/a7524eaed33324e2155c47d4a705bef1d70a2b5b/ghc" title="Support for multiple signature files in scope.
Summary:
A common ..."&gt;a7524eaed33324e2155c47d4a705bef1d70a2b5b&lt;/a&gt; - Support for
multiple signature files in scope (Backpack).
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Closedtickets"&gt;Closed tickets&lt;/h2&gt;
&lt;p&gt;
&lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10222" title="#10222: feature request: Data.Foldable should have genericLength (closed: invalid)"&gt;#10222&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10219" title="#10219: bug: ghc -x hspp test.hspp: cannot compile this file to desired target (closed: fixed)"&gt;#10219&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8057" title="#8057: feature request: Warn when supplying version number to package-qualified import (closed: duplicate)"&gt;#8057&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10226" title="#10226: bug: Regression in constraint solver from 7.8 to 7.10 (closed: duplicate)"&gt;#10226&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10220" title="#10220: bug: Imports from `.hspp` and `.hscpp` files  not loaded in --make mode (closed: fixed)"&gt;#10220&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9723" title="#9723: feature request: Give Tab warning only once per file (closed: fixed)"&gt;#9723&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10230" title="#10230: bug: multiline literals doesn't work with CPP extension. (closed: invalid)"&gt;#10230&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10208" title="#10208: bug: libffi issues executable stacks on i386 (closed: fixed)"&gt;#10208&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10236" title="#10236: bug: DWARF unwind info is broken (closed: fixed)"&gt;#10236&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10213" title="#10213: bug: GHC User Guide documentation of -fwarn-tabs is now incorrect (closed: fixed)"&gt;#10213&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10231" title="#10231: bug: TMVar - fmap - orElse clashes in ghc 7.8.4 (closed: worksforme)"&gt;#10231&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10240" title="#10240: bug: Build flavour 'quick-cross' tries to build integer-gmp (closed: invalid)"&gt;#10240&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10243" title="#10243: bug: SrcSpan incorrect for non-alphanumeric VarPat (closed: invalid)"&gt;#10243&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10237" title="#10237: bug: hsc2hs : compiler/ghci/LibFFI.hsc:42 sizeof(ffi_cif) is not an integer (closed: fixed)"&gt;#10237&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10224" title="#10224: bug: Partial type signatures generate typed hole warnings (closed: fixed)"&gt;#10224&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8811" title="#8811: bug: Profiling output jumbled together (closed: fixed)"&gt;#8811&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10197" title="#10197: bug: Release note links to Trac are wrong (closed: duplicate)"&gt;#10197&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10252" title="#10252: feature request: Abstract newtype in hs-boot (closed: worksforme)"&gt;#10252&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9958" title="#9958: bug: System.IO.Error: Fix a documentation link to Control.Exception.Exception (closed: fixed)"&gt;#9958&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10253" title="#10253: bug: Variable name with special characters (closed: invalid)"&gt;#10253&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8248" title="#8248: bug: GHCi should not fail to honour ghci.conf or .ghci if group writable (closed: wontfix)"&gt;#8248&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10207" title="#10207: bug: parser: ParStmt has incorrect SrcSpan (closed: fixed)"&gt;#10207&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10214" title="#10214: bug: parser: TransStmt has incorrect SrcSpan (closed: fixed)"&gt;#10214&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9964" title="#9964: bug: GHC crash with NOINLINE and weird IO stuff (closed: fixed)"&gt;#9964&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10194" title="#10194: bug: Shouldn't this require ImpredicativeTypes? (closed: fixed)"&gt;#10194&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10251" title="#10251: bug: Bad rule generated in pathological cases (closed: fixed)"&gt;#10251&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10188" title="#10188: bug: prefix type-level cons can't be parsed (closed: fixed)"&gt;#10188&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10257" title="#10257: bug: internal error: evacuate: strange closure type 3269 (closed: duplicate)"&gt;#10257&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10247" title="#10247: task: 5x increase in total memory allocation for `prof-doc-fib` test since 2011 (closed: worksforme)"&gt;#10247&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10247" title="#10247: task: 5x increase in total memory allocation for `prof-doc-fib` test since 2011 (closed: worksforme)"&gt;#10247&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9160" title="#9160: bug: Panic: Template variable unbound in rewrite rule (closed: fixed)"&gt;#9160&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10259" title="#10259: bug: HPC code coverage fails (closed: invalid)"&gt;#10259&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9965" title="#9965: bug: getChanContents BlockedIndefinitelyOnMVar on 7.10 RC1 (closed: fixed)"&gt;#9965&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10265" title="#10265: bug: HEAD fails to compile on OS X (closed: fixed)"&gt;#10265&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10264" title="#10264: bug: AArch64 : Installing 7.10.1 fails (closed: duplicate)"&gt;#10264&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10286" title="#10286: bug: native code generator: GHC crash at GHC.Prim SIMD vector (closed: invalid)"&gt;#10286&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10282" title="#10282: bug: Segfault when calling show on an Integer of a certain size (closed: duplicate)"&gt;#10282&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10290" title="#10290: bug: compiling huge HashSet hogs memory (closed: duplicate)"&gt;#10290&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10291" title="#10291: bug: compiling huge HashSet hogs memory (closed: duplicate)"&gt;#10291&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10300" title="#10300: bug: GHC rejects typeclass with associated type (closed: invalid)"&gt;#10300&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/9929" title="#9929: bug: New alias handling not compatible with LLVM 3.4 (closed: fixed)"&gt;#9929&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/8276" title="#8276: bug: Building Haddock documentation panics with perf build on x86_64 Linux (closed: fixed)"&gt;#8276&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10218" title="#10218: bug: GHC creates incorrect code which throws &amp;lt;&amp;lt;loop&amp;gt;&amp;gt; (closed: fixed)"&gt;#10218&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10148" title="#10148: bug: Optimization causes repeated computation (closed: fixed)"&gt;#10148&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10232" title="#10232: bug: versionedAppDir ignores projectVersion from DynFlags (closed: fixed)"&gt;#10232&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10274" title="#10274: bug: foreign import ccall &amp;#34;rand&amp;#34; in System.IO fails on Android (closed: fixed)"&gt;#10274&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10275" title="#10275: bug: LLVM/cross-compilation fixes to be backported (closed: fixed)"&gt;#10275&lt;/a&gt;, &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10195" title="#10195: bug: GHC forgets constraints when matching on GADTs (closed: fixed)"&gt;#10195&lt;/a&gt;, and &lt;a class="closed ticket" href="http://ghc.haskell.org/trac/ghc/ticket/10233" title="#10233: bug: Reexporting GHC.Exts does not export Constraint (closed: fixed)"&gt;#10233&lt;/a&gt;.
&lt;/p&gt;
</description>
      <category>news</category>
      <category>ghc</category>
    </item>
  </channel>
</rss>