<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?>
<feed 
    xmlns='http://www.w3.org/2005/Atom' 
    xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' 
    xmlns:blogger='http://schemas.google.com/blogger/2008' 
    xmlns:georss='http://www.georss.org/georss' 
    xmlns:gd="http://schemas.google.com/g/2005" 
    xmlns:thr='http://purl.org/syndication/thread/1.0'>
    <id>tag:blogger.com,1999:blog-6983287</id>
    <updated>2018-03-06T02:06:28.109-08:00</updated>
    <title type='text'>command center</title>
    <subtitle type='html'></subtitle>
    <link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://commandcenter.blogspot.com/feeds/posts/default'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default'/>
    <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/'/>
    <link rel='hub' href='http://pubsubhubbub.appspot.com/'/>
    <author>
        <name>Rob Pike</name>
        <email>noreply@blogger.com</email>
        <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
    </author>
    <generator version='7.00' uri='http://www.blogger.com'>Blogger</generator>
    <openSearch:totalResults>21</openSearch:totalResults>
    <openSearch:startIndex>1</openSearch:startIndex>
    <openSearch:itemsPerPage>25</openSearch:itemsPerPage>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-1896962476280979373</id>
        <published>2018-02-24T15:36:00.001-08:00</published>
        <updated>2018-02-24T15:36:09.960-08:00</updated>
        <title type='text'>CERN&#39;s iPod-like control devices, from 1973</title>
        <content type='html'>A recent dig through some old papers uncovered &lt;a href=&quot;https://drive.google.com/open?id=1M8PVrZlRFeiA5dFnQ2R-oZ88nsTZ0Ajy&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; CERN memo from 1973 describing controls for the Proton Synchrotron being built at the time. I visited the control room some years later and saw the controls in action, installed on a room-hugging curved console reminiscent of a NASA mission control room. I was so impressed by the devices I asked for a copy of the documentation, written by (one assumes) their designers, F. Beck and B. Stumpe.&lt;br /&gt;&lt;br /&gt;These are like the ur-controls for the iPod and (later) iPhone, but anticipate the music player by almost three decades. In fact, the CERN knob is better than the click wheel: It is programmable to be smooth, indexed, or with variable turning resistance and spring return. It was inspirational to feel how it responded when turned in the various modes.&lt;br /&gt;&lt;br /&gt;Apple is very good at commercializing ideas, but big research institutions such as CERN, erstwhile Xerox PARC and Bell Labs excel at creating the ideas themselves.&lt;br /&gt;&lt;br /&gt;This memo was from a different time, in more ways than one.&lt;br /&gt;&lt;br /&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/1896962476280979373'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/1896962476280979373'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2018/02/cerns-ipod-like-control-devices-from.html' title='CERN&#39;s iPod-like control devices, from 1973'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-2526416546605516466</id>
        <published>2017-12-06T17:49:00.000-08:00</published>
        <updated>2017-12-06T21:13:03.249-08:00</updated>
        <title type='text'>Error handling in Upspin</title>
        <content type='html'>&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The &lt;/span&gt;&lt;a href=&quot;https://upspin.io/&quot; style=&quot;font-family: Georgia, &amp;quot;Times New Roman&amp;quot;, serif;&quot; target=&quot;_blank&quot;&gt;Upspin&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; project uses a custom package, &lt;/span&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;upspin.io/errors&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, to represent error conditions that arise inside the system. These errors satisfy the standard Go &lt;/span&gt;&lt;a href=&quot;https://golang.org/pkg/builtin/#error&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;error&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; interface, but are implemented using a custom type, &lt;/span&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors#Error&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;upspin.io/errors.Error&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, that has properties that have proven valuable to the project.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Here we will demonstrate how the package works and how it is used. The story holds lessons for the larger discussion of error handling in Go.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Motivations&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;A few months into the project, it became clear we needed a consistent approach to error construction, presentation, and handling throughout the code. We decided to implement a custom errors package, and rolled one out in an afternoon. The details have changed a bit but the basic ideas behind the package have endured. These were:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;To make it easy to build informative error messages.&lt;/li&gt;&lt;li&gt;To make errors easy to understand for users.&lt;/li&gt;&lt;li&gt;To make errors helpful as diagnostics for programmers.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;As we developed experience with the package, some other motivations emerged. We&#39;ll talk about these below.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;A tour of the package&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors&quot; target=&quot;_blank&quot;&gt;upspin.io/errors&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; package is imported with the package name &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, and so inside Upspin it takes over the role of Go&#39;s standard &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; package.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;We noticed that the elements that go into an error message in Upspin are all of different types: user names, path names, the kind of error (I/O, permission, etc.) and so on. This provided the starting point for the package, which would build on these different types to construct, represent, and report the errors that arise.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The center of the package is the &lt;/span&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors#Error&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Error&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&amp;nbsp;type, the concrete representation of an Upspin error. It has several fields, any of which may be left unset:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; type Error struct {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Path upspin.PathName&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; User upspin.UserName&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Op&amp;nbsp; Op&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Kind Kind&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Err error&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Path&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; and &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; fields denote the path and user affected by the operation. Note that these are both strings, but have distinct types in Upspin to clarify their usage and to allow the type system to catch certain classes of programming errors.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Op&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; field denotes the operation being performed. It is another string type and typically holds the name of the method or server function reporting the error: &quot;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;client.Lookup&quot;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&quot;dir/server.Glob&quot;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, and so on.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Kind&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; field classifies the error as one of a set of standard conditions (&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Permission&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;IO&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;NotExist&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, &lt;a href=&quot;https://godoc.org/upspin.io/errors#Kind&quot; target=&quot;_blank&quot;&gt;and so on&lt;/a&gt;). It makes it easy to see a concise description of what sort of error occurred, but also provides a hook for interfacing to other systems. For instance, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://godoc.org/upspin.io/cmd/upspinfs&quot; target=&quot;_blank&quot;&gt;upspinfs&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&amp;nbsp;uses the &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Kind&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; field as the key to translation from Upspin errors to Unix error constants such as &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;EPERM&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; and &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;EIO&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The last field, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Err&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, may hold another error value. Often this is an error from another system, such as a file system error from the &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://golang.org/pkg/os/&quot; target=&quot;_blank&quot;&gt;os&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; package or a network error from the &lt;/span&gt;&lt;a href=&quot;https://golang.org/pkg/net/&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;net&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; package. It may also be another &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;upspin.io/errors.Error&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; value, creating a kind of error trace that we will discuss later.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Constructing an Error&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;To facilitate error construction, the package provides a function named &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors#E&quot; target=&quot;_blank&quot;&gt;E&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, which is short and easy to type.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; func E(args ...interface{}) error&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;As the &lt;a href=&quot;https://godoc.org/upspin.io/errors#E&quot; target=&quot;_blank&quot;&gt;doc comment&lt;/a&gt; for the function says, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; builds an error value from its arguments. The type of each argument determines its meaning. The idea is to look at the types of the arguments and assign each argument to the field of the corresponding type in the constructed&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Error&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; struct. There is an obvious correspondence: a &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;PathName&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; goes to &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Error.Path&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, a &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;UserName&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; to &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Error.User&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, and so on.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Let&#39;s look at an example. In typical use, calls to &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;errors.E&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; will arise multiple times within a method, so we define a constant, conventionally called &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;op&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, that will be passed to all &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; calls within the method:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; func (s *Server) Delete(ref upspin.Reference) error {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; const op errors.Op = &quot;server.Delete&quot;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Then through the method we use the constant to prefix each call (although the actual ordering of arguments is irrelevant, by convention &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;op&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; goes first):&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; if err := authorize(user); err != nil {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; return errors.E(op, user, errors.Permission, err)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; method for &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; will format this neatly:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; server.Delete: user ann@example.com: permission denied: user not authorized&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;If the errors nest to multiple levels, redundant fields are suppressed and the nesting is formatted with indentation:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; client.Lookup: ann@example.com/file: item does not exist:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dir/remote(&quot;upspin.example.net:443&quot;).Lookup:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dir/server.Lookup&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Notice that there are multiple operations mentioned in this error message (&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;client.Lookup&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;dir/remote&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;dir/server&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;). We&#39;ll discuss this multiplicity in a later section.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;As another example, sometimes the error is special and is most clearly described at the call site by a plain string. To make this work in the obvious way, the constructor promotes arguments of literal type &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; to a Go &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; type through a mechanism similar to the standard Go function &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://golang.org/pkg/errors/#New&quot;&gt;errors.New&lt;/a&gt;&lt;span id=&quot;goog_1425463653&quot;&gt;&lt;/span&gt;&lt;a href=&quot;https://www.blogger.com/&quot;&gt;&lt;/a&gt;&lt;span id=&quot;goog_1425463654&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;. Thus one can write:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp;errors.E(op, &quot;unexpected failure&quot;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;or&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp;errors.E(op, fmt.Sprintf(&quot;could not succeed after %d tries&quot;, nTries))&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;and have the string be assigned to the &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Err&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; field of the resulting &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Err&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; type. This is a natural and easy way to build special-case errors.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Errors across the wire&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Upspin is a distributed system and so it is critical that communications between Upspin servers preserve the structure of errors. To accomplish this we made Upspin&#39;s RPCs aware of these error types, using the &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;errors&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; package&#39;s &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors#MarshalError&quot; target=&quot;_blank&quot;&gt;MarshalError&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; and &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors#UnmarshalError&quot; target=&quot;_blank&quot;&gt;UnmarshalError&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&amp;nbsp;functions to transcode errors across a network connection. These functions make sure that a client will see all the details that the server provided when it constructed the error.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Consider this error report:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; client.Lookup: ann@example.com/test/file: item does not exist:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;dir/remote(&quot;dir.example.com:443&quot;).Lookup:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;dir/server.Lookup:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;store/remote(&quot;store.example.com:443&quot;).Get:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;fetching https://storage.googleapis.com/bucket/C1AF...: 404 Not Found&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;This is represented by four nested &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;errors.E&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; values.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Reading from the bottom up, the innermost is from the package&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;http://upspin.io/store/remotehttps://godoc.org/upspin.io/store/remote&quot; target=&quot;_blank&quot;&gt;upspin.io/store/remote&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&amp;nbsp;(responsible for taking to remote storage servers). The error indicates that there was a problem fetching an object from storage. That error is constructed with something like this, wrapping an underlying error from the cloud storage provider:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; const op errors.Op = `store/remote(&quot;store.example.com:443&quot;).Get`&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; var resp *http.Response&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; ...&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; return errors.E(op, errors.Sprintf(&quot;fetching %s: %s&quot;, url, resp.Status))&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The next error is from the directory server (package &lt;a href=&quot;https://godoc.org/upspin.io/dir/server&quot; target=&quot;_blank&quot;&gt;upspin.io/dir/server&lt;/a&gt;, our directory server reference implementation), which indicates that the directory server was trying to perform a &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Lookup&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; when the error occurred. That error is constructed like this:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; const op errors.Op = &quot;dir/server.Lookup&quot;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; ...&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; return errors.E(op, pathName, errors.NotExist, err)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;This is the first layer at which a &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Kind&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;errors.NotExist&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;) is added.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Lookup&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; error value is passed across the network (marshaled and unmarshaled along the way), and then the &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://godoc.org/upspin.io/dir/remote&quot; target=&quot;_blank&quot;&gt;upspin.io/dir/remote&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; package (responsible for talking to remote directory servers) wraps it with its own call to &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;errors.E&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; const op errors.Op = &quot;dir/remote.Lookup&quot;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; ...&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; return errors.E(op, pathName, err)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;There is no &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Kind&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; set in this call, so the inner &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Kind&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;errors.NotExist&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;) is lifted up during the construction of this Error struct.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Finally, the &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://godoc.org/upspin.io/client&quot; target=&quot;_blank&quot;&gt;upspin.io/client&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&amp;nbsp;package wraps the error once more:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; const op errors.Op = &quot;client.Lookup&quot;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; ...&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; return errors.E(op, pathName, err)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Preserving the structure of the server&#39;s error permits the client to know programmatically that this is a &quot;not exist&quot; error and that the item in question is &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&quot;ann@example.com/file&quot;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;. The error&#39;s &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors#Error.Error&quot; target=&quot;_blank&quot;&gt;Error&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; method can take advantage of this structure to suppress redundant fields. If the server error were merely an opaque string we would see the path name multiple times in the output.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The critical details (the &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;PathName&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; and &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Kind&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;) are pulled to the top of the error so they are more prominent in the display. The hope is that when seen by a user the first line of the error is usually all that&#39;s needed; the details below that are more useful when further diagnosis is required.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Stepping back and looking at the error display as a unit, we can trace the path the error took from its creation back through various network-connected components to the client. The full picture might help the user but is sure to help the system implementer if the problem is unexpected or unusual.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Users and implementers&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;There is a tension between making errors helpful and concise for the end user versus making them expansive and analytic for the implementer. Too often the implementer wins and the errors are overly verbose, to the point of including stack traces or other overwhelming detail.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Upspin&#39;s errors are an attempt to serve both the users and the implementers. The reported errors are reasonably concise, concentrating on information the user should find helpful. But they also contain internal details such as method names an implementer might find diagnostic but not in a way that overwhelms the user. In practice we find that the tradeoff has worked well.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;In contrast, a stack trace-like error is worse in both respects. The user does not have the context to understand the stack trace, and an implementer shown a stack trace is denied the information that could be presented if the server-side error was passed to the client. This is why Upspin error nesting behaves as an &lt;i&gt;operational&lt;/i&gt; trace, showing the path through the elements of the system, rather than as an &lt;i&gt;execution&lt;/i&gt;&amp;nbsp;trace, showing the path through the code. The distinction is vital.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;For those cases where stack traces would be helpful, we allow the &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;errors&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; package to be built with the &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; tag, which enables them. This works fine, but it&#39;s worth noting that we have almost never used this feature. Instead the default behavior of the package serves well enough that the overhead and ugliness of stack traces are obviated.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Matching errors&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;An unexpected benefit of Upspin&#39;s custom error handling was the ease with which we could write error-dependent tests, as well as write error-sensitive code outside of tests. Two functions in the errors package enable these uses.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The first is a function, called &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors#Is&quot; target=&quot;_blank&quot;&gt;errors.Is&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, that returns a boolean reporting whether the argument is of type &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;*errors.Error&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; and, if so, that its&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Kind&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; field has the specified value.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; func Is(kind Kind, err error) bool&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;This function makes it straightforward for code to change behavior depending on the error condition, such as in the face of a permission error as opposed to a network error:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; if errors.Is(errors.Permission, err) { ... }&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The other function, &lt;/span&gt;&lt;a href=&quot;https://godoc.org/upspin.io/errors#Match&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Match&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, is useful in tests. It was created after we had been using the errors package for a while and found too many of our tests were sensitive to irrelevant details of the errors. For instance, a test might only need to check that there was a permission error opening a particular file, but was sensitive to the exact formatting of the error message.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;After fixing a number of brittle tests like this, we responded by writing a function to report whether the received error, err, matches an error template:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; func Match(template, err error) bool&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The function checks whether the error is of type &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;*errors.Error&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, and if so, whether the fields within equal those within the template. The key is that it checks &lt;i&gt;only&lt;/i&gt; those fields that are non-zero in the template, ignoring the rest.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;For our example described above, one can write:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;&amp;nbsp; if errors.Match(errors.E(errors.Permission, pathName), err) { … }&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;and be unaffected by whatever other properties the error has. We use &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Match&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt; countless times throughout our tests; it has been a boon.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Lessons&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;There is a lot of discussion in the Go community about how to handle errors and it&#39;s important to realize that there is no single answer. No one package or approach can do what&#39;s needed for every program. As was pointed out &lt;a href=&quot;https://blog.golang.org/errors-are-values&quot; target=&quot;_blank&quot;&gt;elsewhere&lt;/a&gt;, errors are just values and can be programmed in different ways to suit different situations.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The Upspin errors package has worked out well for us. We do not advocate that it is the right answer for another system, or even that the approach is right for anyone else. But the package worked well within Upspin and taught us some general lessons worth recording.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The Upspin errors package is modest in size and scope. The original implementation was built in a few hours and the basic design has endured, with a few refinements, since then. A custom error package for another project should be just as easy to create. The specific needs of any given environment should be easy to apply. Don&#39;t be afraid to try; just think a bit first and be willing to experiment. What&#39;s out there now can surely be improved upon when the details of your own project are considered.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;We made sure the error constructor was both easy to use and easy to read. If it were not, programmers would resist using it.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The behavior of the errors package is built in part upon the types intrinsic to the underlying system. This is a small but important point: No general errors package could do what ours does. It truly is a custom package.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Moreover, the use of types to discriminate arguments allowed error construction to be idiomatic and fluid. This was made possible by a combination of the existing types in the system (&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;PathName&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;UserName&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;) and new ones created for the purpose (&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Op&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;Kind&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;). Helper types made error construction clean, safe, and easy. It took a little more work—we had to create the types and use them everywhere, such as through the &quot;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;&quot;&gt;const op&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&quot; idiom—but the payoff was worthwhile.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Finally, we would like to stress the lack of stack traces as part of the error model in Upspin. Instead, the errors package reports the sequence of events, often across the network, that resulted in a problem being delivered to the client. Carefully constructed errors that thread through the operations in the system can be more concise, more descriptive, and more helpful than a simple stack trace.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Errors are for users, not just for programmers.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;i&gt;by Rob Pike and Andrew Gerrand&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/2526416546605516466'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/2526416546605516466'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2017/12/error-handling-in-upspin.html' title='Error handling in Upspin'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-195062566919629025</id>
        <published>2017-10-26T13:00:00.000-07:00</published>
        <updated>2017-10-26T13:00:10.725-07:00</updated>
        <title type='text'>The Upspin manifesto: On the ownership and sharing of data</title>
        <content type='html'>&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Here follows the original &quot;manifesto&quot; from late 2014 proposing the idea for what became &lt;a href=&quot;https://upspin.io/&quot; target=&quot;_blank&quot;&gt;Upspin&lt;/a&gt;. The text has been lightly edited to remove a couple of references to Google-internal systems, with no loss of meaning.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;I&#39;d like to thank Eduardo Pinheiro, Eric Grosse, Dave Presotto and Andrew Gerrand for helping me turn this into a working system, in retrospect remarkably close to the original vision.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: left;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://upspin.io/images/augie.jpg&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;&quot;&gt;&lt;img alt=&quot;Augie&quot; border=&quot;0&quot; data-original-height=&quot;436&quot; data-original-width=&quot;360&quot; height=&quot;320&quot; src=&quot;https://upspin.io/images/augie.jpg&quot; title=&quot;&quot; width=&quot;264&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;Augie image Copyright&amp;nbsp;©&amp;nbsp;2017 Renee French&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;/span&gt; &lt;br /&gt;&lt;h3&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Manifesto&lt;/b&gt;&lt;/span&gt;&lt;/h3&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Outside our laptops, most of us today have no shared file system at work. (There was a time when we did, but it&#39;s long gone.) The world took away our /home folders and moved us to databases, which are not file systems. Thus I can no longer (at least not without clumsy hackery) make my true home directory be where my files are any more. Instead, I am expected to work on some local machine using some web app talking to some database or other external repository to do my actual work. This is mobile phone user interfaces brought to engineering workstations, which has its advantages but also some deep flaws. Most important is the philosophy it represents.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;You don&#39;t own your data any more. One argument is that companies own it, but from a strict user perspective, your &quot;apps&quot; own it. Each item you use in the modern mobile world is coupled to the program that manipulates it. Your Twitter, Facebook, or Google+ program is the only way to access the corresponding feed. Sometimes the boundary is softened within a company—photos in Google+ are available in other Google products—but that is the exception that proves the rule. &lt;i&gt;You&lt;/i&gt; don&#39;t control your data, the programs do.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Yet there are many reasons to want to access data from multiple programs. That is, almost by definition, the Unix model. Unix&#39;s model is largely irrelevant today, but there are still legitimate ways to think about data that are made much too hard by today&#39;s way of working. It&#39;s not necessarily impossible to share data among programs (although it&#39;s often very difficult), but it&#39;s never &lt;i&gt;natural&lt;/i&gt;. There are workarounds like plugin architectures and documented workflows but they just demonstrate that the fundamental idea—sharing data among programs—is not the way we work any more.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;This is backwards. It&#39;s a reversal of the old way we used to work, with a file system that all programs could access equally. The very notion of &quot;download&quot; and &quot;upload&quot; is plain stupid. Data should simply be available to any program with authenticated access rights. And of course for any person with those rights. Sharing between programs and people can be, technologically at least, the same problem, and a solved one.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;This document proposes a modern way to achieve the good properties of the old world: consistent access, understandable data flow, and easy sharing without workarounds. To do this, we go back to the old notion of a file system and make it uniform and global. The result should be a data space in which all people can use all their programs, sharing and collaborating at will in a consistent, intuitive way.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Not downloading, uploading, mailing, tarring, gzipping, plugging in and copying around. Just using. Conceptually: If I want to post a picture on Twitter, I just name the file that holds it. If I want to edit a picture on Twitter using Photoshop, I use the File&amp;gt;Open menu in Photoshop and name the file stored on Twitter, which is easy to discover or even know a priori. (There are security and access questions here, and we&#39;ll come back to those.)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Working in a file system.&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;I want my home directory to be where all my data is. Not just my local files, not just my source code, not just my photos, not just my mail. &lt;i&gt;All&lt;/i&gt; my data. My &quot;phone&quot; should be able to access the same data as my laptop, which should be able to access the same data as the servers. (Ignore access control for the moment.) $HOME should be my home for everything: work, play, life; toy, phone, work, cluster.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;This was how things worked in the old single-machine days but we lost sight of that when networking became universally available. There were network file systems and some research systems used them to provide basically this model, but the arrival of consumer devices, portable computing, and then smartphones eroded the model until every device is its own fiefdom and every program manages its own data through networking. We have a network &lt;i&gt;connecting&lt;/i&gt; devices instead of a network &lt;i&gt;composed&lt;/i&gt; of devices.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The knowledge of how to achieve the old way still exists, and networks are fast and ubiquitous enough to restore the model. From a human point of view, the data is all we care about: my pictures, my mail, my documents. Put those into a globally addressable file system and I can see all my data with equal facility from any device I control. And then, when I want to share with another person, I can name the file (or files or directory) that holds the information I want to share, grant access, and the other person can access it.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The essence here is that the data (if it&#39;s in a single file) has one name that is globally usable to anyone who knows the name and has the permission to evaluate it. Those names might be long and clumsy, but simple name space techniques can make the data work smoothly using local aliasing so that I live in &quot;my&quot; world, you live in your world (also called &quot;my&quot; world from your machines), and the longer, globally unique names only arise when we share, which can be done with a trivial, transparent, easy to use file-system interface.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Note that the goal here is not a new file system to use alongside the existing world. Its purpose is to be the only file system to use. Obviously there will be underlying storage systems, but from the user&#39;s point of view all access is through this system. I edit a source file, compile it, find a problem, point a friend at it; she accesses &lt;i&gt;the same file&lt;/i&gt;, not a copy, to help me understand it. (If she wants a copy, there&#39;s always cp!).&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;This is not a simple thing to do, but I believe it is possible. Here is how I see it being assembled. This discussion will be idealized and skate over a lot of hard stuff. That&#39;s OK; this is a vision, not a design document.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Everyone has a name.&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Each person is identified by a name. To make things simple here, let&#39;s just use an e-mail address. There may be a better idea, but this is sufficient for discussion. It is not a problem to have multiple names (addresses) in this model, since the sharing and access rights will treat the two names as distinct users with whatever sharing rights they choose to use.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Everyone has stable storage in the network.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Each person needs a way to make data accessible to the network, so the storage must live in the network. The easiest way to think of this is like the old network file systems, with per-user storage in the server farm. At a high level, it doesn&#39;t matter what that storage is or how it is structured, as long as it can be used to provide the storage layer for a file-system-like API.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Everyone&#39;s storage server has a name identified by the user&#39;s name.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The storage in the server farm is identified by the user&#39;s name.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Everyone has local storage, but it&#39;s just a cache.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;It&#39;s too expensive to send all file access to the servers, so the local device, whatever it is—laptop, desktop, phone, watch—caches what it needs and goes to the server as needed. Cache protocols are an important part of the implementation; for the point of this discussion, let&#39;s just say they can be designed to work well. That is a critical piece and I have ideas, but put that point aside for now.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The server always knows what devices have cached copies of the files on local storage.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: georgia, &amp;quot;times new roman&amp;quot;, serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: georgia, &amp;quot;times new roman&amp;quot;, serif;&quot;&gt;The cache always knows what the associated server is for each directory file in its cache and maintains consistency within reasonable time boundaries.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The cache implements the API of a full file system. The user lives in this file system for all the user&#39;s own files. As the user moves between devices, caching protocols keep things working.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Everyone&#39;s cache can talk to multiple servers.&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;A user may have multiple servers, perhaps from multiple providers. The same cache and therefore same file system API refers to them all equivalently. Similarly, if a user accesses a different user&#39;s files, the exact same protocol is used, and the result is cached in the same cache the same way. This is federation as architecture.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Every file has a globally unique name.&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Every file is named by this triple: (host address, user name, file path). Access rights aside, any user can address any other user&#39;s file by evaluating the triple. The real access method will be nicer in practice, of course, but this is the gist.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Every file has a potentially unique ACL.&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Although the user interface for access control needs to be very easy, the effect is that each file or directory has an access control list (ACL) that mediates all access to its contents. It will need to be very fine-grained with respect to each of users, files, and rights.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Every user has a local name space.&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The cache/file-system layer contains functionality to bind things, typically directories, identified by such triples into locally nicer-to-use names. An obvious way to think about this is like an NFS mount point for /home, where the remote binding attaches to /home/XXX the component or components in the network that the local user wishes to identify by XXX. For example, Joe might establish /home/jane as a place to see all the (accessible to Joe) pieces of Jane&#39;s world. But it can be much finer-grained than that, to the level of pulling in a single file.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The NFS analogy only goes so far. First, the binding is a lazily-evaluated, multi-valued recipe, not a Unix-like mount. Also, the binding may itself be programmatic, so that there is an element of auto-discovery. Perhaps most important, one can ask any file in the cached local system what its triple is and get its unique name, so when a user wishes to share an item, the triple can be exposed and the remote user can use her locally-defined recipe to construct the renaming to make the item locally accessible. This is not as mysterious or as confusing in practice as it sounds; Plan 9 pretty much worked like this, although not as dynamically.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Everyone&#39;s data becomes addressable.&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Twitter gives you (or anyone you permit) access to your Twitter data by implementing the API, just as the regular, more file-like servers do. The same story applies to any entity that has data it wants to make usable. At some scaling point, it becomes wrong not to play.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Everyone&#39;s data is secure.&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;It remains to be figured out how to do that, I admit, but with a simple, coherent data model that should be achievable.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;Is this a product?&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;The protocols and some of the pieces, particularly what runs on local devices, should certainly be open source, as should a reference server implementation. Companies should be free to provide proprietary implementations to access their data, and should also be free to charge for hosting. A cloud provider could charge hosting fees for the service, perhaps with some free or very cheap tier that would satisfy the common user. There&#39;s money in this space.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;What is this again?&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;What Google Drive should be. What Dropbox should be. What file systems can be. The way we unify our data access across companies, services, programs, and people. The way I want to live and work.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-family: &amp;quot;georgia&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;Never again should someone need to manually copy/upload/download/plugin/workflow/transfer data from one machine to another.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/195062566919629025'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/195062566919629025'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2017/10/the-upspin-manifesto-on-ownership-and.html' title='The Upspin manifesto: On the ownership and sharing of data'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-1012283476006527133</id>
        <published>2017-09-21T15:02:00.001-07:00</published>
        <updated>2017-09-21T15:48:28.668-07:00</updated>
        <title type='text'>Go: Ten years and climbing</title>
        <content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-aGrvoIrHLeE/WcQu3Y2fE_I/AAAAAAAApsw/0lYHJ9InDUAtARMUhf0kBUKxCrEUkmrVgCLcBGAs/s1600/gophers10th.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;758&quot; data-original-width=&quot;644&quot; height=&quot;320&quot; src=&quot;https://1.bp.blogspot.com/-aGrvoIrHLeE/WcQu3Y2fE_I/AAAAAAAApsw/0lYHJ9InDUAtARMUhf0kBUKxCrEUkmrVgCLcBGAs/s320/gophers10th.jpg&quot; width=&quot;271&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-size: xx-small;&quot;&gt;Drawing Copyright&amp;nbsp;&lt;span style=&quot;background-color: white; font-variant-ligatures: no-common-ligatures;&quot;&gt;©2017 &lt;a href=&quot;http://reneefrench.io/&quot; target=&quot;_blank&quot;&gt;Renee French&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;style type=&quot;text/css&quot;&gt;p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px &#39;Lucida Grande Mono550&#39;; color: #000000; background-color: #ffffff} span.s1 {font-variant-ligatures: no-common-ligatures} &lt;/style&gt;  &lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;This week marks the 10th anniversary of the creation of Go.&lt;/span&gt;&lt;/div&gt;&lt;b id=&quot;docs-internal-guid-f05b57f6-a657-6f1c-a48d-0e1bc3931be0&quot; style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The initial discussion was on the afternoon of Thursday, the 20th of September, 2007. That led to an organized meeting between Robert Griesemer, Rob Pike, and Ken Thompson at 2PM the next day in the conference room called Yaounde in Building 43 on Google&#39;s Mountain View campus. The name for the language arose on the 25th, several messages into the first mail thread about the design:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; font-family: &amp;quot;verdana&amp;quot;; font-size: x-small; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    Subject: Re: prog lang discussion      From: Rob &#39;Commander&#39; Pike      Date: Tue, Sep 25, 2007 at 3:12 PM     To: Robert Griesemer, Ken Thompson          i had a couple of thoughts on the drive home.          1. name            &#39;go&#39;. you can invent reasons for this name but it has nice properties.     it&#39;s short, easy to type. tools: goc, gol, goa. if there&#39;s an interactive     debugger/interpreter it could just be called &#39;go&#39;. the suffix is .go     ...&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;(It&#39;s worth stating that the language is called Go; &quot;golang&quot; comes from the web site address (go.com was already a Disney web site) but is not the proper name of the language.)&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The Go project counts its birthday as November 10, 2009, the day it launched as open source, originally on code.google.com before migrating to GitHub a few years later. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;But for now let&#39;s date the language from its conception, two years earlier, which allows us to reach further back, take a longer view, and witness some of the earlier events in its history.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The first big surprise in Go&#39;s development was the receipt of this mail message:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; white-space: pre-wrap;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;    Subject: A gcc frontend for Go&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: black; font-family: &amp;quot;verdana&amp;quot;; vertical-align: baseline;&quot;&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;    From: Ian Lance Taylor      Date: Sat, Jun 7, 2008 at 7:06 PM     To: Robert Griesemer, Rob Pike, Ken Thompson          One of my office-mates pointed me at http://.../go_lang.html .  It     seems like an interesting language, and I threw together a gcc     frontend for it.  It&#39;s missing a lot of features, of course, but it     does compile the prime sieve code on the web page.&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The shocking yet delightful arrival of an ally (Ian) and a second compiler (gccgo) was not only encouraging, it was enabling. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;Having a second implementation of the language was vital to the process of locking down the specification and libraries, helping guarantee the high portability that is part of Go&#39;s &lt;/span&gt;&lt;a href=&quot;https://golang.org/doc/go1compat&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;promise&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Even though his office was not far away, none of us had even met Ian before that mail, but he has been a central player in the design and implementation of the language and its tools ever since.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Russ Cox joined the nascent Go team in 2008 as well, bringing his own bag of tricks. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Russ discovered—that&#39;s the right word—that the generality of Go&#39;s methods meant that a function could have methods, leading to the &lt;a href=&quot;https://golang.org/pkg/net/http/#HandlerFunc&quot; target=&quot;_blank&quot;&gt;http.HandlerFunc&lt;/a&gt; idea, which was an unexpected result for all of us. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;Russ promoted more general ideas too, like the the &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot; target=&quot;_blank&quot;&gt;io.Reader&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/io/#Writer&quot; target=&quot;_blank&quot;&gt;io.Writer&lt;/a&gt; interfaces, which informed the structure of all the I/O libraries.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Jini Kim, who was our product manager for the launch, recruited the security expert Adam Langley to help us get Go out the door. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;Adam did a lot of things for us that are not widely known, including creating the original &lt;a href=&quot;https://golang.org/&quot;&gt;golang.org&lt;/a&gt; web page and the &lt;a href=&quot;https://build.golang.org/&quot; target=&quot;_blank&quot;&gt;build dashboard&lt;/a&gt;, but of course his biggest contribution was in the cryptographic libraries. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;At first, they seemed disproportionate in both size and complexity, at least to some of us, but they enabled so much important networking and security software later that they become a crucial part of the Go story. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;Network infrastructure companies like &lt;/span&gt;&lt;a href=&quot;https://www.cloudflare.com/&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;Cloudflare&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt; lean heavily on Adam&#39;s work in Go, and the internet is better for it. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;So is Go, and we thank him.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;In fact a number of companies started to play with Go early on, particularly startups. &lt;/span&gt;&lt;span style=&quot;color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Some of those became powerhouses of cloud computing. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;One such startup, now called &lt;/span&gt;&lt;a href=&quot;https://www.docker.com/&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;, used Go and catalyzed the container industry for computing, which then led to other efforts such as &lt;/span&gt;&lt;a href=&quot;https://kubernetes.io/&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;Today it&#39;s fair to say that Go is the language of containers, another completely unexpected result.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Go&#39;s role in cloud computing is even bigger, though. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;In March of 2014 Donnie Berkholz, writing for &lt;/span&gt;&lt;a href=&quot;https://redmonk.com/&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;RedMonk&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;http://redmonk.com/dberkholz/2014/03/18/go-the-emerging-language-of-cloud-infrastructure/&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;claimed&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt; that Go was &quot;the emerging language of cloud infrastructure&quot;. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;Around the same time, Derek Collison of &lt;a href=&quot;https://www.apcera.com/&quot; target=&quot;_blank&quot;&gt;Apcera&lt;/a&gt; stated that Go was already the language of the cloud. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;That might not have been quite true then, but as the word &quot;emerging&quot; used by Berkholz implied, it was becoming true.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Today, Go &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;i&gt;is&lt;/i&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; the language of the cloud, and to think that a language only ten years old has come to dominate such a large and growing industry is the kind of success one can only dream of. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;And if you think &quot;dominate&quot; is too strong a word, take a look at the internet inside China. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;For a while, the huge usage of Go in China signaled to us by the &lt;/span&gt;&lt;a href=&quot;https://trends.google.com/trends/explore?q=golang&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;Google trends graph&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt; seemed some sort of mistake, but as anyone who has been to the Go conferences in China can attest, the measurements are real. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;Go is huge in China.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;In short, ten years of travel with the language have brought us past many milestones. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;The most astonishing is at our current position: a &lt;/span&gt;&lt;a href=&quot;https://research.swtch.com/gophercount&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;conservative estimate&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;suggests there are at least half a million Go programmers. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;When the mail message naming Go was sent, the idea of there being half a million gophers would have sounded preposterous. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;Yet here we are, and the number continues to grow.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Speaking of gophers, it&#39;s been fun to watch how &lt;a href=&quot;http://reneefrench.io/&quot; target=&quot;_blank&quot;&gt;Renee French&lt;/a&gt;&#39;s idea for a mascot, the Go gopher, became not only a much loved creation but also a symbol for Go programmers everywhere. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;Many of the biggest Go conferences are called GopherCons as they gather together gophers from all over the world.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Gopher conferences are taking off. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;The &lt;/span&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLE7tQUdRKcyb-k4TMNm2K59-sVlUJumw7&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;first one&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt; was only three years ago, yet today there are many, all around the world, plus countless smaller local &quot;&lt;/span&gt;&lt;a href=&quot;https://www.meetup.com/topics/golang/&quot; style=&quot;font-family: Verdana; font-size: 11pt; white-space: pre-wrap;&quot; target=&quot;_blank&quot;&gt;meetups&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;&quot;. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;On any given day, there is more likely than not a group of gophers meeting somewhere in the world to share ideas.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Looking back over ten years of Go design and development, it is astounding to reflect on the growth of the Go community. &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;The number of conferences and meetups, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;the long and ever-increasing list of contributors to the Go project, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;the profusion of open source repositories hosting Go code, &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; white-space: pre-wrap;&quot;&gt;the number of companies using Go, some exclusively: these are all astonishing to contemplate.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;For the three of us, Robert, Rob, and Ken, who just wanted &amp;nbsp;to make our programming lives easier, it&#39;s incredibly gratifying to witness what our work has started.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;What will the next ten years bring?&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;verdana&amp;quot;; font-size: 11pt; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;i&gt;- Rob Pike, with Robert Griesemer and Ken Thompson&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;style type=&quot;text/css&quot;&gt;p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px &#39;Lucida Grande Mono550&#39;; color: #000000; background-color: #ffffff} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px &#39;Lucida Grande Mono550&#39;; color: #000000; background-color: #ffffff; min-height: 16.0px} span.s1 {font-variant-ligatures: no-common-ligatures} &lt;/style&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/1012283476006527133'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/1012283476006527133'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2017/09/go-ten-years-and-climbing.html' title='Go: Ten years and climbing'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
        <media:thumbnail 
            xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-aGrvoIrHLeE/WcQu3Y2fE_I/AAAAAAAApsw/0lYHJ9InDUAtARMUhf0kBUKxCrEUkmrVgCLcBGAs/s72-c/gophers10th.jpg" height="72" width="72"/>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-6571054115977407253</id>
        <published>2017-02-25T09:52:00.001-08:00</published>
        <updated>2017-03-03T14:07:17.683-08:00</updated>
        <title type='text'>The power of role models</title>
        <content type='html'>&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;I spent a few days a while back in a board meeting for a national astronomy organization and noticed a property of the population in that room: Out of about 40 people, about a third were women. And these were powerful women, too: professors, observatory directors and the like. Nor were they wallflowers. Their contributions to the meeting exceeded their proportion.&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;In my long career, I had never before been in a room like that, and the difference in tone, conversation, respect, and professionalism was unlike any I have experienced. I can&#39;t prove it was the presence of women that made the difference - it could just be that astronomers are better people all around, a possibility I cannot really refute - but it seemed to me that the difference stemmed from the demographics.&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;The meeting was one-third women, but of course in private conversation, when pressed, the women I spoke to complained that things weren&#39;t equal yet. We all have our reference points.&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;But let&#39;s back up for a moment and think about the main point: In a room responsible for overseeing the budget and operation of major astronomical observatories, including things like the Hubble telescope, women played a major role. The contrast with computing is stark.&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;It really got me thinking. At dinner I asked some of the women to speak to me about this, how astronomy became so (relatively) egalitarian. And one topic became clear: role models. Astronomy has a long history of women active in the field, going all the way back to Caroline Herschel in the early 19th century. Women have made huge contributions to the field. Dava Sobel just wrote a &lt;a href=&quot;http://www.penguinrandomhouse.com/books/315726/the-glass-universe-by-dava-sobel/9780670016952/&quot; target=&quot;_blank&quot;&gt;book&lt;/a&gt; about the women who laid the foundations for the discovery of the expansion of the universe. Just a couple of weeks ago, papers ran obituaries of &lt;a href=&quot;https://www.nytimes.com/2016/12/27/science/vera-rubin-astronomist-who-made-the-case-for-dark-matter-dies-at-88.html&quot; target=&quot;_blank&quot;&gt;Vera Rubin&lt;/a&gt;, the remarkable observational astronomer who discovered the evidence for dark matter. I could mention &lt;a href=&quot;https://en.wikipedia.org/wiki/Jocelyn_Bell_Burnell&quot; target=&quot;_blank&quot;&gt;Jocelyn Bell&lt;/a&gt;, whose discovery of pulsars got her advisor a Nobel (sic).&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;The most famous astronomer I met growing up was &lt;a href=&quot;https://en.wikipedia.org/wiki/Helen_Sawyer_Hogg&quot; target=&quot;_blank&quot;&gt;Helen Hogg&lt;/a&gt;, the (adopted) Canadian astronomer at David Dunlap Observatory outside Toronto, who also did a fair bit of what we now call outreach.&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;The women at the meeting spoke of this, a history of women contributing, of role models to look up to, of proof that women can make major contributions to the field.&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;What can computing learn from this?&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;It seems we&#39;re doing it wrong. The best way to improve the representation of women in the field is not to recruit them, important though that is, but to promote them. To create role models. To push them into positions of influence. Women leave computing in large numbers because they don&#39;t see a path up, or because the culture makes them unwelcome. More women excelling in the field, famous women, brilliant women, would be inspiring.&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;Men have the power to help fix those things, but they also should have the courage to cede the stage to women more often, to fight the stupid bias that keeps women from excelling in the field. It may take proactive behavior, like choosing a women over a man when growing your team, just because, or promoting women more freely.&lt;/span&gt;&lt;br /&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent; background-color: #fefefe; color: rgba(0, 0, 0, 0.870588); font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 14px; white-space: pre-wrap;&quot; /&gt;&lt;span style=&quot;background-color: #fefefe; color: rgba(0 , 0 , 0 , 0.870588); font-family: &amp;quot;roboto&amp;quot; , &amp;quot;robotodraft&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; white-space: pre-wrap;&quot;&gt;But as I see it, without something being done to promote female role models, the way things are going computing will still be backwards a hundred years from now.&lt;/span&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/6571054115977407253'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/6571054115977407253'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2017/02/the-power-of-role-models.html' title='The power of role models'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-7208133430377824200</id>
        <published>2014-08-03T14:55:00.001-07:00</published>
        <updated>2014-08-03T15:08:52.489-07:00</updated>
        <title type='text'>Prints</title>
        <content type='html'>Two long-buried caches of photographs came to light last year. One was a stack of cellulose nitrate negatives made on the Scott Antarctic expedition almost a hundred years ago. Over time, they became stuck together into a moldy brick, but it was possible to tease the negatives apart and see what they revealed. You can view the images at the web site of the &lt;a href=&quot;http://www.nzaht.org/AHT/antarctic-photos/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;New Zealand Antarctic Heritage Trust&lt;/a&gt;. The results show ragged edges and mold spots but, even beyond their historical importance, the photographs are evocative and in some cases very beautiful.&lt;br /&gt;&lt;br /&gt;The other cache contained images not quite so old and of less general interest but of personal importance. My mother moved from the house she had occupied for decades into a smaller apartment and while preparing to move she found the proverbial shoe box of old pictures in a closet. Some of the images are from my youth, some from hers, and some even from her parents&#39;. One of the photographs, from 1931, shows my paternal great-grandparents. I never met my paternal grandparents, let alone great-grandparents, so this photograph touches something almost primordial for me. And some of the photographs in the box were even older.&lt;br /&gt;&lt;br /&gt;Due to the miracle of photography, we are able to see over a hundred years into the past. Of course this is not news; all of us have seen 19th century photographs by the pioneers of the medium. By the turn of the 20th century photography was so common that huge numbers of images, from the historical to the mundane, had been created. And sometimes we are lucky enough to chance upon forgotten images that open a window into a past that would otherwise fade from view.&lt;br /&gt;&lt;br /&gt;But such windows are becoming rare. A hundred years from now, there will be far fewer photo caches to find. Although the transition to digital photography has made photos almost unimaginably commonplace—one estimate puts the number of shutter activations at a trillion images worldwide per year—very few of those images become artifacts that can be left in a shoe box.&lt;br /&gt;&lt;br /&gt;We live in what has been named a &lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_dark_age&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Digital Dark Age&lt;/a&gt;. Because digital technology evolves so fast, we are rapidly losing the ability to understand yesterday&#39;s media. As file formats change, software becomes obsolete, and hardware becomes outmoded, old digital files become unreadable and unrecoverable.&lt;br /&gt;&lt;br /&gt;There are many examples of lost information, but here is an illustrative story of disaster narrowly averted. Early development of the Unix operating system, which became the software foundation for the Internet, was done in the late 1960s and early 1970s on Digital Equipment Corporation computers. Backups were made on a magnetic medium called a &lt;a href=&quot;http://en.wikipedia.org/wiki/DECtape&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;DECtape&lt;/a&gt;. By the mid 1970s, DECtape was obsolete and by the 1980s there were no remaining DECtape drives that could read the old backups. The scientists in the original Unix lab had kept a box of old backups under the raised floor of the computer room, but the tapes had spontaneously become unreadable because the device to read them no longer existed in the lab or anywhere else as far as anyone knew. And even if it did, no computer that could run the device was still powered on. Fortunately, around 1990 Paul Vixie and Keith Bostic, working for a different company, stumbled across an old junked DECtape drive and managed to get it up and running again by resurrecting an old computer to connect it to. They contacted the Unix research group and offered one last chance to recover the data on the backup tapes before the computer and DECtape drive were finally decommissioned. Time and resources were limited, but some of the key archival pieces of early Unix development were recovered through this combination of charity and a great deal of luck. This story has a happy ending, but not all digital archives survive. Far from it.&lt;br /&gt;&lt;br /&gt;The problem is that as technology advances, data needs to be curated. Files need to have their formats converted, and then transferred to new media. A backup disk in a box somewhere might be unreadable a few years from now. Its format may be obsolete, the software to read it might not run on current hardware, or the media might have physically decayed. NASA lost a large part of the data collected by the Viking Mars missions because the iron oxide fell off the tapes storing the data.&lt;br /&gt;&lt;br /&gt;Backups are important but they too are temporary, subject to the same problems as the data they attempt to protect. Backup software can become obsolete and media can fail. The same affliction that damaged the Viking tapes also wiped out my personal backup archive; I lost the only copy of my computer work from the 1970s. (It&#39;s worth noting my negatives and prints from the period survived.)&lt;br /&gt;&lt;br /&gt;It&#39;s not just tapes that go bad. Consider CDs and DVDs, media often used for backup. The disks, especially the writable kind use for backups, are very fragile, much more so than the mass-produced read-only kind used to store music and movies. Within a few years, especially in humid environments, the metal film can separate from the backing medium. Even if the backup medium survives, the formats used to store the backups might become obsolete. The software that reads the backups might not run on the next computer one buys. Today, CDs are already becoming relics; many computers today do not even come with a CD or DVD drive. What were once the gold standard for backup are already looking old-fashioned just a few years on. They will be antiquated and obscure a century from now.&lt;br /&gt;&lt;br /&gt;To summarize, digital information requires maintenance. It&#39;s not sufficient to make backups; the backups also need to be maintained, upgraded, transferred, and curated. Without conscientious care, the data of today will be lost forever in a few years. Even with care, it&#39;s possible through software or hardware changes to lose access forever. That shoebox of old backup CDs will be unreadable soon.&lt;br /&gt;&lt;br /&gt;Which brings us back to those old photo caches. They held negatives and prints, physical objects that stored images. They needed no attention, no curating, no updating. They sat untended and forgotten for decades, but through all that time faithfully held their information, waiting for a future discoverer. As a result, we can all see what the Scott Antarctic expedition saw, and I can see what my great-grandparents looked like.&lt;br /&gt;&lt;br /&gt;It is a sad irony that modern technology makes it unlikely that future generations will see the images made today.&lt;br /&gt;&lt;br /&gt;Ask yourself whether your great-grandchildren will be able to see your photographs. If the images exist only as a digital image file, the answer is almost certainly, &quot;No&quot;. If, however, there are physical prints, the odds improve. Those digital images need to be made real to endure. Without a print, a digital photograph has no future.&lt;br /&gt;&lt;br /&gt;We live in a Digital Dark Age, but as individuals we can shine a little light. If you are one of the uncounted photographers who enjoy digital photography, keep in mind the fragility of data. When you have a digital image you care about, for whatever reason, artistic or sentimental, please make a print and put that print away. It will sit quietly in the dark, holding fast, never forgetting, ready to reveal itself to a grateful future generation.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/7208133430377824200'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/7208133430377824200'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2014/08/prints.html' title='Prints'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-4420940212897630400</id>
        <published>2014-01-24T16:35:00.000-08:00</published>
        <updated>2014-02-24T08:59:32.220-08:00</updated>
        <title type='text'>Self-referential functions and the design of options</title>
        <content type='html'>I&#39;ve been trying on and off to find a nice way to deal with setting options in a &lt;a href=&quot;http://golang.org/&quot; target=&quot;_blank&quot;&gt;Go&lt;/a&gt; package I am writing. Options on a type, that is. The package is intricate and there will probably end up being dozens of options. There are many ways to do this kind of thing, but I wanted one that felt nice to use, didn&#39;t require too much API (or at least not too much for the user to absorb), and could grow as needed without bloat.&lt;br /&gt;&lt;br /&gt;I&#39;ve tried most of the obvious ways: option structs, lots of methods, variant constructors, and more, and found them all unsatisfactory. After a bunch of trial versions over the past year or so, and a lot of conversations with other Gophers making suggestions, I&#39;ve finally found one I like. You might like it too. Or you might not, but either way it does show an interesting use of self-referential functions.&lt;br /&gt;&lt;br /&gt;I hope I have your attention now.&lt;br /&gt;&lt;br /&gt;Let&#39;s start with a simple version. We&#39;ll refine it to get to the final version.&lt;br /&gt;&lt;br /&gt;First, we define an &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;option&lt;/span&gt; type. It is a function that takes one argument, the &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Foo&lt;/span&gt; we are operating on.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;type option func(*Foo)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The idea is that an option is implemented as a function we call to set the state of that option. That may seem odd, but there&#39;s a method in the madness.&lt;br /&gt;&lt;br /&gt;Given the option type, we next define an &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Option&lt;/span&gt; method on &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;*Foo&lt;/span&gt; that applies the options it&#39;s passed by calling them as functions. That method is defined in the same package, say &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;pkg&lt;/span&gt;, in which &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Foo&lt;/span&gt; is defined.&lt;br /&gt;&lt;br /&gt;This is Go, so we can make the method variadic and set lots of options in a given call:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// Option sets the options specified.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;func (f *Foo) Option(opts ...option) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;for _, opt := range opts {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;opt(f)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Now to provide an option, we define in &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;pkg&lt;/span&gt;&amp;nbsp;a function with the appropriate name and signature. Let&#39;s say we want to control verbosity by setting an integer value stored in a field of a &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Foo&lt;/span&gt;. We provide the verbosity option by writing a function with the obvious name and have it return an &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;option&lt;/span&gt;, which means a closure; inside that closure we set the field:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// Verbosity sets Foo&#39;s verbosity level to v.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;func Verbosity(v int) option {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;return func(f *Foo) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;f.verbosity = v&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Why return a closure instead of just doing the setting? Because we don&#39;t want the user to have to write the closure and we want the &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Option&lt;/span&gt; method to be nice to use. (Plus there&#39;s more to come....)&lt;br /&gt;&lt;br /&gt;In the client of the package, we can set this option on a &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Foo&lt;/span&gt; object by writing:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;foo.Option(pkg.Verbosity(3))&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;That&#39;s easy and probably good enough for most purposes, but for the package I&#39;m writing, I want to be able to use the option mechanism to set temporary values, which means it would be nice if the &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Option&lt;/span&gt; method could return the previous state. That&#39;s easy: just save it in an empty interface value that is returned by the &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Option&lt;/span&gt; method and the underlying function type. That value flows through the code:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;type option func(*Foo) interface{}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// Verbosity sets Foo&#39;s verbosity level to v.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;func Verbosity(v int) option {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;return func(f *Foo) interface{} {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;previous := f.verbosity&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;f.verbosity = v&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;return previous&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// Option sets the options specified.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// It returns the previous value of the last argument.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;func (f *Foo) Option(opts ...option) (previous interface{}) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;for _, opt := range opts {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;previous = opt(f)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;return previous&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The client can use this the same as before, but if the client also wants to restore a previous value, all that&#39;s needed is to save the return value from the first call, and then restore it.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;prevVerbosity := foo.Option(pkg.Verbosity(3))&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;foo.DoSomeDebugging()&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;foo.Option(pkg.Verbosity(prevVerbosity.(int)))&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The type assertion in the restoring call to &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Option&lt;/span&gt; is clumsy. We can do better if we push a little harder on our design.&lt;br /&gt;&lt;br /&gt;First, redefine an option to be a function that sets a value and returns &lt;i&gt;another option&lt;/i&gt; to restore the previous value.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;type option func(f *Foo) option&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This self-referential function definition is reminiscent of a &lt;a href=&quot;http://www.youtube.com/watch?v=HxaD_trXwRE&quot; target=&quot;_blank&quot;&gt;state machine&lt;/a&gt;. Here we&#39;re using it a little differently: it&#39;s a function that returns its &lt;i&gt;inverse&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Then change the return type (and meaning) of the &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Option&lt;/span&gt;&amp;nbsp;method of &lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;*Foo&lt;/span&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&amp;nbsp;to &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;option&lt;/span&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt; from &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;interface{}&lt;/span&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// Option sets the options specified.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// It returns an option to restore the last arg&#39;s previous value.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;func (f *Foo) Option(opts ...option) (previous option) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;for _, opt := range opts {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;previous = opt(f)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;return previous&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The final piece is the implementation of the actual option functions. Their inner closure must now return an option, not an interface value, and that means it must return a closure to undo itself. But that&#39;s easy: it can just recur to prepare the closure to undo the original! It looks like this:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// Verbosity sets Foo&#39;s verbosity level to v.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;func Verbosity(v int) option {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;return func(f *Foo) option {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;previous := f.verbosity&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;f.verbosity = v&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;return Verbosity(previous)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Note the last line of the inner closure changed from&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;return previous&lt;/span&gt;&lt;br /&gt;to&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;  &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif;&quot;&gt;return Verbosity(previous)&lt;/span&gt;&lt;br /&gt;Instead of just returning the old value, it now calls the surrounding function (&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;Verbosity&lt;/span&gt;) to create the undo closure, and returns that &lt;i&gt;closure&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Now from the client&#39;s view this is all very nice:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;prevVerbosity := foo.Option(pkg.Verbosity(3))&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;foo.DoSomeDebugging()&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;foo.Option(prevVerbosity)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;And finally we take it up one more level, using Go&#39;s &lt;a href=&quot;http://blog.golang.org/defer-panic-and-recover&quot; target=&quot;_blank&quot;&gt;defer&lt;/a&gt; mechanism to tidy it all up in the client:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;func DoSomethingVerbosely(foo *Foo, verbosity int) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// Could combine the next two lines,&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// with some loss of readability.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;prev := foo.Option(pkg.Verbosity(verbosity))&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;defer foo.Option(prev)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;, sans-serif; white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;// ... do some stuff with foo under high verbosity.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Trebuchet MS, sans-serif;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It&#39;s worth noting that since the &quot;verbosity&quot; returned is now a closure, not a verbosity value, the actual previous value is hidden. If you want that value you need a little more magic, but there&#39;s enough magic for now.&lt;/div&gt;&lt;br /&gt;The implementation of all this may seem like overkill but it&#39;s actually just a few lines for each option, and has great generality. Most important, it&#39;s really nice to use from the point of view of the package&#39;s client. I&#39;m finally happy with the design. I&#39;m also happy at the way this uses Go&#39;s closures to achieve its goals with grace.&lt;br /&gt;&lt;br /&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/4420940212897630400'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/4420940212897630400'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html' title='Self-referential functions and the design of options'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-3943410192228257054</id>
        <published>2013-05-01T08:57:00.001-07:00</published>
        <updated>2013-05-01T08:57:04.200-07:00</updated>
        <title type='text'>Eisenbahnnet: Bohr&#39;s trip about spin</title>
        <content type='html'>&lt;br /&gt;The other day I was talking with a friend (yes, I have friends) about the way communication of ideas has changed. The Internet is the obvious advance, but what used to happen when an important new idea needed to be disseminated? As an example of how things used to be, I told him the story of Bohr&#39;s famous train trip.&lt;br /&gt;&lt;br /&gt;In 1925, two students at the University of Leiden, Sem Goudsmit and George Uhlenbeck, realized that the fourth electron quantum number could be explained if the electron had spin. This was a radical idea (a point particle spinning?), and coming from students was doubly suspect. Physicists throughout Europe were excited yet skeptical. When Bohr was planning a trip from Cophenhagen to Leiden for a conference, it seemed an excellent opportunity to talk to the students to help understand if they were right.&lt;br /&gt;&lt;br /&gt;In his book, Inward Bound, Abraham Païs narrates the story as told to him by Bohr twenty years later:&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;Bohr&#39;s train to Leiden made a stop in Hamburg, where he was met by Pauli and Stern who had come to the station to ask him what he thought about spin. Bohr must have said that it was very very interesting (his favorite way of expressing that something was wrong), but he could not see how an electron moving in the electric field of the nucleus could experience the magnetic field necessary for producing fine structure. (As Uhlenbeck said later: &#39;I must say in retrospect that Sem and I in our euphoria had not really appreciated [this] basic difficulty.&#39;) On his arrival in Leiden, Bohr was met at the train by Ehrenfest and Einstein who asked him what he thought about spin. Bohr must have said that it was very very interesting but what about the magnetic field? Ehrenfest replied that Einstein had resolved that. The electron in its rest frame sees a rotating electric field; hence by elementary relativity it also sees a magnetic field. The net result is an effective spin-orbit coupling. Bohr was at once convinced. When told of the factor of two he expressed confidence that this problem would find a natural resolution. He urged Sem and George to write a more detailed note on their work. They did; Bohr added an approving comment.&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;After Leiden Bohr traveled to Goettingen. There he was met at the station by Heisenberg and Jordan who asked what he thought about spin. Bohr replied that it was a great advance and explained about the spin-orbit coupling. Heisenberg remarked that he had heard this remark before but that he could not remember who made it and when. ... On his way home the train stopped at Berlin where Bohr was met at the station by Pauli, who had made the trip from Hamburg for the sole purpose of asking Bohr what he now thought about spin. Bohr said it was a great advance, to which Pauli replied: &#39;eine Neue Kopenhagener Irrlehre&#39; (a new Copenhagen heresy). After his return home Bohr wrote to Ehrenfest that he had become &#39;a prophet of the electron magnet gospel.&#39;&lt;/blockquote&gt;&lt;br /&gt;Sneakernet indeed, or perhaps Eisenbahnnet. The idea of the great physicist carrying precious nuggets of wisdom across Europe is romantic and poignant. It also shows how Bohr&#39;s insight, and the insight of his brilliant colleagues, did the peer review in real time in two train trips. Bohr, Pauli, Stern, Ehrenfest, Einstein, Heisenberg, Jordan, Pauli: What a peer review it was!&lt;br /&gt;&lt;br /&gt;It is one of the greatest oversights of the Nobel committee that Goudsmit and Uhlenbeck were never rewarded. Their colleagues certainly understood the earth-shaking merit of their insight.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/3943410192228257054'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/3943410192228257054'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2013/05/eisenbahnnet-bohrs-trip-about-spin.html' title='Eisenbahnnet: Bohr&#39;s trip about spin'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-8462550624728409907</id>
        <published>2012-09-22T15:55:00.001-07:00</published>
        <updated>2012-09-22T20:33:33.978-07:00</updated>
        <title type='text'>Thank you Apple</title>
        <content type='html'>&lt;br /&gt;Some days, things just don&#39;t work out. Or don&#39;t work.&lt;br /&gt;&lt;h4&gt;Earlier&lt;/h4&gt;I wanted to upgrade (their term, not mine) my iMac from Snow Leopard (10.6) to Lion (10.7). I even had the little USB stick version of the installer, to make it easy. But after spending some time attempting the installation, the Lion installer &quot;app&quot; failed, complaining about SMART errors on the disk.&lt;br /&gt;&lt;br /&gt;Disk Utility indeed reported there were SMART errors, and that the disk hardware needed to be replaced. An ugly start.&lt;br /&gt;&lt;br /&gt;The good news is that in some places, including where I live, Apple will do a house call for service, so I didn&#39;t have to haul the computer to an Apple store on public transit.&lt;br /&gt;&lt;br /&gt;Thank you Apple.&lt;br /&gt;&lt;br /&gt;I called them, scheduled the service for a few days later, and as instructed by Apple (I hardly needed prompting) prepped a backup using Time Machine.&lt;br /&gt;&lt;br /&gt;The day before the repairman was to come to give me a new disk, I made sure the system was fully backed up, for security reasons started a complete erasure of the bad disk (using Disk Utility in target mode from another machine, about which more later), and went to bed.&lt;br /&gt;&lt;h4&gt;The day&lt;/h4&gt;When I got up, I checked that the disk had been erased and headed off to work. As I left the apartment, the ceiling lights in the entryway flickered and then went out: a new bulb was needed. On the way out of the building, I asked the doorman for a replacement bulb. He offered just to replace it for us. We have a good doorman.&lt;br /&gt;&lt;br /&gt;Once at work, things were normal until my cell phone rang about 2pm. It was the Apple repairman, Twinkletoes (some names and details have been changed), calling to tell me he&#39;d be at my place within the hour. Actually, he wasn&#39;t an Apple employee, but a contractor working for Unisys, a name I hadn&#39;t heard in a long time. (Twinkletoes was a name I hadn&#39;t heard for a while either, but that&#39;s another story.) At least here, Apple uses Unisys contractors to do their house calls.&lt;br /&gt;&lt;br /&gt;So I headed home, arriving before Twinkletoes. At the front door, the doorman stopped me. He reported that the problem with the lights was not the bulb, but the wiring. He&#39;d called in an electrician, who had found a problem in the breaker box and fixed it. Everything was good now.&lt;br /&gt;&lt;br /&gt;When I got up to the apartment, I found chaos: the cleaners were mid-job, with carpets rolled up, vacuum cleaners running, and general craziness. Not conducive to work. So I went back down to the lobby with my laptop and sat on the couch, surfing on the free WiFi from the café next door, and waited for Twinkletoes.&lt;br /&gt;&lt;br /&gt;Half an hour later, he arrived and we returned to the apartment. The cleaners were still there but the chaos level had dropped and it wasn&#39;t too hard to work around them. I saw what the inside of an iMac looks like as Twinkletoes swapped out the drive. By the time he was done, the cleaners had left and things had settled down.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-eWOKI4PjbFA/UF4_4v-DPEI/AAAAAAAACZQ/t69_q0Nkj1g/s1600/L1000753.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;300&quot; src=&quot;http://3.bp.blogspot.com/-eWOKI4PjbFA/UF4_4v-DPEI/AAAAAAAACZQ/t69_q0Nkj1g/s400/L1000753.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;The innards of my 27&quot; iMac&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;I had assumed that the replacement drive would come with an installed operating system, but I assumed wrong. (When you assume, you put plum paste on your ass.) I had a Snow Leopard installation DVD, but I was worried: it had failed to work for me a few days earlier when I wanted to boot from it to run fsck on the broken drive. Twinkletoes noticed it had a scratch. I needed another way to boot the machine.&lt;br /&gt;&lt;br /&gt;It had surprised me when Lion came out that the installation was done by an &quot;app&quot;, not as a bootable image. This is an unnecessary complication for those of us that need to maintain machines. Earlier, when updating a different machine, I had learned how painful this could be when the installation app destroyed the boot sector and I needed to reinstall Snow Leopard from DVD, and then upgrade &lt;i&gt;that&lt;/i&gt; to a version of the system recent enough to run the Lion installer app. As will become apparent, had Lion come as a bootable image things might have gone more smoothly.&lt;br /&gt;&lt;br /&gt;Thank you Apple.&lt;br /&gt;&lt;br /&gt;[Note added in post: Several people have told me there&#39;s a bootable image inside the installer. I forgot to mention that I knew that, and there wasn&#39;t. For some reason, the version on the USB stick I have looks different from the downloaded one I checked out a day or two later, and even Twinkletoes couldn&#39;t figure out how to unpack it. Weird.]&lt;br /&gt;&lt;br /&gt;Twinkletoes had an OS image he was willing to let me copy, but I needed to make a bootable drive from it. I had no sufficiently large USB stick—you need a 4GB one you can wipe. However I did have a free, big enough CompactFlash card and a USB reader, so that should do, right? Twinkletoes was unsure but believed it would.&lt;br /&gt;&lt;br /&gt;Using my laptop, I used Disk Utility to create a bootable image on the CF card from Twinkletoes&#39;s disk image. We were ready.&lt;br /&gt;&lt;br /&gt;Plug in the machine, push down the Option key, power on.&lt;br /&gt;&lt;br /&gt;Nothing.&lt;br /&gt;&lt;br /&gt;Turn on the light.&lt;br /&gt;&lt;br /&gt;Nothing.&lt;br /&gt;&lt;br /&gt;No power.&lt;br /&gt;&lt;br /&gt;The cleaners must have tripped a breaker.&lt;br /&gt;&lt;br /&gt;I went to the breaker box and found that all the breakers looked OK. We now had a mystery, because the cleaners had had lights on and were using electric appliances—I saw a vacuum cleaner running—but now there was no power. Was the power off to the building? No: the lights still worked in the kitchen and the oven clock was lit. I called the doorman and asked him to get the electrician back as soon as possible and then, with a little portable lamp, went looking around the apartment for a working socket. I found one, again in the kitchen. The iMac was going to travel after all, if not as far as downtown.&lt;br /&gt;&lt;br /&gt;The machine was moved, plugged in, option-key-downed, and powered on. I selected the CF card to boot from, waited 15 minutes for the installation to come up, only to have the boot fail. CF cards don&#39;t work after all, although the diagnosis of failure is a bit tardy and uninformative.&lt;br /&gt;&lt;br /&gt;Thank you Apple.&lt;br /&gt;&lt;br /&gt;Next idea. My old laptop has FireWire so we could bring the disk up using target mode and then run the installer on the laptop to install Lion on the iMac.&lt;br /&gt;&lt;br /&gt;We did the target mode dance and connected to the newly installed drive, then ran Disk Utility on the laptop to format the drive. Things were starting to look better.&lt;br /&gt;&lt;br /&gt;Next, we put the Lion installer stick into the laptop, which was running a recent version of Snow Leopard.&lt;br /&gt;&lt;br /&gt;Failure again. This time the problem is that the laptop, all of about four years old, is too old to run Lion. It&#39;s got a Core Duo, not a Core 2 Duo, and Lion won&#39;t run on that hardware. Even though Lion doesn&#39;t need to run, only the Lion installer needs to run, the system refuses to help. My other laptop is new enough to run the installer, but it doesn&#39;t have FireWire so it can&#39;t do target mode.&lt;br /&gt;&lt;br /&gt;Thank you Apple. Your aggressive push to retire old technology hurts sometimes, you know? Actually, more than sometimes, but let&#39;s stay on topic.&lt;br /&gt;&lt;br /&gt;Twinkletoes has to leave—he&#39;s been on the job for several hours now—but graciously lends me a USB boot drive he has, asking me to return it by post when I&#39;m done. I thank him profusely and send him away before he is drawn in any deeper.&lt;br /&gt;&lt;br /&gt;Using his boot drive, I was able to bring up the iMac and use the Lion installer stick to get the system to a clean install state. Finally, a computer, although of course all my personal data is over on the backup.&lt;br /&gt;&lt;br /&gt;When a new OS X installation comes up, it presents the option of &quot;migrating&quot; data from an existing system, including from a Time Machine backup. So I went for that option and connected the external drive with the Time Machine backup on it.&lt;br /&gt;&lt;br /&gt;The Migration Assistant presented a list of disks to migrate from. A list of one: the main drive in the machine. It didn&#39;t give me the option of using the Time Machine backup.&lt;br /&gt;&lt;br /&gt;Thank you Apple. You told me to save my machine this way but then I can&#39;t use this backup to recover.&lt;br /&gt;&lt;br /&gt;I called Apple on my cell phone (there&#39;s still no power in the room with the land line&#39;s wireless base station) and explained the situation. The sympathetic but ultimately unhelpful person on the phone said it should work (of course!) and that I should run Software Update and get everything up to the latest version. He reported that there were problems with the Migration Assistant in early versions of the Lion OS, and my copy of the installer was pretty early.&lt;br /&gt;&lt;br /&gt;I started the upgrade process, which would take a couple of hours, and took my laptop back down to the lobby for some free WiFi to kill time. But it&#39;s now evening, the café is closed, and there is no WiFi. Naturally.&lt;br /&gt;&lt;br /&gt;Back to the apartment, grab a book, return to the lobby to wait for the electrician.&lt;br /&gt;&lt;br /&gt;An hour or so later, the electrician arrived and we returned to the apartment to see what was wrong. It was easy to diagnose. He had made a mistake in the fix, in fact a mistake related to what was causing the original problem. The breaker box has a silly design that makes it too easy to break a connection when working in the box, and that&#39;s what had happened. So it was easy to fix and easy to verify that it was fixed, but also easy to understand why it had happened. No excuses, but problem solved and power was now restored.&lt;br /&gt;&lt;br /&gt;The computer was still upgrading but nearly done, so a few minutes later I got to try migrating again. Same result, naturally, and another call to Apple and this time little more than an apology. The unsatisfactory solution: do a clean installation and manually restore what&#39;s important from the Time Machine backup.&lt;br /&gt;&lt;br /&gt;Thank you Apple.&lt;br /&gt;&lt;br /&gt;It was fairly straightforward, if slow, to restore my personal files from the home directory on the backup, but the situation for installed software was dire. Restoring an installed program, either using the ludicrous Time Machine UI or copying the files by hand, is insufficient in most cases to bring back the program because you also need manifests and keys and receipts and whatnot. As a result, things such as iWork (Keynote etc.) and Aperture wouldn&#39;t run. I could copy every piece of data I could find but the apps refused to let me run them. Despite many attempts digging far too deep into the system, I could not get the right pieces back from the Time Machine backup. Worse, the failure modes were appalling: crashes, strange display states, inexplicable non-workiness. A frustating mess, but structured perfectly to belong on this day.&lt;br /&gt;&lt;br /&gt;For peculiar reasons I didn&#39;t have the installation disks for everything handy, so these (expensive!) programs were just gone, even though I had backed up everything as instructed.&lt;br /&gt;&lt;br /&gt;Thank you Apple.&lt;br /&gt;&lt;br /&gt;I did have some installation disks, so for instance I was able to restore Lightroom and Photoshop, but then of course I needed to wait for huge updates to download even though the data needed was already sitting on the backup drive.&lt;br /&gt;&lt;br /&gt;Back on the phone for the other stuff. Because I could prove that I had paid for the software, Apple agreed to send me fresh installation disks for everything of theirs but Aperture, but that would take time. In fact, it took almost a month for the iWork DVD to arrive, which is unacceptably long. I even needed to call twice to remind them before the disks were shipped.&lt;br /&gt;&lt;br /&gt;The Aperture story was more complicated. After a marathon debugging session I managed to get it to start but then it needed the install key to let me do anything. I didn&#39;t have the disk, so I didn&#39;t know the key. Now, Aperture is from part of the company called Pro Tools or something like that, and they have a different way of working. I needed to contact them separately to get Aperture back. It&#39;s important to understand I hadn&#39;t lost my digital images. They were backed up multiple times, including in the network, on the Time Machine backup, and also on an external drive using the separate &quot;vault&quot; mechanism that is one of the best features of Aperture.&lt;br /&gt;&lt;br /&gt;I reached the Aperture people on the phone and after a condensed version of the story convinced them I needed an install key (serial number) to run the version of Aperture I&#39;d copied from the Time Machine backup. I was berated by the person on the phone: Time Machine is not suitable for backing up Aperture databases. (What? Your own company&#39;s backup solution doesn&#39;t know how to back up? Thank you Apple.) After a couple more rounds of abuse, I convinced the person on the phone that a) I was backing up my database as I should, using an Aperture vault and b) it wasn&#39;t the database that was the problem, but the program. I was again told that wasn&#39;t a suitable way to back up (again, What?), at which point I surrendered and just begged for an installation key, which was provided, and I could again run Aperture. This was the only time in the story where the people I was interacting with were not at least sympathetic to my situation. I guess Pro is a synonym for unfriendly.&lt;br /&gt;&lt;br /&gt;Thank you Apple.&lt;br /&gt;&lt;br /&gt;There&#39;s much more to the story. It took weeks to get everything working again properly. The complete failure of Time Machine to back up my computer&#39;s state properly was shocking to me. After this fiasco, I learned about the Lion Recovery App, which everyone who uses Macs should know about, but was not introduced until well after Lion rolled out with its preposterous not-bootable installation setup. The amount of data I already had on my backup disk but that needed to be copied from the net again was laughable. And there were total mysteries, like GMail hanging forever for the first day or so, a problem that may be unrelated or may just be the way life was this day.&lt;br /&gt;&lt;br /&gt;But, well after midnight, worn out, beat up, tired, but with electricity restored and a machine that had a little life in it again, I powered down, took the machine back to my office and started to get ready for bed. Rest was needed and I had had enough of technology for one day.&lt;br /&gt;&lt;h4&gt;One more thing&lt;/h4&gt;Oh yes, one more thing. There&#39;s always one more thing in our technological world.&lt;br /&gt;&lt;br /&gt;I walked into the bathroom for my evening ablutions only to have the toilet seat come off completely in my hand.&lt;br /&gt;&lt;br /&gt;Just because you started it all, even for this,&lt;br /&gt;&lt;br /&gt;Thank you Apple.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/8462550624728409907'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/8462550624728409907'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2012/09/thank-you-apple.html' title='Thank you Apple'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
        <media:thumbnail 
            xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-eWOKI4PjbFA/UF4_4v-DPEI/AAAAAAAACZQ/t69_q0Nkj1g/s72-c/L1000753.jpg" height="72" width="72"/>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-8214930309410995806</id>
        <published>2012-06-25T14:35:00.001-07:00</published>
        <updated>2015-02-04T11:44:39.985-08:00</updated>
        <title type='text'>Less is exponentially more</title>
        <content type='html'>&lt;br /&gt;Here is the text of the talk I gave at the Go SF meeting in June, 2012.&lt;br /&gt;&lt;br /&gt;This is a personal talk. I do not speak for anyone else on the Go team here, although I want to acknowledge right up front that the team is what made and continues to make Go happen. I&#39;d also like to thank the Go SF organizers for giving me the opportunity to talk to you.&lt;br /&gt;&lt;br /&gt;I was asked a few weeks ago, &quot;What was the biggest surprise you encountered rolling out Go?&quot; I knew the answer instantly: Although we expected C++ programmers to see Go as an alternative, instead most Go programmers come from languages like Python and Ruby. Very few come from C++.&lt;br /&gt;&lt;br /&gt;We—Ken, Robert and myself—were C++ programmers when we designed a new language to solve the problems that we thought needed to be solved for the kind of software we wrote. It seems almost paradoxical that other C++ programmers don&#39;t seem to care.&lt;br /&gt;&lt;br /&gt;I&#39;d like to talk today about what prompted us to create Go, and why the result should not have surprised us like this. I promise this will be more about Go than about C++, and that if you don&#39;t know C++ you&#39;ll be able to follow along.&lt;br /&gt;&lt;br /&gt;The answer can be summarized like this: Do you think less is more, or less is less?&lt;br /&gt;&lt;br /&gt;Here is a metaphor, in the form of a true story. &amp;nbsp;Bell Labs centers were originally assigned three-letter numbers: 111 for Physics Research, 127 for Computing Sciences Research, and so on. In the early 1980s a memo came around announcing that as our understanding of research had grown, it had become necessary to add another digit so we could better characterize our work. So our center became 1127. Ron Hardin joked, half-seriously, that if we really understood our world better, we could drop a digit and go down from 127 to just 27. Of course management didn&#39;t get the joke, nor were they expected to, but I think there&#39;s wisdom in it. Less can be more. The better you understand, the pithier you can be.&lt;br /&gt;&lt;br /&gt;Keep that idea in mind.&lt;br /&gt;&lt;br /&gt;Back around September 2007, I was doing some minor but central work on an enormous Google C++ program, one you&#39;ve all interacted with, and my compilations were taking about 45 minutes on our huge distributed compile cluster. An announcement came around that there was going to be a talk presented by a couple of Google employees serving on the C++ standards committee. They were going to tell us what was coming in C++0x, as it was called at the time. (It&#39;s now known as C++11).&lt;br /&gt;&lt;br /&gt;In the span of an hour at that talk we heard about something like 35 new features that were being planned. In fact there were many more, but only 35 were described in the talk. Some of the features were minor, of course, but the ones in the talk were at least significant enough to call out. Some were very subtle and hard to understand, like rvalue references, while others are especially C++-like, such as variadic templates, and some others are just crazy, like user-defined literals.&lt;br /&gt;&lt;br /&gt;At this point I asked myself a question: Did the C++ committee really believe that was wrong with C++ was that it didn&#39;t have enough features? Surely, in a variant of Ron Hardin&#39;s joke, it would be a greater achievement to simplify the language rather than to add to it. Of course, that&#39;s ridiculous, but keep the idea in mind.&lt;br /&gt;&lt;br /&gt;Just a few months before that C++ talk I had given a talk myself, which you can see on &lt;a href=&quot;https://www.youtube.com/watch?v=hB05UFqOtFA&quot; target=&quot;_blank&quot;&gt;YouTube&lt;/a&gt;, about a toy concurrent language I had built way back in the 1980s. That language was called &lt;a href=&quot;http://swtch.com/~rsc/thread/newsqueak.pdf&quot;&gt;Newsqueak&lt;/a&gt;&amp;nbsp;and of course it is a precursor to Go.&lt;br /&gt;&lt;br /&gt;I gave that talk because there were ideas in Newsqueak that I missed in my work at Google and I had been thinking about them again. &amp;nbsp;I was convinced they would make it easier to write server code and Google could really benefit from that.&lt;br /&gt;&lt;br /&gt;I actually tried and failed to find a way to bring the ideas to C++. It was too difficult to couple the concurrent operations with C++&#39;s control structures, and in turn that made it too hard to see the real advantages. Plus C++ just made it all seem too cumbersome, although I admit I was never truly facile in the language. So I abandoned the idea.&lt;br /&gt;&lt;br /&gt;But the C++0x talk got me thinking again. &amp;nbsp;One thing that really bothered me—and I think Ken and Robert as well—was the new C++ memory model with atomic types. It just felt wrong to put such a microscopically-defined set of details into an already over-burdened type system. It also seemed short-sighted, since it&#39;s likely that hardware will change significantly in the next decade and it would be unwise to couple the language too tightly to today&#39;s hardware.&lt;br /&gt;&lt;br /&gt;We returned to our offices after the talk. I started another compilation, turned my chair around to face Robert, and started asking pointed questions. Before the compilation was done, we&#39;d roped Ken in and had decided to do something. We did not want to be writing in C++ forever, and we—me especially—wanted to have concurrency at my fingertips when writing Google code. We also wanted to address the problem of &quot;programming in the large&quot; head on, about which more later.&lt;br /&gt;&lt;br /&gt;We wrote on the white board a bunch of stuff that we wanted, desiderata if you will. We thought big, ignoring detailed syntax and semantics and focusing on the big picture.&lt;br /&gt;&lt;br /&gt;I still have a fascinating mail thread from that week. Here are a couple of excerpts:&lt;br /&gt;&lt;br /&gt;Robert: &lt;i&gt;Starting point: C, fix some obvious flaws, remove crud, add a few missing features.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Rob: &lt;i&gt;name: &#39;go&#39;. &amp;nbsp;you can invent reasons for this name but it has nice properties. it&#39;s short, easy to type. tools: goc, gol, goa. &amp;nbsp;if there&#39;s an interactive debugger/interpreter it could just be called &#39;go&#39;. &amp;nbsp;the suffix is .go.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Robert &lt;i&gt;Empty interfaces: interface {}. These are implemented by all interfaces, and thus this could take the place of void*.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;We didn&#39;t figure it all out right away. For instance, it took us over a year to figure out arrays and slices. But a significant amount of the flavor of the language emerged in that first couple of days.&lt;br /&gt;&lt;br /&gt;Notice that Robert said C was the starting point, not C++. I&#39;m not certain but I believe he meant C proper, especially because Ken was there. But it&#39;s also true that, in the end, we didn&#39;t really start from C. We built from scratch, borrowing only minor things like operators and brace brackets and a few common keywords. (And of course we also borrowed ideas from other languages we knew.) In any case, I see now that we reacted to C++ by going back down to basics, breaking it all down and starting over. We weren&#39;t trying to design a better C++, or even a better C. It was to be a better language overall for the kind of software we cared about.&lt;br /&gt;&lt;br /&gt;In the end of course it came out quite different from either C or C++. More different even than many realize. I made a list of significant simplifications in Go over C and C++:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;regular syntax (don&#39;t need a symbol table to parse)&lt;/li&gt;&lt;li&gt;garbage collection (only)&lt;/li&gt;&lt;li&gt;no header files&lt;/li&gt;&lt;li&gt;explicit dependencies&lt;/li&gt;&lt;li&gt;no circular dependencies&lt;/li&gt;&lt;li&gt;constants are just numbers&lt;/li&gt;&lt;li&gt;int and int32 are distinct types&lt;/li&gt;&lt;li&gt;letter case sets visibility&lt;/li&gt;&lt;li&gt;methods for any type (no classes)&lt;/li&gt;&lt;li&gt;no subtype inheritance (no subclasses)&lt;/li&gt;&lt;li&gt;package-level initialization and well-defined order of initialization&lt;/li&gt;&lt;li&gt;files compiled together in a package&lt;/li&gt;&lt;li&gt;package-level globals presented in any order&lt;/li&gt;&lt;li&gt;no arithmetic conversions (constants help)&lt;/li&gt;&lt;li&gt;interfaces are implicit (no &quot;implements&quot; declaration)&lt;/li&gt;&lt;li&gt;embedding (no promotion to superclass)&lt;/li&gt;&lt;li&gt;methods are declared as functions (no special location)&lt;/li&gt;&lt;li&gt;methods are just functions&lt;/li&gt;&lt;li&gt;interfaces are just methods (no data)&lt;/li&gt;&lt;li&gt;methods match by name only (not by type)&lt;/li&gt;&lt;li&gt;no constructors or destructors&lt;/li&gt;&lt;li&gt;postincrement and postdecrement are statements, not expressions&lt;/li&gt;&lt;li&gt;no preincrement or predecrement&lt;/li&gt;&lt;li&gt;assignment is not an expression&lt;/li&gt;&lt;li&gt;evaluation order defined in assignment, function call (no &quot;sequence point&quot;)&lt;/li&gt;&lt;li&gt;no pointer arithmetic&lt;/li&gt;&lt;li&gt;memory is always zeroed&lt;/li&gt;&lt;li&gt;legal to take address of local variable&lt;/li&gt;&lt;li&gt;no &quot;this&quot; in methods&lt;/li&gt;&lt;li&gt;segmented stacks&lt;/li&gt;&lt;li&gt;no const or other type annotations&lt;/li&gt;&lt;li&gt;no templates&lt;/li&gt;&lt;li&gt;no exceptions&lt;/li&gt;&lt;li&gt;builtin string, slice, map&lt;/li&gt;&lt;li&gt;array bounds checking&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;And yet, with that long list of simplifications and missing pieces, Go is, I believe, more expressive than C or C++. Less can be more.&lt;br /&gt;&lt;br /&gt;But you can&#39;t take out everything. You need building blocks such as an idea about how types behave, and syntax that works well in practice, and some ineffable thing that makes libraries interoperate well.&lt;br /&gt;&lt;br /&gt;We also added some things that were not in C or C++, like slices and maps, composite literals, expressions at the top level of the file (which is a huge thing that mostly goes unremarked), reflection, garbage collection, and so on. Concurrency, too, naturally.&lt;br /&gt;&lt;br /&gt;One thing that is conspicuously absent is of course a type hierarchy. Allow me to be rude about that for a minute.&lt;br /&gt;&lt;br /&gt;Early in the rollout of Go I was told by someone that he could not imagine working in a language without generic types. As I have reported elsewhere, I found that an odd remark.&lt;br /&gt;&lt;br /&gt;To be fair he was probably saying in his own way that he really liked what the STL does for him in C++. For the purpose of argument, though, let&#39;s take his claim at face value.&lt;br /&gt;&lt;br /&gt;What it says is that he finds writing containers like lists of ints and maps of strings an unbearable burden. I find that an odd claim. I spend very little of my programming time struggling with those issues, even in languages without generic types.&lt;br /&gt;&lt;br /&gt;But more important, what it says is that &lt;i&gt;types&lt;/i&gt; are the way to lift that burden. &lt;i&gt;Types&lt;/i&gt;. Not polymorphic functions or language primitives or helpers of other kinds, but &lt;i&gt;types&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;That&#39;s the detail that sticks with me.&lt;br /&gt;&lt;br /&gt;Programmers who come to Go from C++ and Java miss the idea of programming with types, particularly inheritance and subclassing and all that. Perhaps I&#39;m a philistine about types but I&#39;ve never found that model particularly expressive.&lt;br /&gt;&lt;br /&gt;My late friend Alain Fournier once told me that he considered the lowest form of academic work to be taxonomy. And you know what? Type hierarchies are just taxonomy. You need to decide what piece goes in what box, every type&#39;s parent, whether A inherits from B or B from A. &amp;nbsp;Is a sortable array an array that sorts or a sorter represented by an array? If you believe that types address all design issues you must make that decision.&lt;br /&gt;&lt;br /&gt;I believe that&#39;s a preposterous way to think about programming. What matters isn&#39;t the ancestor relations between things but what they can do for you.&lt;br /&gt;&lt;br /&gt;That, of course, is where interfaces come into Go. But they&#39;re part of a bigger picture, the true Go philosophy.&lt;br /&gt;&lt;br /&gt;If C++ and Java are about type hierarchies and the taxonomy of types, Go is about composition.&lt;br /&gt;&lt;br /&gt;Doug McIlroy, the eventual inventor of Unix pipes, wrote in 1964 (!):&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;We should have some ways of coupling programs like garden hose--screw in another segment when it becomes necessary to massage data in another way. This is the way of IO also.&lt;/blockquote&gt;That is the way of Go also. Go takes that idea and pushes it very far. It is a language of composition and coupling.&lt;br /&gt;&lt;br /&gt;The obvious example is the way interfaces give us the composition of components. It doesn&#39;t matter what that thing is, if it implements method M I can just drop it in here.&lt;br /&gt;&lt;br /&gt;Another important example is how concurrency gives us the composition of independently executing computations.&lt;br /&gt;&lt;br /&gt;And there&#39;s even an unusual (and very simple) form of type composition: embedding.&lt;br /&gt;&lt;br /&gt;These compositional techniques are what give Go its flavor, which is profoundly different from the flavor of C++ or Java programs.&lt;br /&gt;&lt;br /&gt;===========&lt;br /&gt;&lt;br /&gt;There&#39;s an unrelated aspect of Go&#39;s design I&#39;d like to touch upon: Go was designed to help write big programs, written and maintained by big teams.&lt;br /&gt;&lt;br /&gt;There&#39;s this idea about &quot;programming in the large&quot; and somehow C++ and Java own that domain. I believe that&#39;s just a historical accident, or perhaps an industrial accident. But the widely held belief is that it has something to do with object-oriented design.&lt;br /&gt;&lt;br /&gt;I don&#39;t buy that at all. Big software needs methodology to be sure, but not nearly as much as it needs strong dependency management and clean interface abstraction and superb documentation tools, none of which is served well by C++ (although Java does noticeably better).&lt;br /&gt;&lt;br /&gt;We don&#39;t know yet, because not enough software has been written in Go, but I&#39;m confident Go will turn out to be a superb language for programming in the large. Time will tell.&lt;br /&gt;&lt;br /&gt;===========&lt;br /&gt;&lt;br /&gt;Now, to come back to the surprising question that opened my talk:&lt;br /&gt;&lt;br /&gt;Why does Go, a language designed from the ground up for what what C++ is used for, not attract more C++ programmers?&lt;br /&gt;&lt;br /&gt;Jokes aside, I think it&#39;s because Go and C++ are profoundly different philosophically.&lt;br /&gt;&lt;br /&gt;C++ is about having it all there at your fingertips. I found this quote on a C++11 FAQ:&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;The range of abstractions that C++ can express elegantly, flexibly, and at zero costs compared to hand-crafted specialized code has greatly increased.&lt;/blockquote&gt;That way of thinking just isn&#39;t the way Go operates. Zero cost isn&#39;t a goal, at least not zero CPU cost. Go&#39;s claim is that minimizing programmer effort is a more important consideration.&lt;br /&gt;&lt;br /&gt;Go isn&#39;t all-encompassing. You don&#39;t get everything built in. You don&#39;t have precise control of every nuance of execution. For instance, you don&#39;t have RAII. Instead you get a garbage collector. You don&#39;t even get a memory-freeing function.&lt;br /&gt;&lt;br /&gt;What you&#39;re given is a set of powerful but easy to understand, easy to use building blocks from which you can assemble—compose—a solution to your problem. It might not end up quite as fast or as sophisticated or as ideologically motivated as the solution you&#39;d write in some of those other languages, but it&#39;ll almost certainly be easier to write, easier to read, easier to understand, easier to maintain, and maybe safer.&lt;br /&gt;&lt;br /&gt;To put it another way, oversimplifying of course:&lt;br /&gt;&lt;br /&gt;Python and Ruby programmers come to Go because they don&#39;t have to surrender much expressiveness, but gain performance and get to play with concurrency.&lt;br /&gt;&lt;br /&gt;C++ programmers &lt;i&gt;don&#39;t&lt;/i&gt; come to Go because they have fought hard to gain exquisite control of their programming domain, and don&#39;t want to surrender any of it. To them, software isn&#39;t just about getting the job done, it&#39;s about doing it a certain way.&lt;br /&gt;&lt;br /&gt;The issue, then, is that Go&#39;s success would contradict their world view.&lt;br /&gt;&lt;br /&gt;And we should have realized that from the beginning. People who are excited about C++11&#39;s new features are not going to care about a language that has so much less. &amp;nbsp;Even if, in the end, it offers so much more.&lt;br /&gt;&lt;br /&gt;Thank you.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/8214930309410995806'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/8214930309410995806'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html' title='Less is exponentially more'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-204147499802585288</id>
        <published>2012-04-03T22:22:00.005-07:00</published>
        <updated>2013-12-10T17:24:44.214-08:00</updated>
        <title type='text'>The byte order fallacy</title>
        <content type='html'>&lt;div&gt;Whenever I see code that asks what the native byte order is, it&#39;s almost certain the code is either wrong or misguided. And if the native byte order really does matter to the execution of the program, it&#39;s almost certain to be dealing with some external software that is either wrong or misguided. If your code contains &lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;#ifdef BIG_ENDIAN&lt;/span&gt; or the equivalent, you need to unlearn about byte order.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The byte order of the computer doesn&#39;t matter much at all except to compiler writers and the like, who fuss over allocation of bytes of memory mapped to register pieces. Chances are you&#39;re not a compiler writer, so the computer&#39;s byte order shouldn&#39;t matter to you one bit.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Notice the phrase &quot;computer&#39;s byte order&quot;. What &lt;i&gt;does&lt;/i&gt; matter is the byte order of a peripheral or encoded data stream, but--and this is the key point--the byte order of the computer doing the processing is irrelevant to the processing of the data itself. If the data stream encodes values with byte order B, then the algorithm to decode the value on computer with byte order C should be about B, &lt;i&gt;not about the relationship between B and C&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Let&#39;s say your data stream has a little-endian-encoded 32-bit integer. Here&#39;s how to extract it (assuming unsigned bytes):&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;i = (data[0]&amp;lt;&amp;lt;0) | (data[1]&amp;lt;&amp;lt;8) | (data[2]&amp;lt;&amp;lt;16) | (data[3]&amp;lt;&amp;lt;24);&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;If it&#39;s big-endian, here&#39;s how to extract it:&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;i = (data[3]&amp;lt;&amp;lt;0) | (data[2]&amp;lt;&amp;lt;8) | (data[1]&amp;lt;&amp;lt;16) | (data[0]&amp;lt;&amp;lt;24);&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;Both these snippets work on any machine, independent of the machine&#39;s byte order, independent of alignment issues, independent of just about anything. They are totally portable, given unsigned bytes and 32-bit integers.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What you might have expected to see for the little-endian case was something like&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;i = *((int*)data);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;#ifdef BIG_ENDIAN&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;  /* swap the bytes */&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;  i = ((i&amp;amp;0xFF)&amp;lt;&amp;lt;24) | (((i&amp;gt;&amp;gt;8)&amp;amp;0xFF)&amp;lt;&amp;lt;16) | (((i&amp;gt;&amp;gt;16)&amp;amp;0xFF)&amp;lt;&amp;lt;8) | (((i&amp;gt;&amp;gt;24)&amp;amp;0xFF)&amp;lt;&amp;lt;0);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;#endif&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;or something similar. I&#39;ve seen code like that many times. Why not do it that way? Well, for starters:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;It&#39;s more code.&lt;/li&gt;&lt;li&gt;It assumes integers are addressable at any byte offset; on some machines that&#39;s not true.&lt;/li&gt;&lt;li&gt;It depends on integers being 32 bits long, or requires more &lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;#ifdefs&lt;/span&gt; to pick a 32-bit integer type.&lt;/li&gt;&lt;li&gt;It may be a little faster on little-endian machines, but not much, and it&#39;s slower on big-endian machines.&lt;/li&gt;&lt;li&gt;If you&#39;re using a little-endian machine when you write this, there&#39;s no way to test the big-endian code.&lt;/li&gt;&lt;li&gt;It swaps the bytes, a sure sign of trouble (see below).&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;By contrast, my version of the code:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Is shorter.&lt;/li&gt;&lt;li&gt;Does not depend on alignment issues.&lt;/li&gt;&lt;li&gt;Computes a 32-bit integer value regardless of the local size of integers.&lt;/li&gt;&lt;li&gt;Is equally fast regardless of local endianness, and fast enough (especially on modern processsors) anyway.&lt;/li&gt;&lt;li&gt;Runs the same code on all computers: I can state with confidence that if it works on a little-endian machine it will work on a big-endian machine.&lt;/li&gt;&lt;li&gt;Never &quot;byte swaps&quot;.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;In other words, it&#39;s simpler, cleaner, and utterly portable. There is no reason to ask about local byte order when about to interpret an externally provided byte stream.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I&#39;ve seen programs that end up swapping bytes two, three, even four times as layers of software grapple over byte order. In fact, byte-swapping is the surest indicator the programmer doesn&#39;t understand how byte order works.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Why do people make the byte order mistake so often? I think it&#39;s because they&#39;ve seen a lot of bad code that has convinced them byte order matters. &quot;Here comes an encoded byte stream; time for an &lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;#ifdef&lt;/span&gt;.&quot; In fact, C may be part of the problem: in C it&#39;s easy to make byte order look like an issue. If instead you try to write byte-order-dependent code in a type-safe language, you&#39;ll find it&#39;s very hard. In a sense, byte order only bites you when you cheat.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There&#39;s plenty of software that demonstrates the byte order fallacy is really a fallacy. The entire Plan 9 system ran, without architecture-dependent &lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: &#39;trebuchet ms&#39;;&quot;&gt;#ifdefs&lt;/span&gt; of any kind, on dozens of computers of different makes, models, and byte orders. I promise you, your computer&#39;s byte order doesn&#39;t matter even at the level of the operating system.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And there&#39;s plenty of software that demonstrates how easily you can get it wrong. Here&#39;s one example. I don&#39;t know if it&#39;s still true, but some time back Adobe Photoshop screwed up byte order. Back then, Macs were big-endian and PCs, of course, were little-endian. If you wrote a Photoshop file on the Mac and read it back in, it worked. If you wrote it on a PC and tried to read it on a Mac, though, it wouldn&#39;t work unless back on the PC you checked a button that said you wanted the file to be readable on a Mac. (Why wouldn&#39;t you? Seriously, why wouldn&#39;t you?) Ironically, when you read a Mac-written file on a PC, it always worked, which demonstrates that someone at Adobe figured out something about byte order. But there would have been no problems transferring files between machines, and no need for a check box, if the people at Adobe wrote proper code to encode and decode their files, code that could have been identical between the platforms. I guarantee that to get this wrong took far more code than it would have taken to get it right. &lt;span style=&quot;font-size: x-small;&quot;&gt;[Note added in 2013: I&#39;m told by folks at Adobe that the option was for TIFF files and only needed for third-party plugins. That doesn&#39;t explain why it was PC-only or necessary at all. Adobe might not be the right culprit but the issue was real.]&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Just last week I was reviewing some test code that was checking byte order, and after some discussion it turned out that there was a byte-order-dependency bug in the code being tested. As is often the case, the existence of byte-order-checking was evidence of the presence of a bug. Once the bug was fixed, the test no longer cared about byte order.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And neither should you, because byte order doesn&#39;t matter.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/204147499802585288'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/204147499802585288'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2012/04/byte-order-fallacy.html' title='The byte order fallacy'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-3287673047354124772</id>
        <published>2011-12-31T18:15:00.000-08:00</published>
        <updated>2012-01-01T11:17:50.948-08:00</updated>
        <title type='text'>Esmerelda&#39;s Imagination</title>
        <content type='html'>&lt;div&gt;An actress acquaintance of mine—let&#39;s call her Esmerelda—once said, &quot;I can&#39;t imagine being anything except an actress.&quot;  To which the retort was given, &quot;You can&#39;t be much of an actress then, can you?&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I was reminded of this exchange when someone said to me about Go, &quot;I can&#39;t imagine programming in a language that doesn&#39;t have generics.&quot;  My retort, unspoken this time, was, &quot;You can&#39;t be much of a programmer, then, can you?&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This is not an essay about generics (which are a fine thing and may arrive in Go one day, or may not) but about imagination, or at least what passes for imagination among computer programmers: complaint. A friend observed that the definitive modern pastime is to complain on line. For the complainers, it&#39;s fun, for the recipients of the complaint it can be dispiriting. As a recipient, I am pushing back—by complaining, of course.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Not so long ago, a programmer was someone who programs, but that seems to be the last thing programmers do nowadays. Today, the definition of a programmer is someone who complains unless the problem being solved has already been solved and whose solution can be expressed in a single line of code. (From the point of view of a language designer, this reduces to a corollary of language success: every program must be reducible to single line of code or your language sucks. The lessons of APL have been lost.)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A different, more liberal definition might be that a programmer is someone who approaches every problem exactly the same way and complains about the tools if the approach is unsuccessful.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For the programmer population, the modern pastime demands that if one is required to program, or at least to think while programming, one blogs/tweets/rants instead. I have seen people write thousands of words of on-line vituperation that problem X requires a few extra keystrokes than it might otherwise, missing the irony that had they spent those words on programming, they could have solved the problem many times over with the saved keystrokes. But, of course, that would be programming.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Two years ago Go went public. This year, Dart was announced. Both came from Google but from different teams with different goals; they have little in common. Yet I was struck by a property of the criticisms of Dart in the first few days: by doing a global substitution of &quot;Go&quot; for &quot;Dart&quot;, many of the early complaints about Go would have fit right into the stream of Dart invective. It was unnecessary to try Go or Dart before commenting publicly on them; in fact, it was important not to (for one thing, trying them would require programming). The criticisms were loud and vociferous but irrelevant because they weren&#39;t about the languages at all. They were just a standard reaction to something new, empty of meaning, the result of a modern programmer&#39;s need to complain about everything different. Complaints are infinitely recyclable. (&quot;I can&#39;t imagine programming in a language without XXX.&quot;) After all, they have a low quality standard: they need not be checked by a compiler.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A while after Go launched, the criticisms changed tenor somewhat. Some people had actually tried it, but there were still many complainers, including the one quoted above. The problem now was that imagination had failed: Go is a language for writing Go programs, not Java programs or Haskell programs or any other language&#39;s programs. You need to think a different way to write good Go programs. But that takes time and effort, more than most will invest. So the usual story is to translate one program from another language into Go and see how it turns out. But translation misses idiom. A first attempt to write, for example, some Java construct in Go will likely fail, while a different Go-specific approach might succeed and illuminate. After 10 years of Java programming and 10 minutes of Go programming, any comparison of the language&#39;s capabilities is unlikely to generate insight, yet here come the results, because that&#39;s a modern programmer&#39;s job.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It&#39;s not all bad, of course. Two years on, Go has lots of people who&#39;ve spent the time to learn how it&#39;s meant to be used, and for many willing to invest such time the results have been worthwhile. It takes time and imagination and programming to learn how to use any language well, but it can be time well spent. The growing Go community has generated lots of great software and has given me hope, hope that there may still be actual programmers out there.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;However, I still see far too much ill-informed commentary about Go on the web, so for my own protection I will start 2012 with a resolution:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;I resolve to recognize that a complaint reveals more about the complainer than the complained-about. Authority is won not by rants but by experience and insight, which require practice and imagination. And maybe some programming.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/3287673047354124772'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/3287673047354124772'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2011/12/esmereldas-imagination.html' title='Esmerelda&#39;s Imagination'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-1091166294903681506</id>
        <published>2011-09-18T15:19:00.000-07:00</published>
        <updated>2011-09-18T15:27:01.341-07:00</updated>
        <title type='text'>User experience</title>
        <content type='html'>&lt;div&gt;[We open in a well-lit corporate conference room. A meeting has been running for a while. Lots has been accomplished but time is running out.]&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;[The door opens and a tall, tow-headed twenty-something guy in glasses walks in, carrying a Mac Air and a folder.]&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;Oh, here he is.  This is Richard. I asked him to join us today. Glad he could make it. He&#39;s got some great user experience ideas.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Richard:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Call me Dick.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Dick&#39;s done a lot of seminal UX work for us.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Hey, aren&#39;t you the guy who&#39;s arguing we shouldn&#39;t have search in e-books?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Absolutely. It&#39;s a lousy idea.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;What?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Books are the best UI ever created. They&#39;ve been perfected over more than 500 years of development. We shouldn&#39;t mess with success.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Product manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Well, this is a new age. We should be allowed to ...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Books have never had search. If we add search, we&#39;ll just confuse the user.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Product manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Oh, you&#39;re right. We don&#39;t want to do that.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;But e-books aren&#39;t physical books. They&#39;re not words on paper. They&#39;re just bits, information.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Our users don&#39;t know that.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Yes they do! They don&#39;t want simple books, they want the possibilities that electronic books can bring. Do you know about information theory? Have you even heard of Claude Shannon?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Isn&#39;t he the chef at that new biodynamic tofu restaurant in North Beach?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Uhh, yeah, OK. But look, you&#39;re treating books as a metaphor for your user interface. That&#39;s as lame as using a trash can to throw away files and folders. We can do so much more!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;You misunderstand. Our goal is to make computers easier to use, not to make them more useful.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Product manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Wow, that&#39;s good.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Wow.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Let&#39;s get back on track. Dick, you had some suggestions for us?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Yeah.  I was thinking about the work we did with the Notes iPhone app. Using a font that looked like a felt marker was a big help for users.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Seriously?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Yes, it made users feel more comfortable about keeping notes on their phone.  Having a font that looks like handwriting helps them forget there&#39;s a computer underneath.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;I see....&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Yes, so... I was thinking for the Address Book app for Lion, we should change the look to be like a...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Can you show us?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Yeah, sure. I have a mock-up here.&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;[Opens laptop, turns it to face the room.]&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Product manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;An address book! That&#39;s fantastic. Look at the detail! Leather, seams at the corners, a visible spine. This is awesome!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;It&#39;s just a book. It&#39;s a throwback. What are you doing? Why does it need to look like a physical address book?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Because it &lt;i&gt;is&lt;/i&gt; an address book!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;No it&#39;s not, it&#39;s an app!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;It&#39;s a book.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;You&#39;ve made it one. This time it&#39;s not even a metaphor - it&#39;s literally a book. You&#39;re giving up on the possibility of doing more.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;As I said, users don&#39;t care about functionality. They want comfort and familiarity. An Address Book app that looks like an address book will be welcome. Soothing.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;If they want a paper address book, they can buy one.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Why would they do that if they have one on their desktop?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Can they at least change the appearance? Is there a setting somewhere?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Oh, no. We know better than the user - otherwise why are we here? Settings are just confusing.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;I  ... I really don&#39;t understand what&#39;s going on.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;That&#39;s OK, you don&#39;t have to, but I&#39;d like to give you the action item to build it.  End of the quarter OK?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Uhhh, sure.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Manager.&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Dick, do you have the requirements doc there?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Right here.&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;[Pushes the folder across the desk.]&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Can&#39;t you just mail it to me?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;It&#39;s right there.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Engineer:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;I know, but... OK.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;That&#39;s a great start, Dick. What else do you have?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Well, actually, maybe this is the time to announce that I&#39;m moving on. Today is my last day here.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Manager, Product manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;[Unison] Oh no!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Yeah, sorry about that. I&#39;ve had an amazing time here changing the world but it&#39;s tiem for me to seek new challenges.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Manager:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Do you have something in mind?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dick:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: pre; &quot;&gt;    &lt;/span&gt;Yes, I&#39;m moving north. Microsoft has asked me to head a group there. They&#39;ve got some amazing new ideas around paper clips.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;FADE&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/1091166294903681506'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/1091166294903681506'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2011/09/we-open-in-well-lit-corporate.html' title='User experience'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-1982234857091660188</id>
        <published>2011-08-22T19:36:00.000-07:00</published>
        <updated>2016-02-01T12:26:51.707-08:00</updated>
        <title type='text'>Regular expressions in lexing and parsing</title>
        <content type='html'>&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-family: Georgia, Times New Roman, serif; font-size: 13px;&quot;&gt;Comments extracted from a code review. I&#39;ve been asked to disseminate them more widely.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-family: Georgia, Times New Roman, serif; font-size: 13px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-family: Georgia, Times New Roman, serif; font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;I should say something about regular expressions in lexing and&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;parsing. Regular expressions are hard to write, hard to write well,&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;and can be expensive relative to other technologies. (Even when they&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;are implemented correctly in N*M time, they have significant&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;overheads, especially if they must capture the output.)&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;Lexers, on the other hand, are fairly easy to write correctly (if not&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;as compactly), and very easy to test. Consider finding alphanumeric&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;identifiers.  It&#39;s not too hard to write the regexp (something like&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&quot;[a-ZA-Z_][a-ZA-Z_0-9]*&quot;), but really not much harder to write as a&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;simple loop. The performance of the loop, though, will be much higher&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;and will involve much less code under the covers. A regular expression&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;library is a big thing. Using one to parse identifiers is like using a&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;Mack truck to go to the store for milk.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.952941); color: rgb(51 , 51 , 51); font-family: Georgia, &#39;Times New Roman&#39;, serif; font-size: 13px;&quot;&gt;And when we want to adjust our lexer to admit other character types,&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.952941); color: rgb(51 , 51 , 51); font-family: Georgia, &#39;Times New Roman&#39;, serif; font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.952941); color: rgb(51 , 51 , 51); font-family: Georgia, &#39;Times New Roman&#39;, serif; font-size: 13px;&quot;&gt;such as Unicode identifiers, and handle normalization, and so on, the&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.952941); color: rgb(51 , 51 , 51); font-family: Georgia, &#39;Times New Roman&#39;, serif; font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.952941); color: rgb(51 , 51 , 51); font-family: Georgia, &#39;Times New Roman&#39;, serif; font-size: 13px;&quot;&gt;hand-written loop can cope easily but the regexp approach will break&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.952941); color: rgb(51 , 51 , 51); font-family: Georgia, &#39;Times New Roman&#39;, serif; font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.952941); color: rgb(51 , 51 , 51); font-family: Georgia, &#39;Times New Roman&#39;, serif; font-size: 13px;&quot;&gt;down.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;A similar argument applies to parsing.  Using regular expressions to&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;explore the parse state to find the way forward is expensive,&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;overkill, and error-prone. Standard lexing and parsing techniques are&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;so easy to write, so general, and so adaptable there&#39;s no reason to&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;use regular expressions.  They also result in much faster, safer, and&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;compact implementations.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-family: Georgia, Times New Roman, serif; font-size: 13px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-family: Georgia, Times New Roman, serif; font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;Another way to look at it is that lexers and parsing are matching&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;statically-defined patterns, but regular expressions&#39; strength is that&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;they provide a way to express patterns dynamically.  They&#39;re great in&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;text editors and search tools, but when you know at compile time what&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;all the things are you&#39;re looking for, regular expressions bring far&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255, 255, 255, 0.949219);&quot;&gt;more generality and flexibility than you need.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;Finally, on the point about writing well.  Regular expressions are, in&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;my experience, widely misunderstood and abused. When I do code reviews&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;involving regular expressions, I fix up a far higher fraction of the&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;regular expressions in the code than I do regular statements.  This is&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;a sign of misuse: most programmers (no finger pointing here, just&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;observing a generality) simply don&#39;t know what they are or how to use&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;them correctly.&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;Encouraging regular expressions as a panacea for all text processing&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;problems is not only lazy and poor engineering, it also reinforces&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;their use by people who shouldn&#39;t be using them at all.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;So don&#39;t write lexers and parsers with regular expressions as the&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;starting point. Your code will be faster, cleaner, and much easier to&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: rgba(255 , 255 , 255 , 0.949219); color: rgb(51 , 51 , 51); font-size: 13px;&quot;&gt;understand and to maintain.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/1982234857091660188'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/1982234857091660188'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html' title='Regular expressions in lexing and parsing'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-8832382660654367625</id>
        <published>2010-08-27T18:24:00.000-07:00</published>
        <updated>2010-08-27T18:46:58.782-07:00</updated>
        <title type='text'>Know your science</title>
        <content type='html'>&lt;div&gt;Except for the TV show &quot;The Big Bang Theory&quot;, popular culture gets science wrong.  We all know that.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But there&#39;s a way it tends to get science wrong that upsets me more than most.  That is when it misuses the tools of science by willfully ignoring what science actually means.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One common example is celebrity equations, wherein some mathematical-looking expression mixes two or more celebrities together, as in (I&#39;m making this one up and I&#39;m not a cultural critic, let alone a comic, so please bear with me): Lady Gaga = (2*Madonna + Carrot Top)/3.  Mathematically savvy readers will recognize that I normalized that equation.  If you don&#39;t know what that means, you shouldn&#39;t be writing celebrity equations, because mathematical equations mean something, they&#39;re not just symbols.  Like musical comedy based on bad notes, bogus mathematical equations are not funny, just lazy.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Some years ago I even wrote a letter to Entertainment Weekly when they had a long article full of egregious celebrity equations.  To their credit, they published the letter and even mended their ways for a while. I quote the &lt;a href=&quot;http://www.ew.com/ew/article/0,,284051,00.html&quot;&gt;letter&lt;/a&gt; here:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;According to EW math, the more buzz or intelligence you have, the less likely you are to be on the It List. That may be true, but I bet you didn&#39;t mean that. Your equation is art-directed nonsense. EW seems to think the joke is that the equations look cute: If Einstein is funny, his square root is hilarious...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;In short, mathematics may look funny if you don&#39;t understand it but that doesn&#39;t make it funny if you misuse it in ignorance.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Another sort of abuse is comedy periodic tables:  periodic tables of the vegetables, period table of the desserts, periodic table of the presidents, and on and on.  There are zillions of them.   I believe the vegetables one was the first widely distributed example.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What&#39;s wrong with them?  Again, they miss the point about the one true periodic table, Mendeleev&#39;s periodic table of the elements.  In fact, to put things with no structure into a periodic table not only misses the point of the periodic table, it misses the profound idea that some things have periods.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Mendeleev&#39;s table, by recognizing the &lt;i&gt;periodic&lt;/i&gt; &lt;i&gt;structure&lt;/i&gt; of the elements, predicted not only properties of the elements, but the very &lt;i&gt;existence&lt;/i&gt; of undiscovered elements. It was a breakthrough.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The periodic table is not some artistic layout of letters, it&#39;s science at its very best, one of the great results of the 19th century and the birth of modern chemistry.  It doesn&#39;t honor science to take, say, &lt;a href=&quot;http://gizmodo.com/5169466/the-periodic-table-of-typefaces&quot;&gt;typefaces&lt;/a&gt; and put them in a funny-looking grid.  That just mocks the idea that science can predict the way the world works.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Science is not arbitrary.  Making arbitrary cultural artifacts by abusing scientific ideas is not just wrong, it&#39;s offensive.  It cheapens science.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Another area of abuse is quantum mechanics, and a common victim is Heisenberg&#39;s uncertainty principle.  Despite what some ill-informed academics would have you believe, Heisenberg&#39;s principle is not some general statment about weird shit happening in the world, it is a fantastically precise scientific statement about the limits of measurement of two simultaneous physical properties: position and momentum.  &lt;i&gt;It&#39;s not a metaphor!&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What&#39;s really sad is that many of the commonest misuses of the terminology of quantum mechanics come from other areas of science and technology.  For instance, there is a term in computer engineering called a Heisenbug, which refers to faults that are unpredictable, most often for bugs that go away when you examine them.  It&#39;s a cute name but it isn&#39;t even a correct reference.  The quantum mechanical property of things changing when you observe them is not the Heisenberg uncertainty principle, it&#39;s the observer effect. These two ideas are often confused but they are not the same. They&#39;re not even closely related.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The observer effect in quantum mechanics describes how the act of measuring a quantum system forces the system to cough up a measurable quantity, which triggers a &quot;wave function collapse&quot;.  Heisenberg&#39;s uncertainty principle says that the minimum product of the error in simultaneous measurement of a particle&#39;s position and momentum is Planck&#39;s constant divided by 4π, or as we write it in physics, ℏ/2. (By the way, that&#39;s an extremely small value.)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Not only are these very different ideas, neither of them has anything to do with computer bugs.  The term Heisenbug is trendy but bogus and ignores some strange and beautiful ideas. It&#39;s no better informed than the square root of Einstein or the periodic table of the typefaces.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you&#39;re going to use the terms of science to inform your world, please make a point to understand the science too. Your world will be richer for it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/8832382660654367625'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/8832382660654367625'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2010/08/know-your-science.html' title='Know your science'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-4171630289831923748</id>
        <published>2008-04-02T01:37:00.001-07:00</published>
        <updated>2008-04-02T01:41:36.332-07:00</updated>
        <title type='text'>MacDonald&#39;s not McDonald&#39;s</title>
        <content type='html'>&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://2.bp.blogspot.com/_Fpj1cqLIn_Y/R_NF7kU6pTI/AAAAAAAAAXs/LGXosA-4QgE/s1600-h/mcdonalds.jpg&quot;&gt;&lt;img style=&quot;float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;&quot; src=&quot;http://2.bp.blogspot.com/_Fpj1cqLIn_Y/R_NF7kU6pTI/AAAAAAAAAXs/LGXosA-4QgE/s400/mcdonalds.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;id=&quot;BLOGGER_PHOTO_ID_5184564485699577138&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Same general concept.  Had a hamburger here too.</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/4171630289831923748'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/4171630289831923748'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2008/04/macdonalds-not-mcdonalds.html' title='MacDonald&#39;s not McDonald&#39;s'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
        <media:thumbnail 
            xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/_Fpj1cqLIn_Y/R_NF7kU6pTI/AAAAAAAAAXs/LGXosA-4QgE/s72-c/mcdonalds.jpg" height="72" width="72"/>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-6164750921027759867</id>
        <published>2008-04-01T23:32:00.000-07:00</published>
        <updated>2008-04-02T00:21:42.861-07:00</updated>
        <title type='text'></title>
        <content type='html'>&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://3.bp.blogspot.com/_Fpj1cqLIn_Y/R_MpY0U6pSI/AAAAAAAAAXk/17GRq7O9SN0/s1600-h/photo.jpg&quot;&gt;&lt;img style=&quot;float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;&quot; src=&quot;http://3.bp.blogspot.com/_Fpj1cqLIn_Y/R_MpY0U6pSI/AAAAAAAAAXk/17GRq7O9SN0/s400/photo.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;id=&quot;BLOGGER_PHOTO_ID_5184533102373545250&quot; /&gt;&lt;/a&gt;&lt;br /&gt;When I travel I like to have a hamburger at a McDonald&#39;s restaurant. There are a number of these to be found around the world.</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/6164750921027759867'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/6164750921027759867'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2008/04/when-i-travel-i-like-to-have-hamburger.html' title=''/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
        <media:thumbnail 
            xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/_Fpj1cqLIn_Y/R_MpY0U6pSI/AAAAAAAAAXk/17GRq7O9SN0/s72-c/photo.jpg" height="72" width="72"/>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-108698514063518428</id>
        <published>2006-06-11T13:17:00.000-07:00</published>
        <updated>2007-04-12T11:15:24.910-07:00</updated>
        <title type='text'></title>
        <content type='html'>I can&#39;t find this on the web, so here follows a note I wrote in 1991&lt;br /&gt;of an odd event in my computing career.&lt;br /&gt;&lt;br /&gt;===&lt;br /&gt;&lt;br /&gt;There&#39;s no such thing as bad publicity, the saying goes.&lt;br /&gt;Unless, of course, you have no interest in being a public figure.&lt;br /&gt;That&#39;s where Richard Stallman and I start to diverge.&lt;br /&gt;&lt;br /&gt;A friend called early Saturday to report some good news; groggily,&lt;br /&gt;I countered with a feeling of impending doom.  I had to spend the&lt;br /&gt;day preparing for a talk Monday afternoon at MIT.  The talk itself&lt;br /&gt;would be fine: I&#39;d been invited by Butler Lampson to talk about Plan 9&lt;br /&gt;at the Lab for Computer Science and took that as the kind of honor&lt;br /&gt;I rise to.  I&#39;d give a hell of talk, provided I was allowed to.&lt;br /&gt;The problem, I said, is that MIT and I are connected by some history.&lt;br /&gt;&lt;br /&gt;I explained about The League for Programming Freedom,&lt;br /&gt;just the `League&#39; to insiders, whose multiply ambiguous name&lt;br /&gt;hearkens to an innocent age in software.  Free Software is&lt;br /&gt;like Free Love, a hippie pipe dream in which&lt;br /&gt;computing is free from venality, commercial interests, even&lt;br /&gt;capitalism.  The founder of the League, Richard Stallman,&lt;br /&gt;has been preaching the gospel of promiscuous programming&lt;br /&gt;for years now and has won many converts, especially&lt;br /&gt;in academia.  Especially at MIT.  Especially among the undergraduates.&lt;br /&gt;Especially in the building on Technology Square in Cambridge that&lt;br /&gt;the League shares, in part, with LCS.&lt;br /&gt;&lt;br /&gt;Stallman&#39;s sermons, in print and in person, always include a&lt;br /&gt;long harangue about patents on software.  The citation in that&lt;br /&gt;harangue is usually #4,555,755, AT&amp;T&#39;s US patent on what is&lt;br /&gt;colloquially called ``backing store,&#39;&#39; a technique for implementing&lt;br /&gt;windows on a bitmap display.  This patent is of particular interest&lt;br /&gt;to Stallman because he claims to have used the idea, before the patent&lt;br /&gt;was filed, while writing the window system for the&lt;br /&gt;Lisp Machine at MIT.  The patent is of interest to me because I am&lt;br /&gt;listed as the inventor.&lt;br /&gt;&lt;br /&gt;I don&#39;t wish to dive into the legal and technical intricacies of&lt;br /&gt;the patent question here.  I will just state that I know what I&lt;br /&gt;invented and when I invented it, and I know what Stallman did and&lt;br /&gt;when he did it, and I do not believe that Stallman had nearly as&lt;br /&gt;good an idea as I did.  And as for the propriety of software&lt;br /&gt;patents, I signed a contract when I joined AT&amp;T that said, in&lt;br /&gt;effect, that I could work on whatever I fancied and would be&lt;br /&gt;supported well in that endeavor; all AT&amp;T asked in return was that&lt;br /&gt;they be allowed to make money from my work.  In Stallman&#39;s&lt;br /&gt;world that is a Faustian deal, but then I always thought only&lt;br /&gt;boring people went to Heaven.&lt;br /&gt;&lt;br /&gt;When the patent was filed (October 7, 1982; issued&lt;br /&gt;November 26, 1985), there were very few software patents and&lt;br /&gt;the occasion was celebrated.  I was congratulated warmly and&lt;br /&gt;people were excited about the future of software patents.&lt;br /&gt;Nowadays, however, the climate in universities at least is&lt;br /&gt;very different, and Richard Stallman is almost single-handedly&lt;br /&gt;responsible for the change.  (The business community, on the other&lt;br /&gt;hand, is still excited.)&lt;br /&gt;&lt;br /&gt;A few years ago, AT&amp;T began quietly pressing its case on a small&lt;br /&gt;portfolio of computer graphics patents, with #4,555,775 being central.&lt;br /&gt;Polite letters were written to a number of places inviting people&lt;br /&gt;to draw up license agreements; polite letters were returned, and&lt;br /&gt;legalities proceeded normally.  (I don&#39;t know, and wouldn&#39;t say if&lt;br /&gt;I did, what the state of those legalities is today.)  One of the&lt;br /&gt;letters went to the X consortium at MIT, where it was largely&lt;br /&gt;ignored.  A follow-up letter early in 1991 hit the electronic&lt;br /&gt;bulletin boards, however, and I have been a public figure ever&lt;br /&gt;since.&lt;br /&gt;&lt;br /&gt;I hung up and began preparing for the worst.  Stallman and I had&lt;br /&gt;never met, and I felt sure he&#39;d capitalize on my visit to his&lt;br /&gt;building.&lt;br /&gt;&lt;br /&gt;I was therefore not surprised early Monday afternoon, as we were eating&lt;br /&gt;a takeout lunch in the fifth-floor lounge at LCS, when someone&lt;br /&gt;said that Stallman was preparing to stage a protest at my talk.&lt;br /&gt;Jerry Saltzer went to his office to get a copy of the announcement,&lt;br /&gt;made on a local LCS electronic bulletin board:&lt;br /&gt;&lt;br /&gt;---&lt;br /&gt;&lt;br /&gt;    Date: Sun, 17 Nov 91 20:26:37 -0500&lt;br /&gt;    From: Richard Stallman &lt;rms@gnu.ai.mit.edu&gt;&lt;br /&gt;    To: bboard@lcs.mit.edu&lt;br /&gt;    Subject: Protest the AT&amp;T backing store patent, Monday afternoon&lt;br /&gt;    &lt;br /&gt;    You may have heard that AT&amp;T has a patent on a simple technique called&lt;br /&gt;    &quot;backing store&quot; which consists of saving the hidden parts of a window&lt;br /&gt;    in off-screen memory.  AT&amp;T is using this patent to threaten to sue&lt;br /&gt;    all the users of X windows, including MIT.  A few weeks ago, the X&lt;br /&gt;    consortium stated that these threats are &quot;chilling to university&lt;br /&gt;    research&quot;.&lt;br /&gt;    &lt;br /&gt;    Rob Pike, who obtained this patent for AT&amp;T, is going to be visiting&lt;br /&gt;    Tech Square on Monday afternoon.  If you don&#39;t like AT&amp;T&#39;s&lt;br /&gt;    monopolistic threat, now&#39;s the time to express your opinion by joining&lt;br /&gt;    in a quiet protest against his visit.&lt;br /&gt;    &lt;br /&gt;    Let&#39;s meet on the fourth floor of 545 Tech Square, near room 430,&lt;br /&gt;    around 2:15pm.&lt;br /&gt;    &lt;br /&gt;    Please make a sign, even an el-cheapo sign, to identify yourself as&lt;br /&gt;    part of the protest.  Make up a slogan on the subject of Pike, AT&amp;T,&lt;br /&gt;    backing store, X windows, patents..., then write it with a magic&lt;br /&gt;    marker on a piece of copier paper.&lt;br /&gt;    &lt;br /&gt;    (Pike has spoken publicly in favor of software patents and the backing&lt;br /&gt;    store patent in particular.  He is thus not a reluctant participant in&lt;br /&gt;    AT&amp;T&#39;s campaign of threats.)&lt;br /&gt;&lt;br /&gt;---&lt;br /&gt;&lt;br /&gt;This notice has some characteristic inaccuracies, of which the worst&lt;br /&gt;is that AT&amp;T has never threatened to sue anyone over the patent,&lt;br /&gt;but I love it anyway.  The penultimate paragraph typifies Stallman&lt;br /&gt;as only Stallman himself can.  I asked if Stallman really believed&lt;br /&gt;that people needed instructions on how to make signs.  I was told&lt;br /&gt;that among MIT undergraduates a bizarre form of political correctness&lt;br /&gt;had developed, putting Stallman in charge of a pack of eager&lt;br /&gt;misguided nerds who in a healthier environment would probably&lt;br /&gt;be protesting the killing of rats in biology class.&lt;br /&gt;&lt;br /&gt;My hosts at LCS were mortified.  Stallman had staged a protest&lt;br /&gt;at a company (to complain about Lotus&#39;s ``look and feel&#39;&#39; lawsuit),&lt;br /&gt;but had never picketed a technical talk.  Moreover, I was the&lt;br /&gt;guest of LCS, not the League, had been invited to give this talk,&lt;br /&gt;and was planning to give a technical lecture, not a legal debate,&lt;br /&gt;on a topic unrelated to patents.  There was even a suggestion&lt;br /&gt;about examining the MIT code to see what it said about freedom&lt;br /&gt;of speech.  But then someone pointed out that&lt;br /&gt;Stallman, for all his eccentricities (don&#39;t get me started) was&lt;br /&gt;polite, and if he wanted a `quiet&#39; protest it would be quiet, and&lt;br /&gt;I agreed.&lt;br /&gt;A wag remarked that in the cloistered MIT world, participating&lt;br /&gt;in a demonstration like this would be a broadening experience.&lt;br /&gt;&lt;br /&gt;I was admonished not to talk to the protesters, not to answer&lt;br /&gt;any questions about patents, and to let one of my hosts deflect&lt;br /&gt;any verbal missile hurled at me.  I replied that I had expected&lt;br /&gt;as much and was prepared.  For example, I was wearing a Bugs Bunny&lt;br /&gt;T-shirt rather than a three-piece suit; I am a researcher more&lt;br /&gt;than an AT&amp;T Ambassador, to quote a giveaway pencil from a few&lt;br /&gt;years back.&lt;br /&gt;&lt;br /&gt;I needed to go to the lecture room early to prepare a laptop and&lt;br /&gt;overhead projector for a brief demo during my talk.  Because of&lt;br /&gt;a scheduling conflict, the room was not a classroom but a sort&lt;br /&gt;of playroom full of bean bags and not enough chairs.&lt;br /&gt;&lt;br /&gt;I quickly identified the protesters: they were the ones in the back&lt;br /&gt;with hand-written slogans on pieces of copier paper taped to their&lt;br /&gt;chests.  ``We don&#39;t back AT&amp;T&#39;s Store of Patents,&#39;&#39; was perhaps&lt;br /&gt;the most creative sign, except for a woman in a wheelchair with a&lt;br /&gt;large placard reading, ``Patents Cripple Software.&#39;&#39;  I looked&lt;br /&gt;twice to verify that she needed the wheelchair.  I tried to meet&lt;br /&gt;Stallman&#39;s gaze but he would only steal surreptitious sideways&lt;br /&gt;glances as he nervously paced back and forth in front of his&lt;br /&gt;entourage.&lt;br /&gt;&lt;br /&gt;My equipment set up easily, so I sat down in a reserved chair&lt;br /&gt;in the front row to await the starting time and began chatting&lt;br /&gt;to someone from LCS.  Someone tapped my shoulder.  I turned to&lt;br /&gt;see a sign-encrusted protester.  Physical contact.  I braced myself.&lt;br /&gt;He spoke.&lt;br /&gt;&lt;br /&gt;- Excuse me, would you mind moving?  I won&#39;t be able to see the screen.&lt;br /&gt;&lt;br /&gt;- Don&#39;t worry, I&#39;m giving the talk so I&#39;ll be moving all through it.&lt;br /&gt;&lt;br /&gt;- Fine.  Thanks.&lt;br /&gt;&lt;br /&gt;He sat down.  At that moment, I finally relaxed with the realization&lt;br /&gt;that nothing ugly was going to happen.&lt;br /&gt;&lt;br /&gt;And nothing did.  The talk went very well; I was pleased with the&lt;br /&gt;story I told, a technical explanation of how distributed applications&lt;br /&gt;are built in Plan 9 using its namespace operations (patent applied for).&lt;br /&gt;The protesters were surprised, I think, that my subject was interesting&lt;br /&gt;to them.  At one point they all applauded spontaneously when I described&lt;br /&gt;a feature of the system.  I also think they were surprised that the&lt;br /&gt;inventor of #4,555,755 was funny, theatrical, and clever.  At least&lt;br /&gt;half the questions (all technical) during and after the talk were from&lt;br /&gt;the protesters.  Stallman said nothing.&lt;br /&gt;&lt;br /&gt;Afterwards an LCS member said that, as a result of Stallman&#39;s ploy,&lt;br /&gt;my audience was about twice what it would have been.  The people&lt;br /&gt;he dragged in came for political reasons but ended up learning&lt;br /&gt;something.&lt;br /&gt;&lt;br /&gt;Here&#39;s what the League&#39;s newsletter said about the event:&lt;br /&gt;&lt;br /&gt;---&lt;br /&gt;&lt;br /&gt;    CAMBRIDGE, MA, November 18, 1991 -- Rob Pike, a software designer&lt;br /&gt;    from AT&amp;T Bell Labs, expected to deliver an ordinary seminar on&lt;br /&gt;    his latest research project.  Instead, he found a room filled&lt;br /&gt;    with programmers carrying signs to protest the consequences of&lt;br /&gt;    his previous project: the AT&amp;T &quot;backing store&quot; patent which AT&amp;T&lt;br /&gt;    has used to threaten all the members of the X Consortium,&lt;br /&gt;    including MIT itself.&lt;br /&gt;       Of the approximately 80 people present at the talk, about 50&lt;br /&gt;    carried protest signs.  The protestors (sic) did not try to interfere&lt;br /&gt;    with the seminar.  They simply raised their signs as Pike began&lt;br /&gt;    to speak.  This accomplished the purpose of making their ire known.&lt;br /&gt;&lt;br /&gt;---&lt;br /&gt;&lt;br /&gt;I accomplished my purpose of delivering a ``seminar on [my] latest&lt;br /&gt;research project.&#39;&#39;  Other than being a good talk, it was also,&lt;br /&gt;in the end, pretty ordinary.</content>
        <link rel='replies' type='application/atom+xml' href='https://commandcenter.blogspot.com/feeds/108698514063518428/comments/default' title='Post Comments'/>
        <link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=6983287&amp;postID=108698514063518428' title='0 Comments'/>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/108698514063518428'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/108698514063518428'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2006/06/i-cant-find-this-on-web-so-here.html' title=''/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
        <thr:total>0</thr:total>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-141117858140610254</id>
        <published>2006-04-09T13:48:00.000-07:00</published>
        <updated>2007-04-29T13:53:49.778-07:00</updated>
        <title type='text'>A perfect moment</title>
        <content type='html'>Yesterday afternoon was just the right sort of weather for sitting in the park, so towards sunset Renee and I headed down to the little park below us, which has a view across the water and a lovely, long fish pond with a stone bridge across it.  The plan was to sit on a bench and watch the light fade, sunset itself being hidden by the hills behind.&lt;br /&gt;&lt;br /&gt;Our plan stumbled when we discovered a wedding in progress on the half of the park with the best benches, and then there were sprinkles of rain.  We sat on a stone bench by the bridge, sheltered by some trees overhead, and waited for the shower to pass.  The violin players in the wedding didn&#39;t seem to mind much; they stayed out even as it sprinkled. But the shower soon passed and we moved to a bench at the other end of the park, away from the wedding but still with musical accompaniment. From there, we could look out across the grass and pond and towards the water.  The park is small, the pond just a few paces in front of us.&lt;br /&gt;&lt;br /&gt;There were five ibises wandering on the grass by the verge of the pond, poking their long beaks into the grass to find worms, plus a couple of gulls and pigeons lolling about.&lt;br /&gt;&lt;br /&gt;Sunset started to get more colorful; the clouds started to go pink and the buildings in the distance, by the harbor, illuminated by the setting sun, glowed a rich orange.&lt;br /&gt;&lt;br /&gt;Here, then, is the scene: in front of us, grass with ibises and other birds, then a babbling pond with koi, a few flowers and bushes, then the harbor with boats.  Towards the right, a stone bridge over the pond, the wedding party, and glowing buildings.  In the sky above, pink puffy clouds against a blue sky and above that, a quarter moon. Through all of this, the violins played gentle music.&lt;br /&gt;&lt;br /&gt;The sunset strengthened, the colors deepened.&lt;br /&gt;&lt;br /&gt;The ibises moved to the right and formed a little pack of five. From the left came a couple of folks with three beagles straining at their leashes.  They pulled towards the ibises, who stared back at them. All froze. These two groups framed the grass, then above them, pond and bushes and boats and water and sky and pink clouds and then a rainbow popped out just below the moon, arcing like an ibis&#39;s beak from left, above the beagles, over to the right, towards the orange buildings and the wedding party, whose music continued to accompany this magic scene, a painting in real life, a Victorian tableau, a perfect moment.</content>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/141117858140610254'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/141117858140610254'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2006/04/perfect-moment.html' title='A perfect moment'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-108667834133594497</id>
        <published>2004-06-08T00:02:00.000-07:00</published>
        <updated>2004-06-08T00:07:02.910-07:00</updated>
        <title type='text'>news</title>
        <content type='html'>Ronald Reagan is still dead.
&lt;br /&gt;
&lt;br /&gt;I suppose it&#39;s obvious - legacy and all that - but really I don&#39;t see why the death of someone is worth much news. A mention yes but all this?  Plus, in this case, it&#39;s someone who had disappeared from public view a decade ago.  He already had things named after him in every state (that&#39;s the goal, anyway); all they need to do is add &#39;memorial&#39; and it&#39;s done.
&lt;br /&gt;
&lt;br /&gt;I will stop before getting political.
&lt;br /&gt;</content>
        <link rel='replies' type='application/atom+xml' href='https://commandcenter.blogspot.com/feeds/108667834133594497/comments/default' title='Post Comments'/>
        <link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=6983287&amp;postID=108667834133594497' title='0 Comments'/>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/108667834133594497'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/108667834133594497'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2004/06/news.html' title='news'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
        <thr:total>0</thr:total>
    </entry>
    <entry>
        <id>tag:blogger.com,1999:blog-6983287.post-108448452581930334</id>
        <published>2004-05-13T14:41:00.000-07:00</published>
        <updated>2004-05-13T14:42:05.820-07:00</updated>
        <title type='text'>Hello</title>
        <content type='html'>World.</content>
        <link rel='replies' type='application/atom+xml' href='https://commandcenter.blogspot.com/feeds/108448452581930334/comments/default' title='Post Comments'/>
        <link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=6983287&amp;postID=108448452581930334' title='0 Comments'/>
        <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/108448452581930334'/>
        <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/6983287/posts/default/108448452581930334'/>
        <link rel='alternate' type='text/html' href='https://commandcenter.blogspot.com/2004/05/hello.html' title='Hello'/>
        <author>
            <name>Rob Pike</name>
            <uri>https://plus.google.com/101960720994009339267</uri>
            <email>noreply@blogger.com</email>
            <gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-4J2rFsFMxEI/AAAAAAAAAAI/AAAAAAAAboY/HJFZjsUwrSs/s512-c/photo.jpg'/>
        </author>
        <thr:total>0</thr:total>
    </entry>
</feed>